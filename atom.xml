<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hang &#39;s blogs</title>
  
  
  <link href="/tinytinycn.github.io/atom.xml" rel="self"/>
  
  <link href="http://github.com/"/>
  <updated>2019-09-22T09:27:11.093Z</updated>
  <id>http://github.com/</id>
  
  <author>
    <name>hang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-13-virtualenv</title>
    <link href="http://github.com/2019/03/25/python-13-virtualenv/"/>
    <id>http://github.com/2019/03/25/python-13-virtualenv/</id>
    <published>2019-03-25T07:53:41.000Z</published>
    <updated>2019-09-22T09:27:11.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>virtualenv 提供隔离的python运行环境, 解决不同应用间多版本的冲突问题;</p><ul><li><p>pip3安装virtualenv到python3版本下包中<br><code>pip3 install virtualenv</code></p></li><li><p>创建一个项目的独立虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir tinyproject</span><br><span class="line">cd tinyproject</span><br><span class="line">virtualenv --no-site-packages venv //不复制系统python的所有第三方包, 最新版本默认使用此参数, 可以不用写出来</span><br><span class="line">source venv/bin/activate //进入虚拟环境</span><br><span class="line">pip --version //虚拟环境的pip版本</span><br><span class="line">pip install django //安装第三方包至虚拟环境的下</span><br><span class="line">deactivate //退出虚拟环境</span><br></pre></td></tr></table></figure></li><li><p>移除虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br><span class="line">rm -r /path/to/ENV  //例如: rm -r tinyproject/venv</span><br></pre></td></tr></table></figure></li><li><p>可选参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages ENV //继承系统已安装第三方包</span><br></pre></td></tr></table></figure></li><li><p>更多<br><code>https://virtualenv.pypa.io/en/latest/</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;virtualenv&quot;&gt;&lt;a href=&quot;#virtualenv&quot; class=&quot;headerlink&quot; title=&quot;virtualenv&quot;&gt;&lt;/a&gt;virtualenv&lt;/h2&gt;&lt;p&gt;virtualenv 提供隔离的python运行环境, 解决不同应用间多版本
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-12-常用内建模块</title>
    <link href="http://github.com/2018/09/20/python-12-%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>http://github.com/2018/09/20/python-12-常用内建模块/</id>
    <published>2018-09-20T08:33:41.000Z</published>
    <updated>2019-09-22T09:26:36.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="datetime日期时间"><a href="#datetime日期时间" class="headerlink" title="datetime日期时间"></a>datetime日期时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">now=datetime.now()                # 获取当前时间</span><br><span class="line">dt=datetime(2018, 09, 15, 12, 12) # 指定时间</span><br><span class="line">ts=dt.timestamp()                 # datetime类型 &gt; timestamp时间戳(注意:浮点数,小数为代表毫秒数)</span><br><span class="line">dt2=datetime.fromtimestamp(ts)    # timestamp时间戳 &gt; datetime类型</span><br><span class="line">dt3=datetime.utcfromtimestamp(t)  # timestamp时间戳 &gt; UTC时间</span><br><span class="line">dt4=datetime.strptime(&apos;2018-09-15 12:12:12&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;) # str &gt; datetime类型</span><br><span class="line">dt5=datetime.now()</span><br><span class="line">dt5.strftime(&apos;%a, %b %d %H:%M&apos;) //Fri, Sep 15 12:12 datetime类型 &gt; str</span><br></pre></td></tr></table></figure><ul><li><p>日期计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime, timedelta</span><br><span class="line"></span><br><span class="line">now=datetime.now()</span><br><span class="line">now+timedelta(hours=10)</span><br><span class="line">now-timedelta(days=1)</span><br><span class="line">now+timedelta(days=2, hours=12)</span><br></pre></td></tr></table></figure></li><li><p>创建时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime, timedelta, timezone</span><br><span class="line"></span><br><span class="line">tz_utc_8=timezone(timedelat(hours=8)) # 创建UTC+8:00时区</span><br><span class="line">now=datetime.now()</span><br><span class="line">dt=now.replace(tzinfo=tz_utc_8)       # 为dt强制设置一个时区</span><br></pre></td></tr></table></figure></li><li><p>时区转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">utc_dt=datetime.utcnow().replace(tzinfo=timezone.utc)  # 获取utc时间, 强制设置为UTC+0:00时区</span><br><span class="line">bj_dt=utc_dt.astimezone(timezone(timedelta(hours=8))) # 转换成UTC+8:00时区对应时间</span><br><span class="line">dj_dt=utc_dt.astimezone(timezone(timedelta(hours=9))) # 转换成UTC+9:00时区对应时间</span><br><span class="line">dj_dt=bj_dt.astimezone(timezone(timedelta(hours=9))) # UTC+8:00 &gt; UTC+9:00</span><br></pre></td></tr></table></figure></li></ul><h3 id="collections集合"><a href="#collections集合" class="headerlink" title="collections集合"></a>collections集合</h3><ul><li><p>nametuple(‘名称’, [属性list])函数, 创建一个自定义tuple对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">point=namedtuple(&apos;point&apos;, [&apos;x&apos;,&apos;y&apos;])</span><br><span class="line">p=point(1,2)</span><br><span class="line">p.x //1</span><br><span class="line">p.y //2</span><br></pre></td></tr></table></figure></li><li><p>deque高效实现插入删除的双向列表, 适合队列和堆栈</p></li><li><p>deque除了实现list的append()/pop()函数, 还支持appendleft()/popleft()函数从头部添加删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import collections import deque</span><br><span class="line"></span><br><span class="line">q=deque([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">q.append(&apos;x&apos;)</span><br><span class="line">q.appendleft(&apos;y&apos;)</span><br><span class="line">q //[&apos;y&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;x&apos;]</span><br></pre></td></tr></table></figure></li><li><p>defaultdict()函数实现不存在key对应元素时,支持默认返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line">dd=defaultdict(lambda:&apos;N/A&apos;)</span><br><span class="line">dd[&apos;k1&apos;]=&apos;abc&apos;</span><br><span class="line">dd[&apos;k1&apos;] //&apos;abc&apos;</span><br><span class="line">dd[&apos;k2&apos;] //不存在, 返回默认值&apos;N/A&apos;</span><br></pre></td></tr></table></figure></li><li><p>OrderedDict()函数实现保持key顺序元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">od=OrderedDict([(&apos;a&apos;,1),(&apos;b&apos;,2),(&apos;c&apos;,3)])</span><br><span class="line">od //保持key的有序性</span><br><span class="line">od[&apos;d&apos;]=4</span><br><span class="line">od[&apos;c&apos;]=3</span><br><span class="line">od.keys() //[&apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;] 注意: 当插入新key时, 总是根据插入时的顺序保持key的排序位置</span><br></pre></td></tr></table></figure></li><li><p>Counter()计数器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">c=Counter()</span><br><span class="line">for ch in &apos;python&apos;:</span><br><span class="line">    c[ch]=c[ch]+1</span><br><span class="line"></span><br><span class="line">c //实际上, Counter是dict子类</span><br></pre></td></tr></table></figure></li></ul><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><ul><li>Base64一种用64个字符标志任意二进制数据的方法(把3个字节二进制变成4个字节字符串, 不足3倍末尾补\x00, 在编码后末尾加=或==)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">base64.b64encode(b&apos;binary\x00string&apos;) //YmluYXJ5AHN0cmluZw==</span><br><span class="line">base64.b64decode(b&apos;YmluYXJ5AHN0cmluZw==&apos;) //b&apos;binary\x00string&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><ul><li>摘要算法又称哈希算法,散列算法, 通过一个函数, 讲任意长度的数据转换为一个长度固定的数据串(通常用16进制的字符串表示)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(&apos;hello, world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line">md55=hashlib.md5()</span><br><span class="line">md55.update(&apos;hello,&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">md55.update(&apos; world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(md55.hexdigest())</span><br><span class="line"></span><br><span class="line">sha1=hashlib.sha1()</span><br><span class="line">sha1.update(&apos;hello, world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(sha1.hexdigest())</span><br></pre></td></tr></table></figure></li></ul><h3 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h3><ul><li>内置模块实现了标准的Hmac算法，它利用一个key对message计算“杂凑”后的hash，使用hmac算法比标准hash算法更安全，因为针对相同的message，不同的key会产生不同的hash<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line">message = b&apos;hello, world.&apos;</span><br><span class="line">key = b&apos;secret&apos;</span><br><span class="line">h = hmac.new(key, message, digestmod=&apos;MD5&apos;) //随机key, 注意使用的bytes类型</span><br><span class="line">print(h.hexdigest())</span><br></pre></td></tr></table></figure></li></ul><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><ul><li>Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">natuals=itertools.count(1) //创建一个无限迭代器</span><br><span class="line">cs=itertools.cycle(&apos;abc&apos;)  //创建一个无限循环一个序列的迭代器</span><br><span class="line">ns=itertools.repeat(&apos;A&apos;, 3) //创建一个无限重复一个序列的迭代器, 第二个参数可以限定重复次数</span><br><span class="line">ns=itertools.takewhile(lambda x:x&lt;=10, natuals) //截取一个有限的序列</span><br><span class="line">list(ns)</span><br><span class="line">for c in itertools.chain(&apos;abc&apos;, &apos;xyz&apos;):  //串联两个序列, 创建一个迭代器</span><br><span class="line">    print(c)</span><br><span class="line">for key, group in itertools.groupby(&apos;AAABBBCCC&apos;): //迭代器中相同元素分组</span><br><span class="line">    print(key, list(group))</span><br><span class="line">for key, group in itertools.groupby(&apos;AaaBbbCcc&apos;, lambda c:c.upper()): //制定分组限定条件</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure></li></ul><h3 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h3><ul><li><p>某个对象方法的前后添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Query(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def query(self):</span><br><span class="line">        print(&apos;query info about &#123;0&#125;&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def create_query(name):</span><br><span class="line">    print(&apos;begin&apos;)</span><br><span class="line">    q = Query(name)</span><br><span class="line">    yield q</span><br><span class="line">    print(&apos;end&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with create_query(&apos;tinytinycn&apos;) as q:</span><br><span class="line">    q.query()</span><br></pre></td></tr></table></figure></li><li><p>某段代码前后添加特定代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def tag(name):</span><br><span class="line">    print(&apos;&lt;&#123;0&#125;&gt;&apos;.format(name))</span><br><span class="line">    yield</span><br><span class="line">    print(&apos;&lt;/&#123;0&#125;&gt;&apos;.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with tag(&apos;div&apos;):</span><br><span class="line">    print(&apos;\thello&apos;)</span><br><span class="line">    print(&apos;\tworld&apos;)</span><br></pre></td></tr></table></figure></li><li><p>如果某个对象没有实现上下文, 就不能用于with语句, 需要使用closing()把对象变成上下文对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from contextlib improt closing</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line"></span><br><span class="line">with closing(urlopen(&apos;http://www.python.org&apos;)) as page:</span><br><span class="line">    for line in page:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></li><li><p>closing是一个进过@contextmanager修饰的generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@contextmanager</span><br><span class="line">def closing(thing):</span><br><span class="line">    try:</span><br><span class="line">        yield thing</span><br><span class="line">    finally:</span><br><span class="line">        thing.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><ul><li>urllib提供的功能就是利用程序去执行各种HTTP请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, parse</span><br><span class="line"></span><br><span class="line">print(&apos;login to weibo.cn...&apos;)</span><br><span class="line">email = input(&apos;email: &apos;)</span><br><span class="line">password = input(&apos;password: &apos;)</span><br><span class="line">login_data = parse.urlencode([</span><br><span class="line">    (&apos;username&apos;, email),</span><br><span class="line">    (&apos;password&apos;, password),</span><br><span class="line">    (&apos;client_id&apos;, &apos;&apos;),</span><br><span class="line">    (&apos;savestate&apos;, 1),</span><br><span class="line">    (&apos;ec&apos;, &apos;&apos;),</span><br><span class="line">    (&apos;pagerefer&apos;, &apos;https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;r=http%3A%2F%2Fm.weibo.cn%2F&apos;)</span><br><span class="line">])</span><br><span class="line"># post header</span><br><span class="line">req = request.Request(&apos;https://passport.weibo.cn/sso/login&apos;)</span><br><span class="line">req.add_header(&apos;Origin&apos;, &apos;https://passport.weibo.cn&apos;)</span><br><span class="line">req.add_header(&apos;User-Agent&apos;,</span><br><span class="line">               &apos;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&apos;)</span><br><span class="line">req.add_header(&apos;Referer&apos;,</span><br><span class="line">               &apos;https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F&apos;)</span><br><span class="line"># 代理</span><br><span class="line">proxy_handler = request.ProxyHandler(&#123;&apos;http&apos;: &apos;http://www.example.com:3128/&apos;&#125;)</span><br><span class="line">proxy_basic_auth_handler = request.ProxyBasicAuthHandler()</span><br><span class="line">proxy_basic_auth_handler.add_password(&apos;realm&apos;, &apos;host&apos;, &apos;username&apos;, &apos;password&apos;)</span><br><span class="line">opener = request.build_opener(proxy_handler, proxy_basic_auth_handler)</span><br><span class="line"></span><br><span class="line"># 提交data</span><br><span class="line">with opener.open(req, data=login_data.encode(&apos;utf-8&apos;)) as f:</span><br><span class="line">    print(&apos;status: &apos;, f.status, f.reason)</span><br><span class="line">    for k, v in f.getheaders():</span><br><span class="line">        print(&apos;&#123;0&#125;: &#123;1&#125;&apos;.format(k, v))</span><br><span class="line">    print(&apos;data: &apos;, f.read().decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTMLParse"><a href="#HTMLParse" class="headerlink" title="HTMLParse"></a>HTMLParse</h3><ul><li>解析html<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from html.parser import HTMLParser</span><br><span class="line">from html.entities import name2codepoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyHTMLParser(HTMLParser):</span><br><span class="line">    def handle_starttag(self, tag, attrs):</span><br><span class="line">        print(&apos;&lt;&#123;0&#125;&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_endtag(self, tag):</span><br><span class="line">        print(&apos;&lt;/&#123;0&#125;&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_startendtag(self, tag, attrs):</span><br><span class="line">        print(&apos;&lt;&#123;0&#125;/&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_data(self, data):</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">    def handle_comment(self, data):</span><br><span class="line">        print(&apos;&lt;!--&apos;, data, &apos;--&gt;&apos;)</span><br><span class="line"></span><br><span class="line">    def handle_entityref(self, name):</span><br><span class="line">        print(&apos;&amp;&#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line">    def handle_charref(self, name):</span><br><span class="line">        print(&apos;&amp;#&#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html_parser = MyHTMLParser()</span><br><span class="line">html_parser.feed(</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- test html parser --&gt;&lt;p&gt;Some &lt;a href=\&quot;#\&quot;&gt;html&lt;/a&gt; HTML&amp;nbsp;tutorial...&lt;br&gt;END&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;datetime日期时间&quot;&gt;&lt;a href=&quot;#datetime日期时间&quot; class=&quot;headerlink&quot; title=&quot;datetime日期时间&quot;&gt;&lt;/a&gt;datetime日期时间&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-11-正则</title>
    <link href="http://github.com/2018/09/14/python-11-%E6%AD%A3%E5%88%99/"/>
    <id>http://github.com/2018/09/14/python-11-正则/</id>
    <published>2018-09-14T03:53:41.000Z</published>
    <updated>2019-09-22T09:25:59.291Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>\d 1个数字</p></li><li><p>\w 1个字母</p></li><li><p>\s 1个空格</p></li><li><p>.  1个字符</p></li><li><ul><li>0到多个</li></ul></li><li><ul><li>1到多个</li></ul></li><li><p>? 0或1个</p></li><li><p>{n} n个</p></li><li><p>{n,m} n到m个</p></li><li><p>[] 范围内的一个</p></li><li><p>(|) 其中的一个</p></li><li><p>^开头 结尾$</p></li><li><p>\转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;abc\\-007&apos; # python字符串 python中 \为转义字符</span><br><span class="line">&apos;abc\-007&apos;    # 正则字符串 正则中 \为转义字符</span><br><span class="line"></span><br><span class="line">s2=r&apos;abc\-007&apos; # 使用r前缀, 不用考虑python中的转义问题</span><br><span class="line">&apos;abc\-007&apos;    # 正则字符串</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">re.match(r&apos;^\w&#123;3&#125;\-\d&#123;1,3&#125;$&apos;, &apos;abc-007&apos;)  # 匹配成功, 返回Match对象. 否则None</span><br></pre></td></tr></table></figure></li><li><p>split切分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(r&apos;[\s+\,\;]+&apos;, &apos;a b,c; ;d , e&apos;)</span><br></pre></td></tr></table></figure></li><li><p>()分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m=re.match(r&apos;^(\w&#123;3&#125;)\-(\d&#123;1,5&#125;)$&apos;, &apos;abc-1234&apos;)</span><br><span class="line">m.group(0) //abc-1234 # 永远是原始字符串</span><br><span class="line">m.group(1) //abc      # 匹配的子串</span><br><span class="line">m.group(2) //1234     # 匹配的子串</span><br><span class="line">m.groups() //(&apos;abc&apos;, &apos;1234&apos;)</span><br></pre></td></tr></table></figure></li><li><p>贪婪匹配(默认), 匹配尽可能多的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.match(r&apos;^(\d+)(0*)$&apos;, &apos;123000&apos;).groups() // (&apos;123000&apos;, &apos;&apos;) 贪婪模式\d+匹配到最后一个0, 0*只能匹配到空串</span><br><span class="line">re.match(r&apos;^(\d+?)(0*)$&apos;, &apos;123000&apos;).groups() //(&apos;123&apos;, &apos;000&apos;) 使用? 非贪婪模式\d+?匹配尽可能少的字符, 0*匹配到尽可能多的0</span><br></pre></td></tr></table></figure></li><li><p>预编译正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_tel=re.compile(r&apos;^(\d&#123;3&#125;)\-(\d&#123;3,8&#125;)$&apos;)</span><br><span class="line">re_tel.match(&apos;010-12345&apos;).groups()</span><br><span class="line">re_tal.match(&apos;010-8086&apos;).groups()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;\d 1个数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\w 1个字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\s 1个空格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.  1个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;0到多个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-10-进程线程</title>
    <link href="http://github.com/2018/09/14/python-10-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://github.com/2018/09/14/python-10-进程线程/</id>
    <published>2018-09-14T02:23:41.000Z</published>
    <updated>2019-09-22T09:25:37.518Z</updated>
    
    <content type="html"><![CDATA[<p>null</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;null&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-09-io</title>
    <link href="http://github.com/2018/09/13/python-09-io/"/>
    <id>http://github.com/2018/09/13/python-09-io/</id>
    <published>2018-09-13T10:03:41.000Z</published>
    <updated>2019-09-22T09:24:53.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><ul><li>读文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;r&apos;) //读文件模式r</span><br><span class="line">f.read() //&apos;hello,world&apos;, 若文件不存在, 则抛出IOError</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;/home/tinytinycn/test.log&apos;, &apos;r&apos;) as f:</span><br><span class="line">    print(f.read()) //with自动调用close()方法</span><br></pre></td></tr></table></figure><ul><li><p>合理读取文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.read() //一次行读取全部内容</span><br><span class="line">f.read(size) //每次按size个字节读取</span><br><span class="line">f.readlines()一次读取全部内容并返回list 适合配置文件</span><br></pre></td></tr></table></figure></li><li><p>file-like Object, 包含有read()方法的对象, 无需集成特定类</p></li><li><p>读取二级制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.jpg&apos;, &apos;rb&apos;)</span><br><span class="line">f.read() //十六进制表示字节</span><br></pre></td></tr></table></figure></li><li><p>读取编码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/gbk.txt&apos;, &apos;r&apos;, encoding=&apos;gbk&apos;)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;w&apos;)</span><br><span class="line">f.write(&apos;hello world&apos;) //不会立即写入磁盘, 放入内存缓存, 空闲时写入</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;w&apos;) as f:</span><br><span class="line">    f.wirte(&apos;hello world&apos;) //覆盖文件</span><br></pre></td></tr></table></figure><h3 id="StringIO-amp-BytesIO"><a href="#StringIO-amp-BytesIO" class="headerlink" title="StringIO &amp; BytesIO"></a>StringIO &amp; BytesIO</h3><ul><li><p>StringIO读写, 操作str</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line">f=StringIO()</span><br><span class="line">f.write(&apos;hello world&apos;)</span><br><span class="line"></span><br><span class="line">f2=StringIO(&apos;hello\nhi\npython&apos;)</span><br><span class="line">while True:</span><br><span class="line">    s=f2.readline()</span><br><span class="line">    if s==&apos;&apos;:</span><br><span class="line">        break</span><br><span class="line">    print(s.strip())</span><br></pre></td></tr></table></figure></li><li><p>BytesIO读写, 操作二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">f=Bytes()</span><br><span class="line">f.write(&apos;中文&apos;.encode(&apos;utf-8&apos;)) //写入经过utf-8编码的bytes</span><br><span class="line">print(f.getvalue()) //b&apos;\xe4\xb8\xad...&apos;</span><br><span class="line"></span><br><span class="line">f2=Bytes(b&apos;\xe4\xb8\xad...&apos;)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作文件-amp-目录"><a href="#操作文件-amp-目录" class="headerlink" title="操作文件 &amp; 目录"></a>操作文件 &amp; 目录</h3><ul><li><p>操作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.path.abspath(&apos;.&apos;)</span><br><span class="line">os.path.join(&apos;/home/tinytinycn&apos;, &apos;testdir&apos;) //某个目录下创建新目录</span><br><span class="line">os.mkdir(&apos;/home/tinytinycn/testdir&apos;) //创建目录</span><br><span class="line">os.rmdir(&apos;/home/tinytinycn/testdir&apos;) //删除目录</span><br><span class="line">os.path.split(&apos;/home/tinytinycn/testdir/file.log&apos;) //(&apos;/home/tinytinycn/testdir&apos;, &apos;file.log&apos;)</span><br><span class="line">os.path.splittest(&apos;/path/to/file.log&apos;) //(&apos;/path/to/file&apos;, &apos;.txt&apos;)</span><br></pre></td></tr></table></figure></li><li><p>操作文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rename(&apos;test.txt&apos;, &apos;test.py&apos;) //修改当前目录文件名</span><br><span class="line">os.remove(&apos;test.py&apos;) //删除文件</span><br></pre></td></tr></table></figure></li><li><p>os模块不提供复制文件函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">[x for x in os.listdir(&apos;.&apos;) if os.path.isdir(x)]</span><br><span class="line">[x for x in os.listdir(&apos;.&apos;) if os.path.isfile(x) and os.path.splitext(x)[1]==&apos;.py&apos;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul><li><p>序列化, 将内存中的数据写入磁盘或通过网络传输到其他机器上</p></li><li><p>python提供pickle模块实现序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">D=dict(name=&apos;tiny&apos;, age=25, score=100)</span><br><span class="line">pickle.dumps(D) //序列化为一个bytes, 可将bytes写入文件</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.txt&apos;, &apos;wb&apos;)</span><br><span class="line">pickle.dump(D, f) //直接将对象序列化后写入file-like Object</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">`#` 反序列化, 把对象从磁盘读到内存中bytes, 然后通过pickle.loads()反序列化出对象</span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.txt&apos;, &apos;rb&apos;)</span><br><span class="line">D2=pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(D) //反序列化后的dict对象</span><br></pre></td></tr></table></figure></li><li><p>JSON, 将对象徐丽华成标准格式, 方便在不同编程语言之间传递对象</p></li><li><p>python提供json模块实现python对象到JSON格式的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">D=dict(name=&apos;tiny&apos;, age=25, score=100)</span><br><span class="line">json.dumps(D) //返回一个str &#123;&quot;name&quot;:&quot;tiny&quot;, &quot;age&quot;:25, &quot;score&quot;:100&#125;</span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.json&apos;, &apos;w&apos;)</span><br><span class="line">json.dump(D, f) //写入一个file-like Object</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">`#` 把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化.</span><br></pre></td></tr></table></figure></li><li><p>JSON编码UTF-8</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;读文件&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-08-错误调试测试</title>
    <link href="http://github.com/2018/09/13/python-08-%E9%94%99%E8%AF%AF%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    <id>http://github.com/2018/09/13/python-08-错误调试测试/</id>
    <published>2018-09-13T08:03:41.000Z</published>
    <updated>2019-09-22T09:24:33.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;try start&apos;)</span><br><span class="line">    res=10/0</span><br><span class="line">    print(&apos;try end&apos;)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&apos;valueerror: &apos;,e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&apos;zerodivisionerror: &apos;,e)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;no error&apos;)</span><br><span class="line">finally:</span><br><span class="line">    print(&apos;finally..&apos;)</span><br><span class="line">print(&apos;END&apos;)</span><br></pre></td></tr></table></figure><ul><li><p>所有的错误都从BaseException类派生</p></li><li><p>logging模块记录错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">def foo(s):</span><br><span class="line">    return 10/int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s)*2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(0)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line"></span><br><span class="line">main() //异常, 打印错误栈</span><br><span class="line">print(&apos;END&apos;)</span><br></pre></td></tr></table></figure></li><li><p>抛出错误, 可以自定义异常class, 尽量使用内置错误类型(ValueError/TypeError)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n=int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise FooError(&apos;invalid value: %s&apos; % s)</span><br><span class="line">    return 10/n</span><br><span class="line"></span><br><span class="line">foo(&apos;0&apos;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li><p>print()</p></li><li><p>断言assert, 断言失败将抛出AssertionError</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    n=int(s)</span><br><span class="line">    assert n!=0, &apos;n is zero!&apos; //断言表达式应该为True,　否则False执行后续代码</span><br><span class="line">    return 10/n</span><br><span class="line">def main():</span><br><span class="line">    foo(&apos;0&apos;) //抛出异常</span><br></pre></td></tr></table></figure></li><li><p>启动python解释器关闭assert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -0 hello.py</span><br></pre></td></tr></table></figure></li><li><p>logging, 不会抛出错误, 且可以输出到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO) //指定输出级别debug/info/warning/error</span><br><span class="line"></span><br><span class="line">s=&apos;0&apos;</span><br><span class="line">n=int(s)</span><br><span class="line">logging.info(&apos;n=%d&apos; % n) //</span><br><span class="line">print(10/n)</span><br></pre></td></tr></table></figure></li><li><p>pdb调试器, 让程序单步执行, 随时查看运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pdb hello.py //n下一步 l查看　p 变量名　q结束调试</span><br></pre></td></tr></table></figure></li><li><p>pdb.set_trace()设置断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">s=&apos;0&apos;</span><br><span class="line">n=int(s)</span><br><span class="line">pdb.set_trace() //运行到此处自动暂停　c继续运行</span><br><span class="line">print(10/n)</span><br></pre></td></tr></table></figure></li><li><p>IDE调试</p></li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>测试类需要继承unittest.TestCase</li><li>以test开头的方法为测试方法, 其他方法不会被执行</li><li>assertEqual()</li><li>assertRaises()</li><li>setUp()/tearDown()方法分别在调佣每一个测试方法前后分别被执行, 解决重复代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">`#`mydict.py模块编写如下代码</span><br><span class="line">class Dict(dict): </span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super().__init__(**kw)</span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(&apos;Dict object has no attribute &#123;0&#125;&apos;.format(key))</span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key]=value</span><br><span class="line"></span><br><span class="line">`#`测试mydict_test.py模块编写如下代码</span><br><span class="line">import unittest</span><br><span class="line">from mydict import Dict //引入需要测试的自定义模块</span><br><span class="line"></span><br><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line">    def test_init(self):</span><br><span class="line">　　　　　　　　d=Dict(a=1, b=&apos;test&apos;)</span><br><span class="line">        self.assertEqual(d.a, 1)</span><br><span class="line">        self.assertEqual(d.b, &apos;test&apos;)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line">    def test_key(key):</span><br><span class="line">        d=Dict()</span><br><span class="line">        d[&apos;key&apos;]=&apos;value&apos;</span><br><span class="line">        self.assertEqual(d.key, &apos;value&apos;)</span><br><span class="line">　　　　def test_keyerror(self):</span><br><span class="line">        d=Dict()</span><br><span class="line">        with self.assertRaises(KeyError)</span><br><span class="line">            value=d[&apos;empty&apos;]</span><br><span class="line"></span><br><span class="line">python3 mydict_test.py 或　python3 -m unittest mydict_test (推荐, 可以一次批量运行多个单元测试)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-07-面向对象高级编程</title>
    <link href="http://github.com/2018/09/13/python-07-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    <id>http://github.com/2018/09/13/python-07-面向对象高级编程/</id>
    <published>2018-09-13T07:33:41.000Z</published>
    <updated>2019-09-22T09:24:06.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="solts"><a href="#solts" class="headerlink" title="__solts"></a>__solts</h3><ul><li><p>先定义class, 后绑定属性和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">from types import MethodType</span><br><span class="line">def set_age(self, age): # 定义一个函数作为实例方法</span><br><span class="line">    self.age=age</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.name = &apos;tiny&apos;</span><br><span class="line">s.age = 25 //25</span><br><span class="line">s.set_age = MethodType(set_age, s) //绑定方法到实例s, 该方法只作用该实例</span><br><span class="line">s.set_age(26)</span><br><span class="line">s.age //26</span><br><span class="line"></span><br><span class="line">def set_score(self, score):</span><br><span class="line">    self.score=score</span><br><span class="line"></span><br><span class="line">Student.set_score=set_score //一般类方法直接定义在class中, 动态绑定允许在运行过程中动态给class加上方法, 使得该方法作用所有实例</span><br><span class="line">s1.set_score(100)</span><br><span class="line">s1.score //100</span><br><span class="line">s2.set_score(99)</span><br><span class="line">s2.score //99</span><br></pre></td></tr></table></figure></li><li><p>定义class时使用<code>__slots__</code>变量, 限制class实例属性的添加. 但不限制该class的子类实例属性的添加!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    __slots__ =(&apos;name&apos;, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.name = &apos;tiny&apos;</span><br><span class="line">s.age = 25</span><br><span class="line">s.score = 100 //AttributeError 报错</span><br></pre></td></tr></table></figure></li></ul><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>@property装饰器负责把一个方法变成属性调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self.score</span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, val):</span><br><span class="line">        if not isinstance(val, int):</span><br><span class="line">            raise ValueError(&apos;score must be an integer!!&apos;)</span><br><span class="line">        if value&lt;0 or value&gt;100:</span><br><span class="line">            raise ValueError(&apos;score must between 0-100&apos;)</span><br><span class="line">        self.score=val</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.score = 99 //实际转化为 s.set_score(99)</span><br><span class="line">s.score 　　　　　//实际转化为 s.get_score()</span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><ul><li>MixIn的目的是给一个类增加多个功能, 通过多重继承组合多个MixIn功能, 而不是设计多层次复杂的继承关系.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Mammal, RunnableMixIn, CarnivaorousMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li></ul><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><ul><li><p><code>__str__()</code>定制print(Student())的信息</p></li><li><p><code>__repr__()</code>定制s的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name=name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        print(&apos;student object (name:&#123;1&#125;))&apos;.format(self.name))</span><br><span class="line">    __repr__=__str__</span><br><span class="line"></span><br><span class="line">s = Student(&apos;tiny&apos;) //实际调用__str__()</span><br><span class="line">s //实际调用__repr__()</span><br></pre></td></tr></table></figure></li><li><p>一个类实现<code>__iter__()</code>方法返回一个迭代对象, 调用迭代对象<code>__next__()</code>方法拿到循环的下一个值, 知道StopIteration错误推出循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class　Fib(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a,self.b=0,1</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.a,self.b=self.b,self.a+self.b</span><br><span class="line">        if self.a&gt;1000:</span><br><span class="line">            raise StopIteration()</span><br><span class="line">        return self.a</span><br><span class="line"></span><br><span class="line">for n in Fib():</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure></li><li><p><code>__getitem__()</code>方法使得对象可以像list一样按下标或切片slice去元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">      if isinstance(n, int):</span><br><span class="line">        a,b=1,1</span><br><span class="line">        for x in range(n):</span><br><span class="line">            a,b=b,a+b</span><br><span class="line">        return a</span><br><span class="line">      if isinstance(n, slice):</span><br><span class="line">        start = n.start</span><br><span class="line">        stop = n.stop</span><br><span class="line">        if start is None:</span><br><span class="line">           start=0</span><br><span class="line">        a,b=1,1</span><br><span class="line">        L=[]</span><br><span class="line">        for x in range(stop):</span><br><span class="line">            if x&gt;=start:</span><br><span class="line">                L.append(a)</span><br><span class="line">            a,b=b,a+b</span><br><span class="line">        return L</span><br><span class="line"></span><br><span class="line">f=Fib()</span><br><span class="line">f[0:5] //[1,1,2,3,5], 注意程序没有对f[2:5]做处理!!!</span><br></pre></td></tr></table></figure></li><li><p><code>__getitem__()</code> <code>__setitem__()</code> <code>__delitem__()</code>方法使得自定义类表现得和list,tuple,dict很像, 归功于动态语言的’鸭子类型’, 不需要强制继承某个接口</p></li><li><p><code>__getattr__()</code>动态返回一个属性, 当调用一个实例的属性时, 在没有该属性时, 才调用<code>__getattr__()</code>方法, 默认返回None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&apos;age&apos;:</span><br><span class="line">           return lambda:25</span><br><span class="line">        raise AttributeError(&apos;student object has no attribute &#123;1&#125;&apos;.format(attr))</span><br><span class="line"></span><br><span class="line">s.age //25</span><br><span class="line">s.score //AttributeError错误</span><br><span class="line"></span><br><span class="line">class Chain(object):</span><br><span class="line">    def __init__(self, path=&apos;&apos;):</span><br><span class="line">        self._path=path</span><br><span class="line">    def __getattr__(self, path):</span><br><span class="line">        return Chain(&apos;&#123;1&#125;/&#123;2&#125;&apos;.format(self._path, path))</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self._path</span><br><span class="line">    __repr__=__str__</span><br><span class="line"></span><br><span class="line">Chain().status.user.timeline.list //链式调用:&apos;/status/user/timeline/list&apos;</span><br></pre></td></tr></table></figure></li><li><p><code>__call__()</code>方法使得对象可以看成函数, 接调用实例本身的方法. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name=name</span><br><span class="line">    def __call__(self):</span><br><span class="line">        pritn(&apos;hello, &#123;1&#125;&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">s = Student(&apos;tiny&apos;)</span><br><span class="line">s() //&apos;hello, tiny&apos; 对实例直接进行调用就像一个函数的调用一样, 判断一个变量是对象还是函数, 看能被调用对象是否为Callable对象, 比如自定义类带有__call__()方法</span><br><span class="line">callable(Student()) //True</span><br><span class="line">callable(max)       //True</span><br><span class="line">callable([1,2,3])   //False</span><br></pre></td></tr></table></figure></li></ul><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li><p>value属性自动赋值int常量, 默认从1开始计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">Month=Enum(&apos;Month&apos;,(&apos;Jan&apos;,&apos;Feb&apos;,&apos;Mar&apos;))</span><br><span class="line"></span><br><span class="line">for name,member in Month.__members__.items():</span><br><span class="line">    print(&apos;&#123;0&#125;=&gt;&#123;1&#125;,&#123;2&#125;&apos;.format(name, member, member.value))</span><br></pre></td></tr></table></figure></li><li><p><code>@unique</code>装饰器保证没有重复值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum,unique</span><br><span class="line"></span><br><span class="line">@unique</span><br><span class="line">class Weekday(Enum):</span><br><span class="line">    Sun=0</span><br><span class="line">    Mon=1</span><br><span class="line">    Tue=2</span><br><span class="line">    Wed=3</span><br><span class="line">    Thu=4</span><br><span class="line">    Fri=5</span><br><span class="line">    Sat=6</span><br><span class="line"></span><br><span class="line">d = Weekday.Mon    //Weekday.Mon</span><br><span class="line">d2= Weekday[&apos;Tue&apos;] //Weekday.Tue</span><br><span class="line">d3= Weekday.Tue.value //2</span><br><span class="line">d4= Weekday(3)     //Weekday.Wed</span><br></pre></td></tr></table></figure></li></ul><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><ul><li>type()函数可以查看类型或变量的类型</li><li>type()函数可以运行期动态创建class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def fn(self, name=&apos;tiny&apos;):</span><br><span class="line">    print(&apos;i am &#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line">Hello = type(&apos;Hello&apos;, (object,), dict(say=fn)) //创建Hello类, 绑定say方法(fn)</span><br><span class="line">h=Hello()</span><br><span class="line">h.say() //hello, tiny</span><br><span class="line">print(type(Hello)) //&lt;class &apos;type&apos;&gt;</span><br><span class="line">print(type(h))     //&lt;class &apos;__main__.Hello&apos;&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><ul><li><p>元类, 动态创建类, 控制类的创建行为</p></li><li><p>先定义metaclass, 接下来创建类, 最后创建实例</p></li><li><p><code>__new__()</code>方法依次接收参数: 当前准备创建类的对象/类名/父类集合/类方法集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">`#` metaclass是类的模板, 必须从`type`类型派生</span><br><span class="line">class ListMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        attrs[&apos;add&apos;]=lambda self,value: self.append(value) //添加新方法</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br><span class="line">`#` 指定定制类</span><br><span class="line">class MyList(list, metaclass=ListMetaclass):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">`#` 创建MyList时, 要通过ListMetaclass.__new__()创建, 因此可以修改类的定义, 添加新方法</span><br><span class="line">L = MyList()</span><br><span class="line">L.add(1) //普通List没有add方法</span><br><span class="line">L //[1]</span><br></pre></td></tr></table></figure></li><li><p>一个简单的ORM框架实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/local/bin/python3</span><br><span class="line">class Field(object):</span><br><span class="line">    def __init__(self,name,col_type):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.col_type=col_type</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&#123;0&#125;:&#123;1&#125;&apos;.format(self.__class__.__name__,self.name)</span><br><span class="line"></span><br><span class="line">class StringField(Field):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(StringField, self).__init__(name,&apos;varchar(100)&apos;)</span><br><span class="line"></span><br><span class="line">class IntegerField(Field):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(IntegerField, self).__init__(name, &apos;bigint&apos;)</span><br><span class="line"></span><br><span class="line">class ModelMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        if name==&apos;Model&apos;:</span><br><span class="line">            return type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(&apos;found model: &#123;0&#125;&apos;.format(name))</span><br><span class="line">        mappings=dict()</span><br><span class="line">        for k,v in attrs.items():</span><br><span class="line">            if isinstance(v, Field):</span><br><span class="line">                print(&apos;found mapping: &#123;0&#125;:&#123;1&#125;&apos;.format(k,v))</span><br><span class="line">                mappings[k]=v</span><br><span class="line">        for k in mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[&apos;__mappings__&apos;]=mappings</span><br><span class="line">        attrs[&apos;__table__&apos;]=name</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">class Model(dict, metaclass=ModelMetaclass):</span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(&apos;model object has no attribute &#123;0&#125;&apos;.format(key))</span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key]=value</span><br><span class="line">    def save(self):</span><br><span class="line">        fields=[]</span><br><span class="line">        params=[]</span><br><span class="line">        args=[]</span><br><span class="line">        for k,v in self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(&apos;?&apos;)</span><br><span class="line">            args.append(getattr(self, k, None))</span><br><span class="line">        sql=&apos;insert into %s (%s) values (%s)&apos; % (self.__table__,&apos;,&apos;.join(fields), &apos;,&apos;.join(params))</span><br><span class="line">        print(&apos;SQL: &#123;0&#125;&apos;.format(sql))</span><br><span class="line">        print(&apos;ARGS: &#123;0&#125;&apos;.format(str(args)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User(Model):</span><br><span class="line">    id=IntegerField(&apos;id&apos;)</span><br><span class="line">    name=StringField(&apos;username&apos;)</span><br><span class="line">    email=StringField(&apos;email&apos;)</span><br><span class="line">    password=StringField(&apos;password&apos;)</span><br><span class="line"></span><br><span class="line">u = User(id=123, name=&apos;tiny&apos;, email=&apos;t.tt@t.tt&apos;, password=&apos;pass&apos;)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;solts&quot;&gt;&lt;a href=&quot;#solts&quot; class=&quot;headerlink&quot; title=&quot;__solts&quot;&gt;&lt;/a&gt;__solts&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先定义class, 后绑定属性和方法&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-06-面向对象编程</title>
    <link href="http://github.com/2018/09/12/python-06-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://github.com/2018/09/12/python-06-面向对象编程/</id>
    <published>2018-09-12T12:13:41.000Z</published>
    <updated>2019-09-22T09:23:39.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类＆实例"><a href="#类＆实例" class="headerlink" title="类＆实例"></a>类＆实例</h3><ul><li><p>定义一个类, 创建实例的模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li><li><p>创建实例, 各个实例拥有的数据独立, 互不影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tiny = Student()</span><br></pre></td></tr></table></figure></li><li><p>自由绑定任何数据, ‘应该’在初始化时强制绑定必须的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tiny.name=&apos;tinytinycn&apos;</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.score=score</span><br></pre></td></tr></table></figure></li><li><p><code>__init__</code>方法第一个参数永远是self, 代表实例本身, 上述例子传入参数，则实例化时必须传入参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tiny = Student(&apos;tinytinycn&apos;,99)</span><br></pre></td></tr></table></figure></li><li><p>数据封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name,score):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.score=score</span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(self.name,self.score)</span><br></pre></td></tr></table></figure></li><li><p>方法, 与实例绑定的函数, 可以直接访问实例的数据. 与普通函数不同的是必须接收一个self参数．</p></li></ul><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><ul><li><p><code>__</code>开头变量名, 私有变量, 只有内部可以访问, 外部不能访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Studen(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__score=score</span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(self.__name,self.__score)</span><br><span class="line"></span><br><span class="line">tiny = Student(&apos;tinytinycn&apos;, 99)</span><br><span class="line">tiny.__name //不能访问</span><br></pre></td></tr></table></figure></li><li><p><code>__xxx__</code>特殊变量, 可以外部直接访问, 不是private变量</p></li></ul><h3 id="继承＆多态"><a href="#继承＆多态" class="headerlink" title="继承＆多态"></a>继承＆多态</h3><ul><li>继承, 把父类的所有功能都直接拿过来，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写</li><li>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</li><li>多态, 动态语言不需要严格的继承体系, 一个对象看起来像鸭子, 走路起来想鸭子就会被当作鸭子.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;animal is running..&apos;)</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;dog is running..&apos;)</span><br><span class="line"></span><br><span class="line">class Duck(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;duck is running..&apos;)</span><br><span class="line"></span><br><span class="line">def run_twice(animal):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line">run_twice(Animal())</span><br><span class="line">run_twice(Dog()) //保证传入的实例有run()方法即可</span><br><span class="line">run_twice(Duck())</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><ul><li><p>type(x)函数, 判断对象类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type(123)==type(456)</span><br><span class="line">type(123)==int</span><br><span class="line">type(&apos;abc&apos;)==type(&apos;edf&apos;)</span><br><span class="line">type(&apos;abc&apos;)==str</span><br><span class="line"></span><br><span class="line">import types</span><br><span class="line">def fn():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">type(fn)==types.FunctionType</span><br><span class="line">type(abs)==types.BuiltinFunctionType</span><br><span class="line">type(lambda x:x)==types.LambdaType</span><br><span class="line">type((x for x in range(5)))==types.GeneratorType</span><br></pre></td></tr></table></figure></li><li><p>isinstance(x,y)函数, 判断class类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//继承关系: object -&gt; Animal　-&gt; Dog -&gt; Husky</span><br><span class="line">a = Animal()</span><br><span class="line">d = Dog()</span><br><span class="line">h = Husky()</span><br><span class="line">isinstance(h, Husky)  //True</span><br><span class="line">isinstance(h, Dog)    //True</span><br><span class="line">isinstance(h, Animal) //True</span><br><span class="line">isinstance(h, object) //True</span><br><span class="line"></span><br><span class="line">isinstance(123, int)</span><br><span class="line">isinstance(&apos;abc&apos;, str)</span><br><span class="line">isinstance(b&apos;abc&apos;, bytes)</span><br></pre></td></tr></table></figure></li><li><p>判断变量是某些类型中的一种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isinstance([1,2,3], (list, tuple))//True</span><br><span class="line">isinstance((1,2,3), (list, tuple))//True</span><br></pre></td></tr></table></figure></li><li><p>dir()函数, 获取对象的所有属性和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(123)</span><br></pre></td></tr></table></figure></li><li><p>getattr()/setattr()/hasattr()操作对象的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class MyObject(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.x=666</span><br><span class="line">    def power(self):</span><br><span class="line">        return self.x*self.x</span><br><span class="line"></span><br><span class="line">obj = MyObject()</span><br><span class="line">hasattr(obj, &apos;x&apos;)//是否有属性x</span><br><span class="line">setattr(obj, &apos;x&apos;, 777)//设置属性x=777</span><br><span class="line">getattr(obj, &apos;x&apos;)//获取属性x</span><br><span class="line">getattr(obj, &apos;z&apos;, 999)//获取属性z, 若不存在则返回默认999</span><br><span class="line">fn = getattr(obj, &apos;power&apos;)//获取方法power, 赋值给变量fn, fn()即可调用obj.power()方法</span><br></pre></td></tr></table></figure></li></ul><h3 id="实例属性-amp-类属性"><a href="#实例属性-amp-类属性" class="headerlink" title="实例属性 &amp; 类属性"></a>实例属性 &amp; 类属性</h3><ul><li><p>类创建的实例可以绑定任意属性, 实例属性通过实例变量或self变量绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">s = Student(&apos;tiny&apos;)</span><br><span class="line">s.name = &apos;tinytinycn&apos;</span><br><span class="line">s.score = 99 //任意绑定</span><br></pre></td></tr></table></figure></li><li><p>类属性直接在class中定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    name = &apos;student&apos;</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">print(s.name) //实例没有name属性, 搜索class的name属性</span><br><span class="line">print(Student.name) //直接访问class的name属性</span><br><span class="line">s.name = &apos;tiny&apos; //绑定实例name属性, class属性&apos;被屏蔽&apos;</span><br><span class="line">print(s.name) //实例name属性</span><br><span class="line">print(Student.name) //直接class的name属性</span><br><span class="line">del s.name //删除实例name属性</span><br><span class="line">print(s.name) //实例没有name属性, 搜索class的name属性</span><br></pre></td></tr></table></figure></li><li><p>实例属性属于各个实例, 互不干扰</p></li><li><p>类属性属于类所有, 所有实例共享一个属性</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类＆实例&quot;&gt;&lt;a href=&quot;#类＆实例&quot; class=&quot;headerlink&quot; title=&quot;类＆实例&quot;&gt;&lt;/a&gt;类＆实例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义一个类, 创建实例的模板&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-05-模块</title>
    <link href="http://github.com/2018/09/12/python-05-%E6%A8%A1%E5%9D%97/"/>
    <id>http://github.com/2018/09/12/python-05-模块/</id>
    <published>2018-09-12T09:25:41.000Z</published>
    <updated>2019-09-22T09:23:12.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li><p>引入包后, 只要顶层包不冲突, 则所有模块不冲突</p></li><li><p>每一个包目录下都会有一个<code>__init__.py</code>的文件, 必须存在. 否则当成普通目录．</p></li><li><p>使用模块 hello.py</p></li><li><p>命令行python3 hello.py运行hello.py模块时, python解释器吧一个特殊变量<strong>name</strong>赋值<strong>main</strong>,因此会执行test()方法.而命令行导入import hello导入hello.py模块时, 则不会执行test()方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/local/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">def test():</span><br><span class="line">    args=sys.argv</span><br><span class="line">    if len(args)==1:</span><br><span class="line">        print(&apos;hello&apos;)</span><br><span class="line">    elif　len(args)==2:</span><br><span class="line">        print(&apos;hello, &#123;1&#125;&apos;.format(args[1]))</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;hello, too many arg!&apos;)</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure></li><li><p>作用域<br>一个模块中, 定义许多变量, <code>__xxx__</code>特殊变量可以被直接引用，但是有特殊用途, <code>_xxx</code>或<code>__xxx</code>private变量, ‘不应该’直接被引用</p></li><li><p>安装第三方模块</p></li></ul><p>1.pip install xxx<br>2.anaconda安装常用模块, 并将python路径指向自带python, anaconda安装的第三方模块会安装在anaconda目录下管理, 不影响已安装python目录<br>3.模块搜索路径, 加载一个模块时python会在指定路径下搜索对应.py文件, 搜索路径存放在sys.path<br>4.添加自己的搜索目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&apos;/home/tinytinycn/xxx_modules&apos;) //程序运行结束则失效</span><br></pre></td></tr></table></figure><p>设置环境变量PYTHONPATH, 该环境变量内容将被自动添加到模块搜索路径中!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入包后, 只要顶层包不冲突, 则所有模块不冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个包目录下都会有一个&lt;code&gt;_
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-04-函数式编程</title>
    <link href="http://github.com/2018/09/12/python-04-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://github.com/2018/09/12/python-04-函数式编程/</id>
    <published>2018-09-12T08:53:41.000Z</published>
    <updated>2019-09-22T09:22:49.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li><p>变量可以指向函数, f=abs</p></li><li><p>函数名也是变量</p></li><li><p>传入函数, 一个函数可以接收另一个函数作为参数, 这种函数称为高阶函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def test(x,y,f):</span><br><span class="line">    return f(x)+f(y)</span><br></pre></td></tr></table></figure></li><li><p>map/reduce</p></li></ul><p>1.map(f,Iterable)函数, 作为高阶函数, 将运算规则高度抽象了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return x*x</span><br><span class="line"></span><br><span class="line">r=map(f,[1,2,3]) </span><br><span class="line">list(r) //[1,4,9]</span><br></pre></td></tr></table></figure><p>2.reduce(f,Iterable)函数, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def fn(x,y):</span><br><span class="line">    return x*10+y</span><br><span class="line"></span><br><span class="line">reduce(fn,[1,3,5,7]) //1357</span><br></pre></td></tr></table></figure><ul><li><p>filter()函数,　用于过滤序列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return n%2==1</span><br><span class="line"></span><br><span class="line">list(filter(f, [1,2,3,4,5])) //[1,3,5]</span><br></pre></td></tr></table></figure></li><li><p>sorted()函数, 用于排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sorted([1,5,-4,-3]) //[-4,-3,1,5]</span><br><span class="line">sorted([1,5,-4,-3],key=abs) //[1,-3,-4,5]</span><br><span class="line">sorted([&apos;a&apos;,&apos;D&apos;,&apos;b&apos;,&apos;C&apos;]) //由于&apos;Z&apos;&lt;&apos;a&apos;, [&apos;C&apos;,&apos;D&apos;,&apos;a&apos;,&apos;b&apos;]</span><br><span class="line">sorted([&apos;a&apos;,&apos;D&apos;,&apos;b&apos;,&apos;C&apos;], key=str.lower) //[&apos;a&apos;,&apos;b&apos;,&apos;C&apos;,&apos;D&apos;] </span><br><span class="line">sorted([&apos;a&apos;,&apos;D&apos;,&apos;b&apos;,&apos;C&apos;], key=str.lower, reverse=True) //[&apos;D&apos;,&apos;C&apos;,&apos;b&apos;,&apos;a&apos;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><ul><li>函数作为返回值</li></ul><p>1.内部函数sum可以引用外部函数lazy_sum的参数和局部变量<br>2.返回内部函数sum时, 相关参数和变量都保存在返回的sum函数中(称为’闭包’closure)<br>3.每次调用lazy_sum函数时, 返回新的函数<br>4.返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def lazy_sum(*args):</span><br><span class="line">    def sum():</span><br><span class="line">        ax=0</span><br><span class="line">        for n in args:</span><br><span class="line">            ax=ax+n</span><br><span class="line">        return ax</span><br><span class="line">    return sum</span><br><span class="line"></span><br><span class="line">f=lazy_sum(1,3,4,5) //f 返回一个函数, 而不是函数计算结果</span><br><span class="line">f() //13 返回函数计算结果</span><br><span class="line"></span><br><span class="line">f2=lazy_sum(1,3,4,5)</span><br><span class="line">f1==f2 //False 新的函数, 但不影响函数计算结果</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul><li>无需显式定义函数, 但只能有一个表达式</li><li>匿名函数可指定给变量</li><li>匿名函数可作为返回值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lambda x:x*x+1</span><br><span class="line"></span><br><span class="line">def f(x):</span><br><span class="line">    return x*x+1</span><br><span class="line"></span><br><span class="line">fn=lambda x:x*x+1</span><br><span class="line">fn(2)</span><br><span class="line"></span><br><span class="line">def test(x,y):</span><br><span class="line">    return lambda: x*x+y*y</span><br></pre></td></tr></table></figure></li></ul><h3 id="包装器"><a href="#包装器" class="headerlink" title="包装器"></a>包装器</h3><ul><li>函数是一个对象, 函数对象有一个<code>__name__</code>属性</li><li>装饰器, 在代码运行期间动态增加功能的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/local/bin/python3</span><br><span class="line">import functools</span><br><span class="line">def logger(*test):</span><br><span class="line">    def decotator(func):</span><br><span class="line">        @functools.wraps(func)</span><br><span class="line">        def wrapper(*args,**kw):</span><br><span class="line">            print(&apos;begin call&apos;)</span><br><span class="line">            out=func(*args,**kw)</span><br><span class="line">            print(&apos;after call&apos;)</span><br><span class="line">            return out</span><br><span class="line">        return wrapper</span><br><span class="line">    return decotator</span><br><span class="line"></span><br><span class="line">@logger(&apos;execute&apos;)</span><br><span class="line">def now_test(time):</span><br><span class="line">    print(time)</span><br><span class="line"></span><br><span class="line">@logger()</span><br><span class="line">def now_test2():</span><br><span class="line">    print(&apos;haha&apos;)</span><br><span class="line"></span><br><span class="line">now_test(&apos;2018-09-12&apos;) //logger(&apos;execute&apos;)(now_test)</span><br><span class="line">now_test2() //logger(now_test2)</span><br></pre></td></tr></table></figure></li></ul><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><ul><li>偏函数, 降低函数调用的难度</li><li>作用是把一个函数的某些参数固定, 返回一个新函数, 使得调用更简单<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line"></span><br><span class="line">def int2(x, base=2):</span><br><span class="line">    return int(x, base)</span><br><span class="line">int2(&apos;1010101&apos;) //85</span><br><span class="line"></span><br><span class="line">int2=functools.partial(int, base=2)</span><br><span class="line">int2(&apos;1000000) //64, 实际上kw=&#123;&apos;base&apos;:2&#125;;int(&apos;1000000&apos;, **kw)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;变量可以指向函数, f=abs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数名也是变量&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-03-高级特性</title>
    <link href="http://github.com/2018/09/12/python-03-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://github.com/2018/09/12/python-03-高级特性/</id>
    <published>2018-09-12T08:40:41.000Z</published>
    <updated>2019-09-22T09:22:25.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>截取list或tuple的部分元素</li><li>截取字符串元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">L=[1,2,3,4,5]</span><br><span class="line">L[0:3] //[1,2,3], 前闭后开</span><br><span class="line">L[:3]  //[1,2,3]</span><br><span class="line">L[1:3] //[2,3]</span><br><span class="line">L[-1]  //[5]</span><br><span class="line">L[:5:2]//[1,3]</span><br><span class="line">L[:]   //[1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">(0,1,2,3,4,5)[:3] //(0,1,2)</span><br><span class="line"></span><br><span class="line">&apos;abcdef&apos;[:3]　//&apos;abc&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li>循环遍历list或tuple</li><li>for 循环时, 作用对象为可迭代对象Iterable </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">L=[1,3,5,7]</span><br><span class="line">L2=[(1,1),(2,2),(3,3)]</span><br><span class="line">D=&#123;&apos;a&apos;:&apos;1&apos;,&apos;b&apos;:2,&apos;c&apos;:3&#125;</span><br><span class="line"></span><br><span class="line">for x in L:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">for i,val in enumerate(L):</span><br><span class="line">    print(i,val)</span><br><span class="line"></span><br><span class="line">for x,y in L2:</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">for key in D:</span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">for val in D.values():</span><br><span class="line">    print(val)</span><br><span class="line"></span><br><span class="line">for k,v in D.items():</span><br><span class="line">    print(k,v)</span><br><span class="line"></span><br><span class="line">isinstance([1,2,3], Iterable) //True</span><br><span class="line">isinstance(&#123;&apos;k&apos;:&apos;v&apos;&#125;, Iterable) //True</span><br><span class="line">isinstance(&apos;abc&apos;, Iterable) //True</span><br><span class="line">isinstance(123, Iterable) //False</span><br></pre></td></tr></table></figure><h3 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list(range(1,6)) //[1,2,3,4,5] 前闭后开</span><br><span class="line"></span><br><span class="line">[x*x for x in range(1,6)] //[1,4,9,16,25]</span><br><span class="line">[x*x for x in range(1,6) if x%2==0] //[4,16]</span><br><span class="line">[x+y for x in &apos;abc&apos; for y in &apos;123&apos;] //[&apos;a1&apos;, a2&apos;,&apos;a3&apos;,&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos;,&apos;c1&apos;,&apos;c2&apos;,&apos;c3&apos;]</span><br><span class="line"></span><br><span class="line">D=&#123;&apos;a&apos;:&apos;A&apos;,&apos;b&apos;:&apos;B&apos;&#125;</span><br><span class="line">[k+&apos;=&apos;+v for k,v in D.items()] //[&apos;a=A&apos;,&apos;b=B&apos;]</span><br><span class="line">L=[&apos;Hello&apos;, &apos;World&apos;]</span><br><span class="line">[str.lower() for str in L] //[&apos;hello&apos;,&apos;world&apos;]</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li>生成器, 一边循环一边计算的机制, 节省内存空间</li><li>函数中包含yield关键字, 该函数不是普通函数而是generator生成器. 每次调用next()遇到yield返回, 再次next()调用继续执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">L=[x*x for x in range(6)] //[0,1,4,9,16,25]</span><br><span class="line">G=(x*x for x in range(6)) </span><br><span class="line">G //&lt;generator object &lt;genexpr&gt; at 0x7fa8c00dd7c8&gt;</span><br><span class="line">next(G) //0</span><br><span class="line">next(G) //1</span><br><span class="line">next(G) //4</span><br><span class="line">next(G) //9</span><br><span class="line">next(G) //16</span><br><span class="line">next(G) //25</span><br><span class="line">next(G) //StopIteration异常</span><br><span class="line"></span><br><span class="line">def fib(max):</span><br><span class="line">    n,a,b=0,0,1</span><br><span class="line">    while n&lt;max:</span><br><span class="line">        yield b</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        n=n+1</span><br><span class="line">    return &apos;done&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>凡是可作用于for循环的对象都是Iterable类型；</li><li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；</li><li>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</li><li>Python的for循环本质上就是通过不断调用next()函数实现的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = iter([1,2,3])</span><br><span class="line">while　True:</span><br><span class="line">    try:</span><br><span class="line">        x=next(it)</span><br><span class="line">    exception StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;截取list或tuple的部分元素&lt;/li&gt;
&lt;li&gt;截取字符串元素&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-02-函数</title>
    <link href="http://github.com/2018/09/11/python-02-%E5%87%BD%E6%95%B0/"/>
    <id>http://github.com/2018/09/11/python-02-函数/</id>
    <published>2018-09-11T12:53:41.000Z</published>
    <updated>2019-09-22T09:17:32.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>借助抽象, 不用关心底层具体计算过程, 直接思考高层次问题．函数是最基本的一种代码抽象方式．</p><ul><li><p>调用函数<br>函数名, 指向一个函数对象的引用, 完全可以把函数名赋给一个变量, 相当于给函数起别名．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa=abs</span><br><span class="line">aaa(-666) //666, 调用abs()函数</span><br></pre></td></tr></table></figure></li><li><p>定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def my_fun(x):</span><br><span class="line">    if x &gt;=0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure></li><li><p>空函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;# pass实际可以用来作为占位符</span><br><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li><li><p>返回多个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def move(x,y,step):</span><br><span class="line">    nx=x+step</span><br><span class="line">    ny=y+step</span><br><span class="line">    return nx,ny</span><br><span class="line"></span><br><span class="line">x,y=move(5,5,1)</span><br><span class="line">print(x,y) //6,6</span><br><span class="line"></span><br><span class="line">z=move(4,4,2)</span><br><span class="line">print(z) //(6,6),返回元组tuple</span><br></pre></td></tr></table></figure></li><li><p>位置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def test(x,y,z):</span><br><span class="line">    print(x,y,z)</span><br><span class="line"></span><br><span class="line">test(1,2,3)</span><br></pre></td></tr></table></figure></li><li><p>默认参数</p></li></ul><p>1.必选参数在前, 默认参数在后(思考: 为什么默认参数不能在必选参数之前?);<br>2.当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test(x,y=2):</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">test(1)</span><br><span class="line">test(1,2)</span><br><span class="line">test(1,3)</span><br></pre></td></tr></table></figure><ul><li>可变参数</li></ul><p>1.允许传入0个或多个参数, 可变参数在函数调用时自动组装为一个tuple</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test(*numbers):</span><br><span class="line">    for n in numbers:</span><br><span class="line">        print(n)</span><br><span class="line"></span><br><span class="line">test(1,2,3)</span><br><span class="line">test([1,2,3])</span><br><span class="line">test((1,2,3,4))</span><br><span class="line">test()</span><br><span class="line">test(*nums) //nums为一个list或tuple</span><br></pre></td></tr></table></figure><ul><li>关键字参数</li></ul><p>1.允许传入0个或多个参数名的参数, 关键字参数在函数内部自动组装为一个dict<br>2.kw获得外部dict的一份拷贝, kw的改动不影响函数外的外部dict</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test(x,y,**kw):</span><br><span class="line">    print(x,y,kw)</span><br><span class="line"></span><br><span class="line">test(1,2) //1 2 &#123;&#125;</span><br><span class="line">test(1,2,&apos;k1&apos;:&apos;v1&apos;) //1 2 &#123;&apos;k1&apos;:&apos;v1&apos;&#125;</span><br></pre></td></tr></table></figure><ul><li>命名关键字参数</li></ul><p>1.命名关键字参数必须传入参数名, 否则报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test(x,y,*,z):</span><br><span class="line">    print(x,y,z)</span><br><span class="line"></span><br><span class="line">test(1,2,z=3)</span><br><span class="line"></span><br><span class="line">def test(x,y,*,z=3,a):</span><br><span class="line">    print(x,y,z,a)</span><br><span class="line"></span><br><span class="line">test(1,2,a=4)</span><br></pre></td></tr></table></figure><ul><li>组合参数</li></ul><p>1.参数定义的顺序必须是: 必选参数,默认参数,可变参数,命名关键字参数,关键字参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,c=0,*args,**kw):</span><br><span class="line">    print(a,b,c,args,kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test(a,b,c=0,*,**kw):</span><br><span class="line">    print(a,b,c,kw)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;借助抽象, 不用关心底层具体计算过程, 直接思考高层次问题．函数是最基本的一种代码抽象方式．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用函数&lt;br
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-01-基础</title>
    <link href="http://github.com/2018/09/11/python-01-%E5%9F%BA%E7%A1%80/"/>
    <id>http://github.com/2018/09/11/python-01-基础/</id>
    <published>2018-09-11T11:26:41.000Z</published>
    <updated>2019-09-21T16:43:55.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><ul><li>number:数字类型不允许改变　var = 666 或者　var1=var2=666</li><li>若改变数字数据类型的值, 将重新分配内存空间. del var 或者　del var1, var2</li><li>数字类型: 整型Int/浮点型float/复数complex/布尔bool</li><li>数字类型转换:　int(x)/float(x)/complex(x)/complex(x,y)</li><li>数字运算: +-*/(除法得浮点数)//(除法取整数)</li><li>数学函数(略)</li></ul><h3 id="string-amp-unicode"><a href="#string-amp-unicode" class="headerlink" title="string &amp; unicode"></a>string &amp; unicode</h3><ul><li><p>str: 字符串类型不允许改变　str=’tiny’ 或者　str=”tiny”</p></li><li><p>不支持单字符类型, 单字符也是字符串</p></li><li><p>+拼接/*重复/[]索引字符/[:]截取/[not]in成员/r原始字符串/%格式字符串</p></li><li><p>ASCII编码 1个字节</p></li><li><p>Unicode编码 2个字节</p></li><li><p>UTF-8编码 英文1个字节,中文3个字节</p></li><li><p>内存中, 统一使用unicode编码, 存储或传输时建议统一使用utf-8;</p></li><li><p>以unicode编码的str, 通过encode()编码指定的bytes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;abc&apos;.encode(&apos;ascii&apos;)</span><br><span class="line">&apos;abc&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;ascii&apos;)报错, 中文编码范围超过了ascii编码范围</span><br></pre></td></tr></table></figure></li><li><p>len()函数计算str的”字符数”!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(b&apos;abc&apos;)  //3</span><br><span class="line">len(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;) //6</span><br><span class="line">len(&apos;中文&apos;) //2</span><br><span class="line">len(&apos;中文&apos;.encode(&apos;utf-8&apos;)) //6</span><br></pre></td></tr></table></figure></li></ul><h3 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h3><p>list, 有序列表集合, 可添加删除元素</p><ul><li>声明: alist=[‘tiny’, ‘jack’, ‘rose’, 100, True]</li><li>获取元素个数: len(alist)</li><li>索引(更新): alist[0] 或者 alist[-1] 或者alist[0]=’ttcn’</li><li>末尾追加: alist.append(‘marry’)</li><li>指定插入: alist.insert(1, ‘adam’)</li><li>末尾删除: alist.pop() 返回元素内容</li><li>指定删除: alist.pop(1) 返回元素内容</li><li>list 可包含不同数据类型 [True, 999, ‘str’]</li><li>list 可包含list [‘test’, [1,2,3], ‘python’]</li></ul><p>tuple, 有序列表元组, 不可修改!</p><ul><li>声明: atuple=(‘one’,) 或者 atuple=(‘one’, ‘two’, ‘three’)</li><li>tuple ‘指向不变’, 因此 atuple=(‘one’, [1,2]);atuple[1][0]=2; 是允许的</li></ul><h3 id="set-amp-dict"><a href="#set-amp-dict" class="headerlink" title="set &amp; dict"></a>set &amp; dict</h3><p>set, 无序不可重复集合, 可添加删除元素</p><ul><li>声明: aset=set(‘abc’) 或 aset=set([1,2,3]) 或　aset=set() 或 aset={1,2,3} (不能使用空{})</li><li>获取元素个数: len(aset)</li><li>添加元素: aset.add(x)</li><li>更新元素: aset.update(x) 或 aset.update({1,2,3}) 或　aset.update([1,2],[3,4])</li><li>删除元素: aset.remove(x), 没有该元素则发生错误</li><li>删除元素: aset.discard(x), 没有该元素则不会发生错误</li><li>随机删除元素: aset.pop()</li><li>清空集合: aset.clear()</li><li>判断元素存在: x in aset</li></ul><p>dict, 字典存储任意类型对象, 可添加删除元素</p><ul><li>声明: adict={k1:v1, k2:v2} 或　adict={}</li><li>获取元素个数: len(adict)</li><li>键必须唯一, 不可变, 如数字/字符串/元组</li><li>获取元素: adict[k1]</li><li>更新元素: adict[k1]=’new_value’</li><li>删除元素: del adict[k1]</li><li>随机删除元素: adict.popitem()</li><li>指定删除元素: adict.pop(k1[,default]), 没有该元素则返回default</li><li>清空字典: adict.clear()</li><li>删除字典: del adict</li><li>判断key存在: k1 in adict</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;number:数字类型不允许改变　var = 666 或者　var1=var2=666&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-fix-startup-slow</title>
    <link href="http://github.com/2018/03/09/emacs-fix-startup-slow/"/>
    <id>http://github.com/2018/03/09/emacs-fix-startup-slow/</id>
    <published>2018-03-09T02:45:08.000Z</published>
    <updated>2019-09-21T16:43:55.374Z</updated>
    
    <content type="html"><![CDATA[<p>问题: spacemacs 启动速度较慢, 可能长达几十秒. 正常速度应该在十多秒甚至几秒.</p><p>分析: 启动时, 需要loading 不同layer 的配置el文件.</p><p>解决: </p><ol><li>Messages buffer 中查看loading信息, 查看是否有异常信息;</li><li>命令行启动, 查看cpu和内存信息;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emacs --profiles 或 emacs.exe --profiles</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 命令行启动, 查看需要的时间信息;(最为直观);</span><br></pre></td></tr></table></figure></li></ol><p>emcas –timed-requires 或 emcas.exe –timed-requires</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 删除不必要的layer</span><br><span class="line">5. 在melpa检查包更新也很耗时;</span><br><span class="line">6. 检查spacemacs版本也是没那么必要, 除非你喜欢保持最新版.</span><br><span class="line"></span><br><span class="line">测试: </span><br><span class="line">- 测试机器surface pro 4 i5 windows10 gnu emacs 启动速度4~5s</span><br><span class="line"></span><br><span class="line">我的配置文件:</span><br></pre></td></tr></table></figure><p>dotspacemacs-configuration-layers<br>   ‘(<br>     html<br>     ;; —————————————————————-<br>     ;; Example of useful layers you may want to use right away.<br>     ;; Uncomment some layer names and press <spc f e r> (Vim style) or<br>     ;; <m-m f e r> (Emacs style) to install them.<br>     ;; —————————————————————-<br>     helm<br>     auto-completion<br>     better-defaults<br>     emacs-lisp<br>     ;; git<br>     markdown<br>     org<br>     syntax-checking<br>     ;; version-control<br>     )<br>   ;</m-m></spc></p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题: spacemacs 启动速度较慢, 可能长达几十秒. 正常速度应该在十多秒甚至几秒.&lt;/p&gt;
&lt;p&gt;分析: 启动时, 需要loading 不同layer 的配置el文件.&lt;/p&gt;
&lt;p&gt;解决: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Messages buffer 中查看loa
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-evil-vim-keymap</title>
    <link href="http://github.com/2018/03/06/emacs-evil-vim-keymap/"/>
    <id>http://github.com/2018/03/06/emacs-evil-vim-keymap/</id>
    <published>2018-03-06T14:25:20.000Z</published>
    <updated>2019-09-21T16:43:55.372Z</updated>
    
    <content type="html"><![CDATA[<p>以下type 键位, 均位于normal state.</p><h2 id="1-光标移动"><a href="#1-光标移动" class="headerlink" title="1 光标移动 "></a>1 光标移动 </h2><ol><li>光标移动 hjkl </li><li>移动到buffer开头 gg</li><li>移动到buffer结尾 G</li><li>移动到下n个word [number] w</li><li>移动到下n个word的结尾 [number] e</li><li>移动到下n个word的开头 [number] b</li></ol><h2 id="2-插入文本-增"><a href="#2-插入文本-增" class="headerlink" title="2 插入文本 (增)"></a>2 插入文本 (增)</h2><ol><li>光标前插入 i </li><li>光标后插入 a </li><li>光标上一行插入 O</li><li>光标下一行插入 o </li><li>光标行首插入 I</li><li>光标行尾插入 A </li></ol><h2 id="3-删除文本-删"><a href="#3-删除文本-删" class="headerlink" title="3 删除文本 (删)"></a>3 删除文本 (删)</h2><ol><li>光标下删除一个字符 x </li><li>光标往后删除一个单词 dw</li><li>光标往后删除一行 d$ 或 D </li><li>光标下一整行 dd</li><li>delete command格式:<br>[number] command object 或 command [number] object<br>2dw 或 d2w<br>2dd 或 d2d</li></ol><h2 id="4-修改文本-删改"><a href="#4-修改文本-删改" class="headerlink" title="4 修改文本 (删改)"></a>4 修改文本 (删改)</h2><p>注意的是: 修改时, normal state &gt;&gt; insert state </p><ol><li>光标下修改一个字符 r (自动esc退出insert state)</li><li>光标下连续修改 R (直到esc退出)</li><li>光标往后修改一个单词 cw (直到esc退出) </li><li>光标往后修改一个行 c$ (直到esc退出)</li><li>change command格式:<br>[number] command object 或 command [number] object </li></ol><h2 id="5-替换文本-换改"><a href="#5-替换文本-换改" class="headerlink" title="5 替换文本 (换改)"></a>5 替换文本 (换改)</h2><ol><li>当前行替换一次 :s/old/new</li><li>当前行替换n次  :s/old/new/g </li><li>某几行替换一次 :s#,#/old/new/g </li><li>全部替换      :%s/old/new/g </li><li>全部替换(每次改变有提示) :%s/old/new/gc </li></ol><h2 id="6-搜索文本-查"><a href="#6-搜索文本-查" class="headerlink" title="6 搜索文本 (查)"></a>6 搜索文本 (查)</h2><ol><li>正向搜索 / (n 下一个匹配项 N 上一个匹配项)</li><li>反向搜索 ? (n 下一个匹配项 N 上一个匹配项)</li><li>定位配对符号 % (定位(),[],{})</li></ol><h2 id="7-命令行"><a href="#7-命令行" class="headerlink" title="7 命令行"></a>7 命令行</h2><ol><li>外部命令行格式 :!command<br>:!ls or :!dir          列出目录<br>:!rm or :!del FILENAME 删除文件<br>:w FILENAME            当前buffer全部内容写出到文件FILENAME<br>:#,#w FILENAME         当前buffer某行内容写出到文件FILENAME<br>:r FILENAME            从文件FILENAME恢复内容到当前buffer</li></ol><h2 id="8-复制-粘贴"><a href="#8-复制-粘贴" class="headerlink" title="8 复制 粘贴"></a>8 复制 粘贴</h2><p>normal模式下:</p><ol><li>yw</li><li>yy</li><li>y$</li><li>y^</li><li>:reg 粘贴板</li><li>“ayw 复制到a粘贴板栈中, “ap 粘贴从a粘贴板栈中. </li></ol><p>按字符选择模式:</p><ol><li>v (visual state)</li><li>hjkl</li><li>y (yank)</li><li>hjkl</li><li>p (put)</li></ol><p>按行选择模式:</p><ol><li>V (visual state)</li><li>hjkl</li><li>y</li><li>hjkl</li><li>p</li></ol><p>按块选择模式:</p><ol><li>CTRL-v (visual state)</li><li>hjkl</li><li>y</li><li>hjkl</li><li>p</li></ol><h2 id="9-剪切-粘贴"><a href="#9-剪切-粘贴" class="headerlink" title="9 剪切 粘贴"></a>9 剪切 粘贴</h2><p>同上 复制粘贴</p><ol><li>v (visual state)</li><li>hjkl </li><li>d (delete)</li><li>hjkl</li><li>p (put)</li></ol><h2 id="10-退出-保存"><a href="#10-退出-保存" class="headerlink" title="10 退出 保存"></a>10 退出 保存</h2><ol><li>退出 :q</li><li>退出不保存 :q!</li><li>保存 :w</li><li>保存 另存为 :w filename.md </li><li>退出保存 :wq 或 :x 或 ZZ</li></ol><h2 id="11-切换模式"><a href="#11-切换模式" class="headerlink" title="11 切换模式"></a>11 切换模式</h2><ol><li>退回正常模式 ESC 或 CTRL-[</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下type 键位, 均位于normal state.&lt;/p&gt;
&lt;h2 id=&quot;1-光标移动&quot;&gt;&lt;a href=&quot;#1-光标移动&quot; class=&quot;headerlink&quot; title=&quot;1 光标移动 &quot;&gt;&lt;/a&gt;1 光标移动 &lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;光标移动 hjkl &lt;
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-evil-vim-tutor</title>
    <link href="http://github.com/2018/03/05/emacs-evil-vim-tutor/"/>
    <id>http://github.com/2018/03/05/emacs-evil-vim-tutor/</id>
    <published>2018-03-05T15:10:52.000Z</published>
    <updated>2019-09-21T16:43:55.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lesson-1"><a href="#lesson-1" class="headerlink" title="lesson 1"></a>lesson 1</h2><p>移动 插入 删除 保存  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 光标移动, hjkl</span><br><span class="line">2. 退出emacs, &lt;ESC&gt; :qa! &lt;ENTER&gt; 放弃修改退出</span><br><span class="line">3. 退出emacs, &lt;ESC&gt; :wqa &lt;ENTER&gt; 保存修改退出</span><br><span class="line">4. 删除一个字符, normal状态下 x </span><br><span class="line">5. 插入文本, normal状态下 i 插入文本 &lt;ESC&gt;</span><br></pre></td></tr></table></figure><h2 id="lesson-2"><a href="#lesson-2" class="headerlink" title="lesson 2"></a>lesson 2</h2><p>删除 撤销</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 删除往后的一个单词, dw</span><br><span class="line">2. 删除往后的一行, d$</span><br><span class="line">3. 删除整行, dd</span><br><span class="line">4. command格式: </span><br><span class="line">[number] command object</span><br><span class="line">command [number] object</span><br><span class="line">5. 往前撤销 u</span><br><span class="line">6. 往后撤销 C-R</span><br></pre></td></tr></table></figure><h2 id="lesson-3"><a href="#lesson-3" class="headerlink" title="lesson 3"></a>lesson 3</h2><p>放置 替换 修改(改变)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 放置已删除的文本, p (放置光标之后)</span><br><span class="line">2. 替换一个字符, r </span><br><span class="line">3. 改变command, cw (改变往后一个单词) c$ (改变往后一行) </span><br><span class="line">4. 改变command格式: </span><br><span class="line">[number] c object</span><br><span class="line">c [number] object</span><br></pre></td></tr></table></figure><h2 id="lesson-4"><a href="#lesson-4" class="headerlink" title="lesson 4"></a>lesson 4</h2><p>移动 搜索内容 替换内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 移动到buffer开头, gg</span><br><span class="line">2. 移动到buffer结尾, G</span><br><span class="line">3. 移动到某行, :[number]</span><br><span class="line">4. 正向搜索短语, / (n 下一个匹配项 N上一个匹配项)</span><br><span class="line">5. 反向搜索短语, ? (n 下一个匹配项 N上一个匹配项)</span><br><span class="line">6. 定位配对符号, % (包括(),[],&#123;&#125;)</span><br><span class="line">7. 替换 :s/old/new </span><br><span class="line">8. 替换 :s/old/new/g </span><br><span class="line">9. 替换某几行间 :#,#s/old/new/g (:96,106s/old/new/g)</span><br><span class="line">10. 替换全部 :%s/old/new/g</span><br><span class="line">11. To ask for confirmation each time add &apos;c&apos; </span><br><span class="line">:%s/old/new/gc</span><br></pre></td></tr></table></figure><h2 id="lesson-5"><a href="#lesson-5" class="headerlink" title="lesson 5"></a>lesson 5</h2><p>命令行 移动内容/恢复内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 外部命令行, :!command </span><br><span class="line">:!ls or :!dir 列出目录</span><br><span class="line">:!rm or :!del &lt;filename&gt; 删除文件 </span><br><span class="line">2. 当前buffer内容写出到文件 :w &lt;filename&gt;</span><br><span class="line">3. 当前某行间内容写出到文件  :#,#w &lt;filename&gt; </span><br><span class="line">4. 从文件恢复内容到当前buffer :r &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="lesson-6"><a href="#lesson-6" class="headerlink" title="lesson 6"></a>lesson 6</h2><p>插入 替换 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 光标下一行, 插入文本 o</span><br><span class="line">2. 光标上一行, 插入文本 O (大写o)</span><br><span class="line">3. 光标之后, 插入文本 a </span><br><span class="line">4. 行末尾, 插入文本 A </span><br><span class="line">5. 持续替换直到&lt;ESC&gt; R</span><br></pre></td></tr></table></figure><p>end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lesson-1&quot;&gt;&lt;a href=&quot;#lesson-1&quot; class=&quot;headerlink&quot; title=&quot;lesson 1&quot;&gt;&lt;/a&gt;lesson 1&lt;/h2&gt;&lt;p&gt;移动 插入 删除 保存  &lt;/p&gt;
&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>09_project_PowerDesigner</title>
    <link href="http://github.com/2018/02/26/09-project-PowerDesigner/"/>
    <id>http://github.com/2018/02/26/09-project-PowerDesigner/</id>
    <published>2018-02-26T14:18:36.000Z</published>
    <updated>2019-09-21T16:43:55.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="power-designer"><a href="#power-designer" class="headerlink" title="power designer"></a>power designer</h2><p>#特点#</p><ul><li>数据建模软件, 通过图形化界面展现建模</li><li>自动生成数据库建库语句</li><li>可选择不同类型数据建模</li></ul><p>#使用#</p><ol start="0"><li>Model types &gt; Physical Data Model &gt; Physical Diagram</li><li>选择数据库DBMS: mysql5.0</li><li>Column标签, 创建表 (可开启备注: 工具&gt;勾选Comment), 自定义字段信息</li><li>Columns标签, 主键自增设定(第一列箭头选中,双击,勾选indentity)</li><li>Preview标签, 预览建表语句(粘贴至SqlYog中执行, 建表即可)</li></ol><p>#关联关系#</p><ol><li>选中Referece工具, 指定关联关系即可.</li><li>自关联的情况下, 修改关联关系(ParentTableColumn:主键/ChildTableColumn:外键)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;power-designer&quot;&gt;&lt;a href=&quot;#power-designer&quot; class=&quot;headerlink&quot; title=&quot;power designer&quot;&gt;&lt;/a&gt;power designer&lt;/h2&gt;&lt;p&gt;#特点#&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据建模
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://github.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>08_project_Redis_持久化和集群</title>
    <link href="http://github.com/2018/02/24/08-project-Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/"/>
    <id>http://github.com/2018/02/24/08-project-Redis-持久化和集群/</id>
    <published>2018-02-24T11:47:28.000Z</published>
    <updated>2019-09-21T16:43:55.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis持久化</li><li>Redis集群</li></ul><hr><ul><li>Redis持久化</li></ul><ol><li><p>RDB模式<br>RDB, redis默认持久化方式. Redis默认每15分钟持久化一次, 将redis中内存数据写到.rdb磁盘文件中. 当redis节点宕机后, redis重启将从rdb文件中读取持久化数据, 恢复内存数据.</p></li><li><p>持久化策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#根据自身需要进行调整持久化策略</span><br><span class="line">#如果redis在900s(15分钟)/300s/60s执行了一次set操作, 则进行save 持久化操作1/10/10000次</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10 </span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li><li><p>手动持久化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在客户端手动输入指令: save或bgsave</span><br><span class="line">执行save指令时, 首先会开启一个线程, 主动执行持久化操作. 此时所有redis操作会阻塞, 直到持久化操作完成;</span><br><span class="line">执行bgsave指令时, 则不会造成阻塞现象. 但是会开启一个后台线程, 不能保证持久化操作立即执行.</span><br></pre></td></tr></table></figure></li><li><p>持久化文件和路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbfilename &quot;dump.rdb&quot;</span><br><span class="line">dir &quot;/usr/local/src/redis-3.2.8/sentinel&quot;</span><br><span class="line">//注意: </span><br><span class="line">//redis服务器关机后, 重启分片的每台redis数据都相同, 可能是因为持久化文件和路径相同导致的.</span><br><span class="line">//一般这里的配置, 尽量保持不同路径.</span><br></pre></td></tr></table></figure></li><li><p>AOF模式<br>AOF, 能够满足实时持久化的要求, 但是消耗较大的性能. 默认aof策略关闭. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#开启AOF</span><br><span class="line">appendonly yes (取消注释即可)</span><br><span class="line">//aof持久化策略开启后, rdb将不作用.</span><br></pre></td></tr></table></figure></li></ol><p>AOF持久化策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#appendsync always 实施备份, redis性能较低</span><br><span class="line">appendsync everysec 每秒持久化一次, redis效率略低于rdb</span><br><span class="line">#appendsync no 持久化时间交由系统决定, 不确定性强</span><br></pre></td></tr></table></figure><ol start="6"><li>redis内存策略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#redis中可以手动设置最大内存, 当内存达到存满现象时, redis会根据内存策略进行维护.</span><br><span class="line">#设置最大内存</span><br><span class="line">#maxmemory &lt;bytes&gt;</span><br><span class="line">#volatile-lru   从已经设置过期时间的数据中, 选择最少使用的删除</span><br><span class="line">#allkeys-lru    从全部数据中, 选择最少使用的删除</span><br><span class="line">#volatile-random 从已经设置过期时间的数据中, 随机删除</span><br><span class="line">#allkeys-ttl     从已经设置过期时间的数据中, 选择立马过期的数据进行释放操作</span><br><span class="line">#noeviction     默认redis内存策略. 不会删除数据, 进行redis读写操作时, 直接报错</span><br><span class="line"></span><br><span class="line">maxmemory-samples 1-10 设置10可靠性更好,但性能最低, 3速度快,但效果不理想, 默认5</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis集群</li></ul><ol><li>集群的优点:<br>a. 集群可实现内部的高可用;<br>b. 集群可通过多台主机共享内存;<br>c. 集群部署无需手动挂载, 程序自动维护;<br>d. 一般采用: 一主两从, 3主互指, 共9台服务器;</li><li>集群搭建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.mkdir /cluster/7000 ... /7008 创建多个目录 </span><br><span class="line">2. cp redis.conf /cluster/redis-7000.conf</span><br><span class="line">cp redis.conf /cluster/redis-7001.conf</span><br><span class="line">cp redis.conf /cluster/redis-7002.conf</span><br><span class="line">cp redis.conf /cluster/redis-7003.conf</span><br><span class="line">cp redis.conf /cluster/redis-7004.conf</span><br><span class="line">cp redis.conf /cluster/redis-7005.conf</span><br><span class="line">cp redis.conf /cluster/redis-7006.conf</span><br><span class="line">cp redis.conf /cluster/redis-7007.conf</span><br><span class="line">cp redis.conf /cluster/redis-7008.conf</span><br><span class="line">3. 修改配置 </span><br><span class="line">#bind 127.0.0.1   注释ip绑定</span><br><span class="line">protected-mode no 取消注释,关闭保护模式</span><br><span class="line">port 7000         修改端口7000-7008</span><br><span class="line">daemonize yes     开启后台启动</span><br><span class="line">pidfile /usr/local/src/redis-3.2.8/cluster/7000/redis_7000.pid 修改pid路径</span><br><span class="line">dbfilename dump-7000.rdb 修改持久化文件</span><br><span class="line">dir &quot;/user/local/src/redis-3.2.8/cluster/7000&quot; 修改持久化路径</span><br><span class="line">maxmemory-policy allkeys-lru 修改内存策略</span><br><span class="line">cluster-enabled yes          开启集群应用</span><br><span class="line">cluster-config-file nodes-7000.conf 修改集群节点信息</span><br><span class="line">4. 批量启动redis节点脚本</span><br><span class="line">#!/bin/sh</span><br><span class="line">redis-server 7000/redis-7000.conf &amp; </span><br><span class="line">redis-server 7001/redis-7001.conf &amp; </span><br><span class="line">redis-server 7002/redis-7002.conf &amp; </span><br><span class="line">redis-server 7003/redis-7003.conf &amp; </span><br><span class="line">redis-server 7004/redis-7004.conf &amp; </span><br><span class="line">redis-server 7005/redis-7005.conf &amp; </span><br><span class="line">redis-server 7006/redis-7006.conf &amp; </span><br><span class="line">redis-server 7007/redis-7007.conf &amp; </span><br><span class="line">redis-server 7008/redis-7008.conf &amp; </span><br><span class="line">5. 关闭防火墙</span><br><span class="line">sevice iptables stop </span><br><span class="line">6. 集群启动需要依赖的插件 ruby </span><br><span class="line">启动指令: </span><br><span class="line">./src/redis-trib.rb create --replicas 2 192.168.112.132:7000 192.168.112.132:7001 192.168.112.132:7002 192.168.112.132:7003 192.168.112.132:7004 192.168.112.132:7005 192.168.112.132:7006 192.168.112.132:7007 192.168.112.132:7008</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis集群到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jedis 配置--&gt;  </span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot; &gt;  </span><br><span class="line">     &lt;!--最大空闲数--&gt;  </span><br><span class="line">     &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt;  </span><br><span class="line">     &lt;!--最大建立连接等待时间--&gt;  </span><br><span class="line">     &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWait&#125;&quot; /&gt;  </span><br><span class="line">     &lt;!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个--&gt;  </span><br><span class="line">     &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot; /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;jedisCluster&quot;  class=&quot;cn.tinytiny.common.util.RedisCluster&quot; &gt;  </span><br><span class="line">     &lt;property name=&quot;addressConfig&quot;&gt;</span><br><span class="line">         &lt;value&gt;classpath:/properties/redis.properties&lt;/value&gt;  </span><br><span class="line">     &lt;/property&gt;  </span><br><span class="line">     &lt;property name=&quot;addressKeyPrefix&quot; value=&quot;redis.cluster&quot; /&gt; </span><br><span class="line">     &lt;!--  属性文件里  key的前缀 --&gt;  </span><br><span class="line">     &lt;property name=&quot;timeout&quot; value=&quot;$&#123;redis.timeout&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;maxRedirections&quot; value=&quot;6&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;genericObjectPoolConfig&quot; ref=&quot;poolConfig&quot; /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis.minIdle=100</span><br><span class="line">redis.maxIdle=300 </span><br><span class="line">redis.maxTotal=1000 </span><br><span class="line">redis.timeout=5000 </span><br><span class="line">redis.maxWait=1000 </span><br><span class="line">redis.testOnBorrow=true </span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7000</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7001</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7002</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7003</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7004</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7005</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7006</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7007</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7008</span><br></pre></td></tr></table></figure></li><li><p>工具类RedisCluster </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RedisCluster implements FactoryBean&lt;JedisCluster&gt;,InitializingBean&#123;</span><br><span class="line">  //创建对象</span><br><span class="line">  public void aferPorpertiesSet() throws Exception&#123;</span><br><span class="line">    Set&lt;HostAndPort&gt; haps = this.parseHostAndPort();</span><br><span class="line">    jedisCluster = new JedisCluster(haps, timeout, maxRedirections);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //通过工厂创建对象</span><br><span class="line">  public JedisCluster getObject() throws Exception&#123;</span><br><span class="line">    return jedisCluster; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private JedisCluster jedisCluster;</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class RedisService&#123;</span><br><span class="line">   @Autowired</span><br><span class="line">   private JedisSentinelPool jedisSentinelPool;</span><br><span class="line">   </span><br><span class="line">   public void set(String key, String value)&#123;</span><br><span class="line">      Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">      jedis.set(key, value);</span><br><span class="line">      jedisSentinelPool.returnResource(jedis);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis持久化&lt;/li&gt;
&lt;li&gt;Redis集群&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Redis持久化&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>07_project_Redis_Sentinal_Shard</title>
    <link href="http://github.com/2018/02/22/07-project-Redis-Sentinal-Shard/"/>
    <id>http://github.com/2018/02/22/07-project-Redis-Sentinal-Shard/</id>
    <published>2018-02-22T15:46:25.000Z</published>
    <updated>2019-09-21T16:43:55.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis分片</li><li>Redis哈希一致性算法</li><li>Rdeis分片整合到Spring</li><li>Redis哨兵</li><li>Redis哨兵整合到Spring</li></ul><hr><ul><li>Redis分片</li></ul><ol><li><p>问题: 传统单台Redis, 如果出现宕机, 则直接影响业务.</p></li><li><p>解决: 采用分片模式,</p></li><li><p>Redis分片: 将一台redis扩展到多台redis. 共同为业务提供服务, 每台redisb缓存用户1/N的数据.</p></li><li><p>分片配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 配置文件</span><br><span class="line">cp redis.conf shard/redis-6379.conf</span><br><span class="line">cp redis.conf shard/redis-6380.conf</span><br><span class="line">cp redis.conf shard/redis-6381.conf</span><br><span class="line">2. 修改配置文件redis-*.conf</span><br><span class="line">port 6379</span><br><span class="line">port 6380</span><br><span class="line">port 6381</span><br><span class="line">3. 测试</span><br><span class="line">redis-server redis-6379.conf</span><br><span class="line">redis-server redis-6380.conf</span><br><span class="line">redis-server redis-6381.conf</span><br><span class="line">redis-cli -p 6379</span><br><span class="line">redis-cli -p 6380</span><br><span class="line">redis-cli -p 6381</span><br><span class="line">redis-cli -p 6379 shutdown</span><br><span class="line">redis-cli -p 6380 shutdown</span><br><span class="line">redis-cli -p 6381 shutdown</span><br></pre></td></tr></table></figure></li><li><p>分片测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">/**</span><br><span class="line"> * 定义分片的连接池</span><br><span class="line"> * 1.poolConfig 定义链接池的大小</span><br><span class="line"> * 2.shards     表示List&lt;Shardinfo&gt; 表示redis的信息的集合</span><br><span class="line"> * </span><br><span class="line"> * 注意:  </span><br><span class="line"> * Jedis 引入会有线程安全性问题.所以通过线程池的方式动态获取jedis链接.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//定义链接池大小</span><br><span class="line">JedisPoolConfig poolConfig = new JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxTotal(1000);</span><br><span class="line">poolConfig.setTestOnBorrow(true);//测试链接是否正常,如果不正常会重新获取</span><br><span class="line">poolConfig.setMaxIdle(30);</span><br><span class="line">//定义分片的list集合</span><br><span class="line">List&lt;JedisShardInfo&gt; shards = new ArrayList&lt;JedisShardInfo&gt;();</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6379));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6380));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6381));</span><br><span class="line">ShardedJedisPool jedisPool = new ShardedJedisPool(poolConfig, shards);</span><br><span class="line">//获取redis的链接</span><br><span class="line">ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">for(int i=1;i&lt;=20;i++)&#123;</span><br><span class="line">jedis.set(&quot;KEY&quot;+i, &quot;&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;redis插入操作成功!!!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>哈希一致性算法</li></ul><ol><li>根据节点信息进行哈希计算, 成功进行动态的节点挂载.</li><li>特点: 均衡性/单调性/分散性/负载性<br>均衡性: 尽可能地让数据均衡的落入缓存区;<br>单调性: 将数据动态地分配到相应的节点上, 有新节点引入时也能动态分配到新节点;<br>分散性: 分布式开发中, 一份缓存数据可能存放在多台服务器的不同位置;<br>负载性: 经过哈希计算后, 多份缓存数据可能会存放在一台服务器的同一个位置;</li></ol><ul><li>Redis分片整合到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过线程池的方式整合单台redis  --&gt;</span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">    &lt;!--定义连接的总数  --&gt;</span><br><span class="line">&lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot;/&gt;</span><br><span class="line">&lt;!--定义最大的空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最小空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">List&lt;JedisShardInfo&gt; shards = new ArrayList&lt;JedisShardInfo&gt;();</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6379));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6380));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6381));</span><br><span class="line">ShardedJedisPool jedisPool = </span><br><span class="line">new ShardedJedisPool(poolConfig, shards);</span><br><span class="line">  --&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--定义jediShardinfo对象  --&gt;</span><br><span class="line">  &lt;bean id=&quot;host1&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host1&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port1&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;bean id=&quot;host2&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host2&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port2&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;bean id=&quot;host3&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host3&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port3&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;shardedJedisPool&quot; class=&quot;redis.clients.jedis.ShardedJedisPool&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; ref=&quot;poolConfig&quot; /&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=&quot;host1&quot;/&gt;</span><br><span class="line">&lt;ref bean=&quot;host2&quot;/&gt;</span><br><span class="line">&lt;ref bean=&quot;host3&quot;/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis.maxTotal=1000</span><br><span class="line">redis.maxIdle=30</span><br><span class="line">redis.minIdle=10</span><br><span class="line">redis.host1=192.168.112.132</span><br><span class="line">redis.port1=6379</span><br><span class="line">redis.host2=192.168.112.132</span><br><span class="line">redis.port2=6380</span><br><span class="line">redis.host3=192.168.112.132</span><br><span class="line">redis.port3=6381</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RedisService&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private ShardedJedisPool jedisPool;</span><br><span class="line">  </span><br><span class="line">  public void set(String key, String value)&#123;</span><br><span class="line">    ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">    jedis.set(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String get(String key)&#123;</span><br><span class="line">    ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">    return jedis.get(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务Service层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisService redisService;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis哨兵</li></ul><ol><li><p>搭建主从结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 复制redis.conf配置到 sentinel/redis-6379.conf (同上)</span><br><span class="line">/sentinel/redis-6379.conf</span><br><span class="line">/sentinel/redis-6380.conf</span><br><span class="line">/sentinel/redis-6381.conf</span><br><span class="line">2. 查看redis节点信息 info replication </span><br><span class="line">3. 实现挂载 SLAVEOF 192.168.112.132 6379 </span><br><span class="line">4. 查看redis节点信息, 挂载成功进行读写测试</span><br></pre></td></tr></table></figure></li><li><p>哨兵工作原理</p></li></ol><ul><li>用户连接时, 先通过哨兵获取主机master节点信息;</li><li>获取master节点信息后, 进行redis读写操作(set/get)</li><li>当master节点宕机时, 哨兵的心跳检测发现主机长时间无响应, 则哨兵进行推选机制, 推选新的主机master;</li><li>当新主机节点出现时, 其余全部主机都充当从机角色(即使先前主机上线了也是从机角色)</li></ul><ol start="3"><li>哨兵配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 关闭保护模式</span><br><span class="line">protected-mode no (取消注释即可)</span><br><span class="line">2. 配置哨兵监控</span><br><span class="line">sentinel monitor mymaster 192.168.112.132 6379 1 (推选票数超过1票即可当选) </span><br><span class="line">3. 心跳检测</span><br><span class="line">sentinel down-after-milliseconds mymaster 10000 (超过10s没有响应则开始推选新主机)</span><br><span class="line">4. 推选时间</span><br><span class="line">sentinel failover-timeout mymaster 20000 </span><br><span class="line">5. 启动一台哨兵(先启动一台,后续配置文件会生成新的内容)</span><br><span class="line">redis-sentinel sentinel-6379.conf</span><br><span class="line">6. 查看redis节点信息 info replication </span><br><span class="line">7. 复制编译后的配置sentinel-6379.conf</span><br><span class="line">cp sentinel-6379.conf sentinel-6380.conf</span><br><span class="line">cp sentinel-6379.conf sentinel-6381.conf</span><br><span class="line">8. 修改序列号(保证唯一性)</span><br><span class="line">sentinel myid 96080384973....3747df8777 </span><br><span class="line">//哨兵启动后会自动生成序列号, 序列号相同的哨兵不能相互通信.</span><br><span class="line">9. 如果部署三台哨兵, 则修改推选票数</span><br><span class="line">sentinel monitor mymaster 192.168.112.132 2 (超过半数即可)</span><br><span class="line">10. 测试哨兵, 尝试宕机一台redis, 查看哨兵是否推选新主机.</span><br><span class="line">注意: 配置主从, 不能对从机进行写库操作!!! 若要测试分片则需要重启redis开启分片.</span><br><span class="line">所以, 一般情况下, /shard 目录下保存分片配置 /sentinel 目录下保存哨兵配置</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis哨兵整合到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;jedisSentinelPool&quot; class=&quot;redis.clients.jedis.JedisSentinelPool&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.masterName&#125;&quot;/&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host1&#125;&lt;/value&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host2&#125;&lt;/value&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host3&#125;&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis.masterName=mymaster</span><br><span class="line">redis.sentinel.host1=192.168.112.132:26379</span><br><span class="line">redis.sentinel.host2=192.168.112.132:26380</span><br><span class="line">redis.sentinel.host3=192.168.112.132:26381</span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//哨兵的测试</span><br><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">//创建哨兵的连接池</span><br><span class="line">//String类型表示的是哨兵的IP:端口号</span><br><span class="line">Set&lt;String&gt; sentinels = new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">String msg = new HostAndPort(&quot;192.168.112.132&quot;,26379).toString();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;通过对象输出哨兵的信息格式:&quot;+msg);</span><br><span class="line"></span><br><span class="line">//为set集合赋值 保存全部的哨兵信息</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26379).toString());</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26380).toString());</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26381).toString());</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 参数介绍</span><br><span class="line"> * 1.masterName 表示链接哨兵的主机的名称一般是字符串mymaster</span><br><span class="line"> * 2.sentinels 哨兵的集合Set&lt;&gt;</span><br><span class="line"> */</span><br><span class="line">JedisSentinelPool sentinelPool = new JedisSentinelPool(&quot;mymaster&quot;, sentinels);</span><br><span class="line"></span><br><span class="line">Jedis jedis = sentinelPool.getResource();</span><br><span class="line"></span><br><span class="line">jedis.set(&quot;name&quot;, &quot;tom&quot;);</span><br><span class="line">System.out.println(&quot;获取数据:&quot;+jedis.get(&quot;name&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class RedisService&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private JedisSentinelPool jedisSentinelPool;</span><br><span class="line">  </span><br><span class="line">  public void set(String key, String value)&#123;</span><br><span class="line">    Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">    jedis.set(key, value);</span><br><span class="line">    jedisSentinelPool.returnResource(jedis); //返回到连接池中</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String get(String key)&#123;</span><br><span class="line">    Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">    String result = jedis.get(key);</span><br><span class="line">    jedisSentinelPool.returnResource(jedis);</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis分片&lt;/li&gt;
&lt;li&gt;Redis哈希一致性算法&lt;/li&gt;
&lt;li&gt;Rdeis分片整合到Spring&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>06_project_Redis_Basic</title>
    <link href="http://github.com/2018/02/20/06-project-Redis-Basic/"/>
    <id>http://github.com/2018/02/20/06-project-Redis-Basic/</id>
    <published>2018-02-20T04:45:14.000Z</published>
    <updated>2019-09-21T16:43:55.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis</li><li>Redis安装</li><li>Spring整合Redis</li><li>Redis缓存实例的简单实现</li><li>Redis缓存实例的高级实现</li></ul><hr><ul><li>Redis </li></ul><ol><li>问题: 主从复制, 读写分离 在一定程度可以抗击高并发, 对于用户的大量”读”操作所引发的高并发问题, 需要得到解决.</li><li>解决: 缓存机制 </li><li>缓存机制: 降低客户端直接访问服务器的频次, 并且缓存中的数据与服务器数据库数据保持同步.</li><li>问题2: 引入缓存机制后, 缓存数据如何存储/如何持久化/如何数据同步/如何内存维护?</li><li>解决2: 缓存数据采用map集合保存(key值保持唯一性); 定时将缓存数据(内存中)保存到磁盘文件, 服务器宕机后重启, 优先读取磁盘持久化文件恢复缓存数据; 数据更新时, 及时维护缓存中的数据(业务代码中实现维护); 设定最大内存, 采用LRU算法删除最近最少使用的数据, 达到内存维护目的.</li><li>Redis: 一个开源的内存中的数据结构存储系统, 可作为数据库/缓存和消息中间件, 通过Sentinel哨兵和分区集群Cluster提供高可用.</li></ol><ul><li>Redis安装</li></ul><ol><li><p>上传redis-3.2.8.tar.gz</p></li><li><p>解压tar -xvf redis-3.2.8.tar.gz</p></li><li><p>cd redis-3.2.8</p></li><li><p>编译 make</p></li><li><p>安装 make install</p></li><li><p>启动 redis-server </p></li><li><p>进入客户端 redis-cli -p 6379 </p></li><li><p>退出客户端 exit </p></li><li><p>开启redis后台启动: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//配置redis.conf </span><br><span class="line">vim redis.conf </span><br><span class="line">#bind 127.0.0.1 注释该行</span><br><span class="line">protected-mode no 关闭保护模式</span><br><span class="line">daemonize yes 开启后台启动</span><br></pre></td></tr></table></figure></li><li><p>根据配置文件启动: redis-server redis.conf </p></li><li><p>关闭redis: kill -9 [pid进程] 或 redis-cli shutdown </p></li><li><p>redis指令集(参见文档)</p></li></ol><ul><li>Spring整合Redis</li></ul><ol><li><p>maven导入jar包依赖: jedis</p></li><li><p>添加spring配置文件applicationContext-redis.xml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Spring管理Jedis  </span><br><span class="line">name= &quot;构造参数的名称&quot;</span><br><span class="line">index=&quot;构造参数的位置&quot;</span><br><span class="line">总结:构造注入时使用index不用name.原因由于java只会维护形参的数据类型</span><br><span class="line">不会维护形参的名称.所有通过name属性进行构造注入时,可能会产生风险.</span><br><span class="line">所以建议使用index.</span><br><span class="line"></span><br><span class="line">addUser(int age,String sex)</span><br><span class="line">addUser(int arg0,String arg1) 由于没有导入源码</span><br><span class="line"></span><br><span class="line">关于type类型的说明:</span><br><span class="line">一般情况下,SPring会自动的维护参数类型,所以可以省略不写.</span><br><span class="line">但是如果类中的构造方法重载较多,出现参数个数相同的情况,</span><br><span class="line">需要指定参数类型.Spring根据特定的参数实现构造注入.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;jedis&quot; class=&quot;redis.clients.jedis.Jedis&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host&#125;&quot; </span><br><span class="line">type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port&#125;&quot; </span><br><span class="line">type=&quot;int&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加redis.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">redis.host=192.168.112.132</span><br><span class="line">redis.port=6379</span><br><span class="line"></span><br><span class="line">//applicationContext.xml管理配置文件</span><br><span class="line">&lt;!-- 引入配置文件 --&gt;</span><br><span class="line">&lt;bean id=&quot;propertyPlaceholderConfigurer&quot;</span><br><span class="line">      class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">       &lt;list&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/jdbc.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/image.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/redis.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/httpclient.properties&lt;/value&gt;</span><br><span class="line">       &lt;/list&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis缓存实例的简单实现</li></ul><ol><li>Service层缓存数据操作</li><li>注入@Autowried Jedis类</li><li>当查询信息时, 先查询缓存中是否存在(根据唯一key值查询)</li><li>若无缓存, 则查询后台数据库</li><li>将后台查询的结果, 转换成json, 缓存至redis</li><li>返回该次查询结果</li><li>若有缓存, 则将缓存数据转换成json, 返回结果.</li><li>注意: json字符串转化成POJO对象时, 调用其setter方法, 业务中, 需要对象的非属性值时, 添加相应的getter方法满足其业务需要. 此时需要添加@JsonIgnoreProperties(ignoreUnknown=true)注解, 忽略未知字段.</li></ol><ul><li>Redis缓存实例的高级实现</li></ul><ol><li><p>大致步骤同上</p></li><li><p>修改配置applicationContext-redis.xml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过线程池的方式整合单台redis  --&gt;</span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">&lt;!--定义连接的总数  --&gt;</span><br><span class="line">&lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最大的空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最小空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--通过工厂模式创建jedis连接 </span><br><span class="line">需要指定 host主机 和端口号</span><br><span class="line">引用连接池配置</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;bean id=&quot;jedisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;</span><br><span class="line">&lt;property name=&quot;hostName&quot; value=&quot;$&#123;redis.host&#125;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;port&quot; value=&quot;$&#123;redis.port&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--引入线程池的配置  --&gt;</span><br><span class="line">&lt;property name=&quot;poolConfig&quot; ref=&quot;poolConfig&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置SpringJedisTemplate spring操作redis的模板工具API  --&gt;</span><br><span class="line">&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;&gt;</span><br><span class="line">&lt;!--配置redis工厂  --&gt;</span><br><span class="line">&lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改redis.property</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis.host=192.168.126.142</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.maxTotal=1000</span><br><span class="line">redis.maxIdle=30</span><br><span class="line">redis.minIdle=10</span><br></pre></td></tr></table></figure></li><li><p>工具类的Service层, 注入RedisTemplate类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RedisService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">public void set(String key,String value)&#123;</span><br><span class="line">ValueOperations&lt;String, String&gt; operations = </span><br><span class="line">redisTemplate.opsForValue();</span><br><span class="line">//将数据写入redis中</span><br><span class="line">operations.set(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过key获取数据</span><br><span class="line">public String get(String key)&#123;</span><br><span class="line">ValueOperations&lt;String, String&gt; operations = </span><br><span class="line">redisTemplate.opsForValue();</span><br><span class="line">return operations.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 注意: jt-common 中的 RedisService类 编辑完后, 需要重新打包整个工程!!!</span><br></pre></td></tr></table></figure></li><li><p>业务模块Service层, 注入RedisSevice工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RedisService redisService;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">String jsonData = redisService.get(key);</span><br><span class="line">...</span><br><span class="line">//缓存数据</span><br><span class="line">redisService.set(key, resultJson); //resultJson为数据库查询后结果转换成的json串</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Redis安装&lt;/li&gt;
&lt;li&gt;Spring整合Redis&lt;/li&gt;
&lt;li&gt;Redis缓存实例
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
</feed>
