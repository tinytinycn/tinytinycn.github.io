<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hang &#39;s blogs</title>
  
  
  <link href="/tinytinycn.github.io/atom.xml" rel="self"/>
  
  <link href="http://github.com/"/>
  <updated>2019-09-21T16:58:53.170Z</updated>
  <id>http://github.com/</id>
  
  <author>
    <name>hang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.com/2019/09/22/hello-world/"/>
    <id>http://github.com/2019/09/22/hello-world/</id>
    <published>2019-09-21T16:58:53.170Z</published>
    <updated>2019-09-21T16:58:53.170Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-01-基础</title>
    <link href="http://github.com/2018/09/11/python-01-%E5%9F%BA%E7%A1%80/"/>
    <id>http://github.com/2018/09/11/python-01-基础/</id>
    <published>2018-09-11T11:26:41.000Z</published>
    <updated>2019-09-21T16:43:55.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><ul><li>number:数字类型不允许改变　var = 666 或者　var1=var2=666</li><li>若改变数字数据类型的值, 将重新分配内存空间. del var 或者　del var1, var2</li><li>数字类型: 整型Int/浮点型float/复数complex/布尔bool</li><li>数字类型转换:　int(x)/float(x)/complex(x)/complex(x,y)</li><li>数字运算: +-*/(除法得浮点数)//(除法取整数)</li><li>数学函数(略)</li></ul><h3 id="string-amp-unicode"><a href="#string-amp-unicode" class="headerlink" title="string &amp; unicode"></a>string &amp; unicode</h3><ul><li><p>str: 字符串类型不允许改变　str=’tiny’ 或者　str=”tiny”</p></li><li><p>不支持单字符类型, 单字符也是字符串</p></li><li><p>+拼接/*重复/[]索引字符/[:]截取/[not]in成员/r原始字符串/%格式字符串</p></li><li><p>ASCII编码 1个字节</p></li><li><p>Unicode编码 2个字节</p></li><li><p>UTF-8编码 英文1个字节,中文3个字节</p></li><li><p>内存中, 统一使用unicode编码, 存储或传输时建议统一使用utf-8;</p></li><li><p>以unicode编码的str, 通过encode()编码指定的bytes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;abc&apos;.encode(&apos;ascii&apos;)</span><br><span class="line">&apos;abc&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;ascii&apos;)报错, 中文编码范围超过了ascii编码范围</span><br></pre></td></tr></table></figure></li><li><p>len()函数计算str的”字符数”!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(b&apos;abc&apos;)  //3</span><br><span class="line">len(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;) //6</span><br><span class="line">len(&apos;中文&apos;) //2</span><br><span class="line">len(&apos;中文&apos;.encode(&apos;utf-8&apos;)) //6</span><br></pre></td></tr></table></figure></li></ul><h3 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h3><p>list, 有序列表集合, 可添加删除元素</p><ul><li>声明: alist=[‘tiny’, ‘jack’, ‘rose’, 100, True]</li><li>获取元素个数: len(alist)</li><li>索引(更新): alist[0] 或者 alist[-1] 或者alist[0]=’ttcn’</li><li>末尾追加: alist.append(‘marry’)</li><li>指定插入: alist.insert(1, ‘adam’)</li><li>末尾删除: alist.pop() 返回元素内容</li><li>指定删除: alist.pop(1) 返回元素内容</li><li>list 可包含不同数据类型 [True, 999, ‘str’]</li><li>list 可包含list [‘test’, [1,2,3], ‘python’]</li></ul><p>tuple, 有序列表元组, 不可修改!</p><ul><li>声明: atuple=(‘one’,) 或者 atuple=(‘one’, ‘two’, ‘three’)</li><li>tuple ‘指向不变’, 因此 atuple=(‘one’, [1,2]);atuple[1][0]=2; 是允许的</li></ul><h3 id="set-amp-dict"><a href="#set-amp-dict" class="headerlink" title="set &amp; dict"></a>set &amp; dict</h3><p>set, 无序不可重复集合, 可添加删除元素</p><ul><li>声明: aset=set(‘abc’) 或 aset=set([1,2,3]) 或　aset=set() 或 aset={1,2,3} (不能使用空{})</li><li>获取元素个数: len(aset)</li><li>添加元素: aset.add(x)</li><li>更新元素: aset.update(x) 或 aset.update({1,2,3}) 或　aset.update([1,2],[3,4])</li><li>删除元素: aset.remove(x), 没有该元素则发生错误</li><li>删除元素: aset.discard(x), 没有该元素则不会发生错误</li><li>随机删除元素: aset.pop()</li><li>清空集合: aset.clear()</li><li>判断元素存在: x in aset</li></ul><p>dict, 字典存储任意类型对象, 可添加删除元素</p><ul><li>声明: adict={k1:v1, k2:v2} 或　adict={}</li><li>获取元素个数: len(adict)</li><li>键必须唯一, 不可变, 如数字/字符串/元组</li><li>获取元素: adict[k1]</li><li>更新元素: adict[k1]=’new_value’</li><li>删除元素: del adict[k1]</li><li>随机删除元素: adict.popitem()</li><li>指定删除元素: adict.pop(k1[,default]), 没有该元素则返回default</li><li>清空字典: adict.clear()</li><li>删除字典: del adict</li><li>判断key存在: k1 in adict</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;number:数字类型不允许改变　var = 666 或者　var1=var2=666&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>1-python-基础</title>
    <link href="http://github.com/2018/09/11/1-python-%E5%9F%BA%E7%A1%80/"/>
    <id>http://github.com/2018/09/11/1-python-基础/</id>
    <published>2018-09-11T11:26:41.000Z</published>
    <updated>2019-09-21T16:43:55.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><ul><li>number:数字类型不允许改变　var = 666 或者　var1=var2=666</li><li>若改变数字数据类型的值, 将重新分配内存空间. del var 或者　del var1, var2</li><li>数字类型: 整型Int/浮点型float/复数complex/布尔bool</li><li>数字类型转换:　int(x)/float(x)/complex(x)/complex(x,y)</li><li>数字运算: +-*/(除法得浮点数)//(除法取整数)</li><li>数学函数(略)</li></ul><h3 id="string-amp-unicode"><a href="#string-amp-unicode" class="headerlink" title="string &amp; unicode"></a>string &amp; unicode</h3><ul><li><p>str: 字符串类型不允许改变　str=’tiny’ 或者　str=”tiny”</p></li><li><p>不支持单字符类型, 单字符也是字符串</p></li><li><p>+拼接/*重复/[]索引字符/[:]截取/[not]in成员/r原始字符串/%格式字符串</p></li><li><p>ASCII编码 1个字节</p></li><li><p>Unicode编码 2个字节</p></li><li><p>UTF-8编码 英文1个字节,中文3个字节</p></li><li><p>内存中, 统一使用unicode编码, 存储或传输时建议统一使用utf-8;</p></li><li><p>以unicode编码的str, 通过encode()编码指定的bytes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;abc&apos;.encode(&apos;ascii&apos;)</span><br><span class="line">&apos;abc&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;.encode(&apos;ascii&apos;)报错, 中文编码范围超过了ascii编码范围</span><br></pre></td></tr></table></figure></li><li><p>len()函数计算str的”字符数”!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(b&apos;abc&apos;)  //3</span><br><span class="line">len(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;) //6</span><br><span class="line">len(&apos;中文&apos;) //2</span><br><span class="line">len(&apos;中文&apos;.encode(&apos;utf-8&apos;)) //6</span><br></pre></td></tr></table></figure></li></ul><h3 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h3><p>list, 有序列表集合, 可添加删除元素</p><ul><li>声明: alist=[‘tiny’, ‘jack’, ‘rose’, 100, True]</li><li>获取元素个数: len(alist)</li><li>索引(更新): alist[0] 或者 alist[-1] 或者alist[0]=’ttcn’</li><li>末尾追加: alist.append(‘marry’)</li><li>指定插入: alist.insert(1, ‘adam’)</li><li>末尾删除: alist.pop() 返回元素内容</li><li>指定删除: alist.pop(1) 返回元素内容</li><li>list 可包含不同数据类型 [True, 999, ‘str’]</li><li>list 可包含list [‘test’, [1,2,3], ‘python’]</li></ul><p>tuple, 有序列表元组, 不可修改!</p><ul><li>声明: atuple=(‘one’,) 或者 atuple=(‘one’, ‘two’, ‘three’)</li><li>tuple ‘指向不变’, 因此 atuple=(‘one’, [1,2]);atuple[1][0]=2; 是允许的</li></ul><h3 id="set-amp-dict"><a href="#set-amp-dict" class="headerlink" title="set &amp; dict"></a>set &amp; dict</h3><p>set, 无序不可重复集合, 可添加删除元素</p><ul><li>声明: aset=set(‘abc’) 或 aset=set([1,2,3]) 或　aset=set() 或 aset={1,2,3} (不能使用空{})</li><li>获取元素个数: len(aset)</li><li>添加元素: aset.add(x)</li><li>更新元素: aset.update(x) 或 aset.update({1,2,3}) 或　aset.update([1,2],[3,4])</li><li>删除元素: aset.remove(x), 没有该元素则发生错误</li><li>删除元素: aset.discard(x), 没有该元素则不会发生错误</li><li>随机删除元素: aset.pop()</li><li>清空集合: aset.clear()</li><li>判断元素存在: x in aset</li></ul><p>dict, 字典存储任意类型对象, 可添加删除元素</p><ul><li>声明: adict={k1:v1, k2:v2} 或　adict={}</li><li>获取元素个数: len(adict)</li><li>键必须唯一, 不可变, 如数字/字符串/元组</li><li>获取元素: adict[k1]</li><li>更新元素: adict[k1]=’new_value’</li><li>删除元素: del adict[k1]</li><li>随机删除元素: adict.popitem()</li><li>指定删除元素: adict.pop(k1[,default]), 没有该元素则返回default</li><li>清空字典: adict.clear()</li><li>删除字典: del adict</li><li>判断key存在: k1 in adict</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;number:数字类型不允许改变　var = 666 或者　var1=var2=666&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-fix-startup-slow</title>
    <link href="http://github.com/2018/03/09/emacs-fix-startup-slow/"/>
    <id>http://github.com/2018/03/09/emacs-fix-startup-slow/</id>
    <published>2018-03-09T02:45:08.000Z</published>
    <updated>2019-09-21T16:43:55.374Z</updated>
    
    <content type="html"><![CDATA[<p>问题: spacemacs 启动速度较慢, 可能长达几十秒. 正常速度应该在十多秒甚至几秒.</p><p>分析: 启动时, 需要loading 不同layer 的配置el文件.</p><p>解决: </p><ol><li>Messages buffer 中查看loading信息, 查看是否有异常信息;</li><li>命令行启动, 查看cpu和内存信息;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emacs --profiles 或 emacs.exe --profiles</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 命令行启动, 查看需要的时间信息;(最为直观);</span><br></pre></td></tr></table></figure></li></ol><p>emcas –timed-requires 或 emcas.exe –timed-requires</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 删除不必要的layer</span><br><span class="line">5. 在melpa检查包更新也很耗时;</span><br><span class="line">6. 检查spacemacs版本也是没那么必要, 除非你喜欢保持最新版.</span><br><span class="line"></span><br><span class="line">测试: </span><br><span class="line">- 测试机器surface pro 4 i5 windows10 gnu emacs 启动速度4~5s</span><br><span class="line"></span><br><span class="line">我的配置文件:</span><br></pre></td></tr></table></figure><p>dotspacemacs-configuration-layers<br>   ‘(<br>     html<br>     ;; —————————————————————-<br>     ;; Example of useful layers you may want to use right away.<br>     ;; Uncomment some layer names and press <spc f e r> (Vim style) or<br>     ;; <m-m f e r> (Emacs style) to install them.<br>     ;; —————————————————————-<br>     helm<br>     auto-completion<br>     better-defaults<br>     emacs-lisp<br>     ;; git<br>     markdown<br>     org<br>     syntax-checking<br>     ;; version-control<br>     )<br>   ;</m-m></spc></p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题: spacemacs 启动速度较慢, 可能长达几十秒. 正常速度应该在十多秒甚至几秒.&lt;/p&gt;
&lt;p&gt;分析: 启动时, 需要loading 不同layer 的配置el文件.&lt;/p&gt;
&lt;p&gt;解决: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Messages buffer 中查看loa
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-evil-vim-keymap</title>
    <link href="http://github.com/2018/03/06/emacs-evil-vim-keymap/"/>
    <id>http://github.com/2018/03/06/emacs-evil-vim-keymap/</id>
    <published>2018-03-06T14:25:20.000Z</published>
    <updated>2019-09-21T16:43:55.372Z</updated>
    
    <content type="html"><![CDATA[<p>以下type 键位, 均位于normal state.</p><h2 id="1-光标移动"><a href="#1-光标移动" class="headerlink" title="1 光标移动 "></a>1 光标移动 </h2><ol><li>光标移动 hjkl </li><li>移动到buffer开头 gg</li><li>移动到buffer结尾 G</li><li>移动到下n个word [number] w</li><li>移动到下n个word的结尾 [number] e</li><li>移动到下n个word的开头 [number] b</li></ol><h2 id="2-插入文本-增"><a href="#2-插入文本-增" class="headerlink" title="2 插入文本 (增)"></a>2 插入文本 (增)</h2><ol><li>光标前插入 i </li><li>光标后插入 a </li><li>光标上一行插入 O</li><li>光标下一行插入 o </li><li>光标行首插入 I</li><li>光标行尾插入 A </li></ol><h2 id="3-删除文本-删"><a href="#3-删除文本-删" class="headerlink" title="3 删除文本 (删)"></a>3 删除文本 (删)</h2><ol><li>光标下删除一个字符 x </li><li>光标往后删除一个单词 dw</li><li>光标往后删除一行 d$ 或 D </li><li>光标下一整行 dd</li><li>delete command格式:<br>[number] command object 或 command [number] object<br>2dw 或 d2w<br>2dd 或 d2d</li></ol><h2 id="4-修改文本-删改"><a href="#4-修改文本-删改" class="headerlink" title="4 修改文本 (删改)"></a>4 修改文本 (删改)</h2><p>注意的是: 修改时, normal state &gt;&gt; insert state </p><ol><li>光标下修改一个字符 r (自动esc退出insert state)</li><li>光标下连续修改 R (直到esc退出)</li><li>光标往后修改一个单词 cw (直到esc退出) </li><li>光标往后修改一个行 c$ (直到esc退出)</li><li>change command格式:<br>[number] command object 或 command [number] object </li></ol><h2 id="5-替换文本-换改"><a href="#5-替换文本-换改" class="headerlink" title="5 替换文本 (换改)"></a>5 替换文本 (换改)</h2><ol><li>当前行替换一次 :s/old/new</li><li>当前行替换n次  :s/old/new/g </li><li>某几行替换一次 :s#,#/old/new/g </li><li>全部替换      :%s/old/new/g </li><li>全部替换(每次改变有提示) :%s/old/new/gc </li></ol><h2 id="6-搜索文本-查"><a href="#6-搜索文本-查" class="headerlink" title="6 搜索文本 (查)"></a>6 搜索文本 (查)</h2><ol><li>正向搜索 / (n 下一个匹配项 N 上一个匹配项)</li><li>反向搜索 ? (n 下一个匹配项 N 上一个匹配项)</li><li>定位配对符号 % (定位(),[],{})</li></ol><h2 id="7-命令行"><a href="#7-命令行" class="headerlink" title="7 命令行"></a>7 命令行</h2><ol><li>外部命令行格式 :!command<br>:!ls or :!dir          列出目录<br>:!rm or :!del FILENAME 删除文件<br>:w FILENAME            当前buffer全部内容写出到文件FILENAME<br>:#,#w FILENAME         当前buffer某行内容写出到文件FILENAME<br>:r FILENAME            从文件FILENAME恢复内容到当前buffer</li></ol><h2 id="8-复制-粘贴"><a href="#8-复制-粘贴" class="headerlink" title="8 复制 粘贴"></a>8 复制 粘贴</h2><p>normal模式下:</p><ol><li>yw</li><li>yy</li><li>y$</li><li>y^</li><li>:reg 粘贴板</li><li>“ayw 复制到a粘贴板栈中, “ap 粘贴从a粘贴板栈中. </li></ol><p>按字符选择模式:</p><ol><li>v (visual state)</li><li>hjkl</li><li>y (yank)</li><li>hjkl</li><li>p (put)</li></ol><p>按行选择模式:</p><ol><li>V (visual state)</li><li>hjkl</li><li>y</li><li>hjkl</li><li>p</li></ol><p>按块选择模式:</p><ol><li>CTRL-v (visual state)</li><li>hjkl</li><li>y</li><li>hjkl</li><li>p</li></ol><h2 id="9-剪切-粘贴"><a href="#9-剪切-粘贴" class="headerlink" title="9 剪切 粘贴"></a>9 剪切 粘贴</h2><p>同上 复制粘贴</p><ol><li>v (visual state)</li><li>hjkl </li><li>d (delete)</li><li>hjkl</li><li>p (put)</li></ol><h2 id="10-退出-保存"><a href="#10-退出-保存" class="headerlink" title="10 退出 保存"></a>10 退出 保存</h2><ol><li>退出 :q</li><li>退出不保存 :q!</li><li>保存 :w</li><li>保存 另存为 :w filename.md </li><li>退出保存 :wq 或 :x 或 ZZ</li></ol><h2 id="11-切换模式"><a href="#11-切换模式" class="headerlink" title="11 切换模式"></a>11 切换模式</h2><ol><li>退回正常模式 ESC 或 CTRL-[</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下type 键位, 均位于normal state.&lt;/p&gt;
&lt;h2 id=&quot;1-光标移动&quot;&gt;&lt;a href=&quot;#1-光标移动&quot; class=&quot;headerlink&quot; title=&quot;1 光标移动 &quot;&gt;&lt;/a&gt;1 光标移动 &lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;光标移动 hjkl &lt;
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>emacs-evil-vim-tutor</title>
    <link href="http://github.com/2018/03/05/emacs-evil-vim-tutor/"/>
    <id>http://github.com/2018/03/05/emacs-evil-vim-tutor/</id>
    <published>2018-03-05T15:10:52.000Z</published>
    <updated>2019-09-21T16:43:55.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lesson-1"><a href="#lesson-1" class="headerlink" title="lesson 1"></a>lesson 1</h2><p>移动 插入 删除 保存  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 光标移动, hjkl</span><br><span class="line">2. 退出emacs, &lt;ESC&gt; :qa! &lt;ENTER&gt; 放弃修改退出</span><br><span class="line">3. 退出emacs, &lt;ESC&gt; :wqa &lt;ENTER&gt; 保存修改退出</span><br><span class="line">4. 删除一个字符, normal状态下 x </span><br><span class="line">5. 插入文本, normal状态下 i 插入文本 &lt;ESC&gt;</span><br></pre></td></tr></table></figure><h2 id="lesson-2"><a href="#lesson-2" class="headerlink" title="lesson 2"></a>lesson 2</h2><p>删除 撤销</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 删除往后的一个单词, dw</span><br><span class="line">2. 删除往后的一行, d$</span><br><span class="line">3. 删除整行, dd</span><br><span class="line">4. command格式: </span><br><span class="line">[number] command object</span><br><span class="line">command [number] object</span><br><span class="line">5. 往前撤销 u</span><br><span class="line">6. 往后撤销 C-R</span><br></pre></td></tr></table></figure><h2 id="lesson-3"><a href="#lesson-3" class="headerlink" title="lesson 3"></a>lesson 3</h2><p>放置 替换 修改(改变)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 放置已删除的文本, p (放置光标之后)</span><br><span class="line">2. 替换一个字符, r </span><br><span class="line">3. 改变command, cw (改变往后一个单词) c$ (改变往后一行) </span><br><span class="line">4. 改变command格式: </span><br><span class="line">[number] c object</span><br><span class="line">c [number] object</span><br></pre></td></tr></table></figure><h2 id="lesson-4"><a href="#lesson-4" class="headerlink" title="lesson 4"></a>lesson 4</h2><p>移动 搜索内容 替换内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 移动到buffer开头, gg</span><br><span class="line">2. 移动到buffer结尾, G</span><br><span class="line">3. 移动到某行, :[number]</span><br><span class="line">4. 正向搜索短语, / (n 下一个匹配项 N上一个匹配项)</span><br><span class="line">5. 反向搜索短语, ? (n 下一个匹配项 N上一个匹配项)</span><br><span class="line">6. 定位配对符号, % (包括(),[],&#123;&#125;)</span><br><span class="line">7. 替换 :s/old/new </span><br><span class="line">8. 替换 :s/old/new/g </span><br><span class="line">9. 替换某几行间 :#,#s/old/new/g (:96,106s/old/new/g)</span><br><span class="line">10. 替换全部 :%s/old/new/g</span><br><span class="line">11. To ask for confirmation each time add &apos;c&apos; </span><br><span class="line">:%s/old/new/gc</span><br></pre></td></tr></table></figure><h2 id="lesson-5"><a href="#lesson-5" class="headerlink" title="lesson 5"></a>lesson 5</h2><p>命令行 移动内容/恢复内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 外部命令行, :!command </span><br><span class="line">:!ls or :!dir 列出目录</span><br><span class="line">:!rm or :!del &lt;filename&gt; 删除文件 </span><br><span class="line">2. 当前buffer内容写出到文件 :w &lt;filename&gt;</span><br><span class="line">3. 当前某行间内容写出到文件  :#,#w &lt;filename&gt; </span><br><span class="line">4. 从文件恢复内容到当前buffer :r &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="lesson-6"><a href="#lesson-6" class="headerlink" title="lesson 6"></a>lesson 6</h2><p>插入 替换 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 光标下一行, 插入文本 o</span><br><span class="line">2. 光标上一行, 插入文本 O (大写o)</span><br><span class="line">3. 光标之后, 插入文本 a </span><br><span class="line">4. 行末尾, 插入文本 A </span><br><span class="line">5. 持续替换直到&lt;ESC&gt; R</span><br></pre></td></tr></table></figure><p>end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lesson-1&quot;&gt;&lt;a href=&quot;#lesson-1&quot; class=&quot;headerlink&quot; title=&quot;lesson 1&quot;&gt;&lt;/a&gt;lesson 1&lt;/h2&gt;&lt;p&gt;移动 插入 删除 保存  &lt;/p&gt;
&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://github.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>09_project_PowerDesigner</title>
    <link href="http://github.com/2018/02/26/09-project-PowerDesigner/"/>
    <id>http://github.com/2018/02/26/09-project-PowerDesigner/</id>
    <published>2018-02-26T14:18:36.000Z</published>
    <updated>2019-09-21T16:43:55.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="power-designer"><a href="#power-designer" class="headerlink" title="power designer"></a>power designer</h2><p>#特点#</p><ul><li>数据建模软件, 通过图形化界面展现建模</li><li>自动生成数据库建库语句</li><li>可选择不同类型数据建模</li></ul><p>#使用#</p><ol start="0"><li>Model types &gt; Physical Data Model &gt; Physical Diagram</li><li>选择数据库DBMS: mysql5.0</li><li>Column标签, 创建表 (可开启备注: 工具&gt;勾选Comment), 自定义字段信息</li><li>Columns标签, 主键自增设定(第一列箭头选中,双击,勾选indentity)</li><li>Preview标签, 预览建表语句(粘贴至SqlYog中执行, 建表即可)</li></ol><p>#关联关系#</p><ol><li>选中Referece工具, 指定关联关系即可.</li><li>自关联的情况下, 修改关联关系(ParentTableColumn:主键/ChildTableColumn:外键)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;power-designer&quot;&gt;&lt;a href=&quot;#power-designer&quot; class=&quot;headerlink&quot; title=&quot;power designer&quot;&gt;&lt;/a&gt;power designer&lt;/h2&gt;&lt;p&gt;#特点#&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据建模
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://github.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>08_project_Redis_持久化和集群</title>
    <link href="http://github.com/2018/02/24/08-project-Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/"/>
    <id>http://github.com/2018/02/24/08-project-Redis-持久化和集群/</id>
    <published>2018-02-24T11:47:28.000Z</published>
    <updated>2019-09-21T16:43:55.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis持久化</li><li>Redis集群</li></ul><hr><ul><li>Redis持久化</li></ul><ol><li><p>RDB模式<br>RDB, redis默认持久化方式. Redis默认每15分钟持久化一次, 将redis中内存数据写到.rdb磁盘文件中. 当redis节点宕机后, redis重启将从rdb文件中读取持久化数据, 恢复内存数据.</p></li><li><p>持久化策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#根据自身需要进行调整持久化策略</span><br><span class="line">#如果redis在900s(15分钟)/300s/60s执行了一次set操作, 则进行save 持久化操作1/10/10000次</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10 </span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li><li><p>手动持久化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在客户端手动输入指令: save或bgsave</span><br><span class="line">执行save指令时, 首先会开启一个线程, 主动执行持久化操作. 此时所有redis操作会阻塞, 直到持久化操作完成;</span><br><span class="line">执行bgsave指令时, 则不会造成阻塞现象. 但是会开启一个后台线程, 不能保证持久化操作立即执行.</span><br></pre></td></tr></table></figure></li><li><p>持久化文件和路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbfilename &quot;dump.rdb&quot;</span><br><span class="line">dir &quot;/usr/local/src/redis-3.2.8/sentinel&quot;</span><br><span class="line">//注意: </span><br><span class="line">//redis服务器关机后, 重启分片的每台redis数据都相同, 可能是因为持久化文件和路径相同导致的.</span><br><span class="line">//一般这里的配置, 尽量保持不同路径.</span><br></pre></td></tr></table></figure></li><li><p>AOF模式<br>AOF, 能够满足实时持久化的要求, 但是消耗较大的性能. 默认aof策略关闭. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#开启AOF</span><br><span class="line">appendonly yes (取消注释即可)</span><br><span class="line">//aof持久化策略开启后, rdb将不作用.</span><br></pre></td></tr></table></figure></li></ol><p>AOF持久化策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#appendsync always 实施备份, redis性能较低</span><br><span class="line">appendsync everysec 每秒持久化一次, redis效率略低于rdb</span><br><span class="line">#appendsync no 持久化时间交由系统决定, 不确定性强</span><br></pre></td></tr></table></figure><ol start="6"><li>redis内存策略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#redis中可以手动设置最大内存, 当内存达到存满现象时, redis会根据内存策略进行维护.</span><br><span class="line">#设置最大内存</span><br><span class="line">#maxmemory &lt;bytes&gt;</span><br><span class="line">#volatile-lru   从已经设置过期时间的数据中, 选择最少使用的删除</span><br><span class="line">#allkeys-lru    从全部数据中, 选择最少使用的删除</span><br><span class="line">#volatile-random 从已经设置过期时间的数据中, 随机删除</span><br><span class="line">#allkeys-ttl     从已经设置过期时间的数据中, 选择立马过期的数据进行释放操作</span><br><span class="line">#noeviction     默认redis内存策略. 不会删除数据, 进行redis读写操作时, 直接报错</span><br><span class="line"></span><br><span class="line">maxmemory-samples 1-10 设置10可靠性更好,但性能最低, 3速度快,但效果不理想, 默认5</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis集群</li></ul><ol><li>集群的优点:<br>a. 集群可实现内部的高可用;<br>b. 集群可通过多台主机共享内存;<br>c. 集群部署无需手动挂载, 程序自动维护;<br>d. 一般采用: 一主两从, 3主互指, 共9台服务器;</li><li>集群搭建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.mkdir /cluster/7000 ... /7008 创建多个目录 </span><br><span class="line">2. cp redis.conf /cluster/redis-7000.conf</span><br><span class="line">cp redis.conf /cluster/redis-7001.conf</span><br><span class="line">cp redis.conf /cluster/redis-7002.conf</span><br><span class="line">cp redis.conf /cluster/redis-7003.conf</span><br><span class="line">cp redis.conf /cluster/redis-7004.conf</span><br><span class="line">cp redis.conf /cluster/redis-7005.conf</span><br><span class="line">cp redis.conf /cluster/redis-7006.conf</span><br><span class="line">cp redis.conf /cluster/redis-7007.conf</span><br><span class="line">cp redis.conf /cluster/redis-7008.conf</span><br><span class="line">3. 修改配置 </span><br><span class="line">#bind 127.0.0.1   注释ip绑定</span><br><span class="line">protected-mode no 取消注释,关闭保护模式</span><br><span class="line">port 7000         修改端口7000-7008</span><br><span class="line">daemonize yes     开启后台启动</span><br><span class="line">pidfile /usr/local/src/redis-3.2.8/cluster/7000/redis_7000.pid 修改pid路径</span><br><span class="line">dbfilename dump-7000.rdb 修改持久化文件</span><br><span class="line">dir &quot;/user/local/src/redis-3.2.8/cluster/7000&quot; 修改持久化路径</span><br><span class="line">maxmemory-policy allkeys-lru 修改内存策略</span><br><span class="line">cluster-enabled yes          开启集群应用</span><br><span class="line">cluster-config-file nodes-7000.conf 修改集群节点信息</span><br><span class="line">4. 批量启动redis节点脚本</span><br><span class="line">#!/bin/sh</span><br><span class="line">redis-server 7000/redis-7000.conf &amp; </span><br><span class="line">redis-server 7001/redis-7001.conf &amp; </span><br><span class="line">redis-server 7002/redis-7002.conf &amp; </span><br><span class="line">redis-server 7003/redis-7003.conf &amp; </span><br><span class="line">redis-server 7004/redis-7004.conf &amp; </span><br><span class="line">redis-server 7005/redis-7005.conf &amp; </span><br><span class="line">redis-server 7006/redis-7006.conf &amp; </span><br><span class="line">redis-server 7007/redis-7007.conf &amp; </span><br><span class="line">redis-server 7008/redis-7008.conf &amp; </span><br><span class="line">5. 关闭防火墙</span><br><span class="line">sevice iptables stop </span><br><span class="line">6. 集群启动需要依赖的插件 ruby </span><br><span class="line">启动指令: </span><br><span class="line">./src/redis-trib.rb create --replicas 2 192.168.112.132:7000 192.168.112.132:7001 192.168.112.132:7002 192.168.112.132:7003 192.168.112.132:7004 192.168.112.132:7005 192.168.112.132:7006 192.168.112.132:7007 192.168.112.132:7008</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis集群到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jedis 配置--&gt;  </span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot; &gt;  </span><br><span class="line">     &lt;!--最大空闲数--&gt;  </span><br><span class="line">     &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt;  </span><br><span class="line">     &lt;!--最大建立连接等待时间--&gt;  </span><br><span class="line">     &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWait&#125;&quot; /&gt;  </span><br><span class="line">     &lt;!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个--&gt;  </span><br><span class="line">     &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot; /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;jedisCluster&quot;  class=&quot;cn.tinytiny.common.util.RedisCluster&quot; &gt;  </span><br><span class="line">     &lt;property name=&quot;addressConfig&quot;&gt;</span><br><span class="line">         &lt;value&gt;classpath:/properties/redis.properties&lt;/value&gt;  </span><br><span class="line">     &lt;/property&gt;  </span><br><span class="line">     &lt;property name=&quot;addressKeyPrefix&quot; value=&quot;redis.cluster&quot; /&gt; </span><br><span class="line">     &lt;!--  属性文件里  key的前缀 --&gt;  </span><br><span class="line">     &lt;property name=&quot;timeout&quot; value=&quot;$&#123;redis.timeout&#125;&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;maxRedirections&quot; value=&quot;6&quot; /&gt;  </span><br><span class="line">     &lt;property name=&quot;genericObjectPoolConfig&quot; ref=&quot;poolConfig&quot; /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis.minIdle=100</span><br><span class="line">redis.maxIdle=300 </span><br><span class="line">redis.maxTotal=1000 </span><br><span class="line">redis.timeout=5000 </span><br><span class="line">redis.maxWait=1000 </span><br><span class="line">redis.testOnBorrow=true </span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7000</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7001</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7002</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7003</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7004</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7005</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7006</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7007</span><br><span class="line">redis.cluster0.host.port=192.169.112.132:7008</span><br></pre></td></tr></table></figure></li><li><p>工具类RedisCluster </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RedisCluster implements FactoryBean&lt;JedisCluster&gt;,InitializingBean&#123;</span><br><span class="line">  //创建对象</span><br><span class="line">  public void aferPorpertiesSet() throws Exception&#123;</span><br><span class="line">    Set&lt;HostAndPort&gt; haps = this.parseHostAndPort();</span><br><span class="line">    jedisCluster = new JedisCluster(haps, timeout, maxRedirections);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //通过工厂创建对象</span><br><span class="line">  public JedisCluster getObject() throws Exception&#123;</span><br><span class="line">    return jedisCluster; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private JedisCluster jedisCluster;</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class RedisService&#123;</span><br><span class="line">   @Autowired</span><br><span class="line">   private JedisSentinelPool jedisSentinelPool;</span><br><span class="line">   </span><br><span class="line">   public void set(String key, String value)&#123;</span><br><span class="line">      Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">      jedis.set(key, value);</span><br><span class="line">      jedisSentinelPool.returnResource(jedis);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis持久化&lt;/li&gt;
&lt;li&gt;Redis集群&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Redis持久化&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>07_project_Redis_Sentinal_Shard</title>
    <link href="http://github.com/2018/02/22/07-project-Redis-Sentinal-Shard/"/>
    <id>http://github.com/2018/02/22/07-project-Redis-Sentinal-Shard/</id>
    <published>2018-02-22T15:46:25.000Z</published>
    <updated>2019-09-21T16:43:55.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis分片</li><li>Redis哈希一致性算法</li><li>Rdeis分片整合到Spring</li><li>Redis哨兵</li><li>Redis哨兵整合到Spring</li></ul><hr><ul><li>Redis分片</li></ul><ol><li><p>问题: 传统单台Redis, 如果出现宕机, 则直接影响业务.</p></li><li><p>解决: 采用分片模式,</p></li><li><p>Redis分片: 将一台redis扩展到多台redis. 共同为业务提供服务, 每台redisb缓存用户1/N的数据.</p></li><li><p>分片配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 配置文件</span><br><span class="line">cp redis.conf shard/redis-6379.conf</span><br><span class="line">cp redis.conf shard/redis-6380.conf</span><br><span class="line">cp redis.conf shard/redis-6381.conf</span><br><span class="line">2. 修改配置文件redis-*.conf</span><br><span class="line">port 6379</span><br><span class="line">port 6380</span><br><span class="line">port 6381</span><br><span class="line">3. 测试</span><br><span class="line">redis-server redis-6379.conf</span><br><span class="line">redis-server redis-6380.conf</span><br><span class="line">redis-server redis-6381.conf</span><br><span class="line">redis-cli -p 6379</span><br><span class="line">redis-cli -p 6380</span><br><span class="line">redis-cli -p 6381</span><br><span class="line">redis-cli -p 6379 shutdown</span><br><span class="line">redis-cli -p 6380 shutdown</span><br><span class="line">redis-cli -p 6381 shutdown</span><br></pre></td></tr></table></figure></li><li><p>分片测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">/**</span><br><span class="line"> * 定义分片的连接池</span><br><span class="line"> * 1.poolConfig 定义链接池的大小</span><br><span class="line"> * 2.shards     表示List&lt;Shardinfo&gt; 表示redis的信息的集合</span><br><span class="line"> * </span><br><span class="line"> * 注意:  </span><br><span class="line"> * Jedis 引入会有线程安全性问题.所以通过线程池的方式动态获取jedis链接.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//定义链接池大小</span><br><span class="line">JedisPoolConfig poolConfig = new JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxTotal(1000);</span><br><span class="line">poolConfig.setTestOnBorrow(true);//测试链接是否正常,如果不正常会重新获取</span><br><span class="line">poolConfig.setMaxIdle(30);</span><br><span class="line">//定义分片的list集合</span><br><span class="line">List&lt;JedisShardInfo&gt; shards = new ArrayList&lt;JedisShardInfo&gt;();</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6379));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6380));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6381));</span><br><span class="line">ShardedJedisPool jedisPool = new ShardedJedisPool(poolConfig, shards);</span><br><span class="line">//获取redis的链接</span><br><span class="line">ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">for(int i=1;i&lt;=20;i++)&#123;</span><br><span class="line">jedis.set(&quot;KEY&quot;+i, &quot;&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;redis插入操作成功!!!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>哈希一致性算法</li></ul><ol><li>根据节点信息进行哈希计算, 成功进行动态的节点挂载.</li><li>特点: 均衡性/单调性/分散性/负载性<br>均衡性: 尽可能地让数据均衡的落入缓存区;<br>单调性: 将数据动态地分配到相应的节点上, 有新节点引入时也能动态分配到新节点;<br>分散性: 分布式开发中, 一份缓存数据可能存放在多台服务器的不同位置;<br>负载性: 经过哈希计算后, 多份缓存数据可能会存放在一台服务器的同一个位置;</li></ol><ul><li>Redis分片整合到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过线程池的方式整合单台redis  --&gt;</span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">    &lt;!--定义连接的总数  --&gt;</span><br><span class="line">&lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot;/&gt;</span><br><span class="line">&lt;!--定义最大的空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最小空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">List&lt;JedisShardInfo&gt; shards = new ArrayList&lt;JedisShardInfo&gt;();</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6379));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6380));</span><br><span class="line">shards.add(new JedisShardInfo(&quot;192.168.126.142&quot;,6381));</span><br><span class="line">ShardedJedisPool jedisPool = </span><br><span class="line">new ShardedJedisPool(poolConfig, shards);</span><br><span class="line">  --&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--定义jediShardinfo对象  --&gt;</span><br><span class="line">  &lt;bean id=&quot;host1&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host1&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port1&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;bean id=&quot;host2&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host2&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port2&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;bean id=&quot;host3&quot; class=&quot;redis.clients.jedis.JedisShardInfo&quot;&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host3&#125;&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">  &lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port3&#125;&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;shardedJedisPool&quot; class=&quot;redis.clients.jedis.ShardedJedisPool&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; ref=&quot;poolConfig&quot; /&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=&quot;host1&quot;/&gt;</span><br><span class="line">&lt;ref bean=&quot;host2&quot;/&gt;</span><br><span class="line">&lt;ref bean=&quot;host3&quot;/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis.maxTotal=1000</span><br><span class="line">redis.maxIdle=30</span><br><span class="line">redis.minIdle=10</span><br><span class="line">redis.host1=192.168.112.132</span><br><span class="line">redis.port1=6379</span><br><span class="line">redis.host2=192.168.112.132</span><br><span class="line">redis.port2=6380</span><br><span class="line">redis.host3=192.168.112.132</span><br><span class="line">redis.port3=6381</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RedisService&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private ShardedJedisPool jedisPool;</span><br><span class="line">  </span><br><span class="line">  public void set(String key, String value)&#123;</span><br><span class="line">    ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">    jedis.set(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String get(String key)&#123;</span><br><span class="line">    ShardedJedis jedis = jedisPool.getResource();</span><br><span class="line">    return jedis.get(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务Service层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisService redisService;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis哨兵</li></ul><ol><li><p>搭建主从结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 复制redis.conf配置到 sentinel/redis-6379.conf (同上)</span><br><span class="line">/sentinel/redis-6379.conf</span><br><span class="line">/sentinel/redis-6380.conf</span><br><span class="line">/sentinel/redis-6381.conf</span><br><span class="line">2. 查看redis节点信息 info replication </span><br><span class="line">3. 实现挂载 SLAVEOF 192.168.112.132 6379 </span><br><span class="line">4. 查看redis节点信息, 挂载成功进行读写测试</span><br></pre></td></tr></table></figure></li><li><p>哨兵工作原理</p></li></ol><ul><li>用户连接时, 先通过哨兵获取主机master节点信息;</li><li>获取master节点信息后, 进行redis读写操作(set/get)</li><li>当master节点宕机时, 哨兵的心跳检测发现主机长时间无响应, 则哨兵进行推选机制, 推选新的主机master;</li><li>当新主机节点出现时, 其余全部主机都充当从机角色(即使先前主机上线了也是从机角色)</li></ul><ol start="3"><li>哨兵配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 关闭保护模式</span><br><span class="line">protected-mode no (取消注释即可)</span><br><span class="line">2. 配置哨兵监控</span><br><span class="line">sentinel monitor mymaster 192.168.112.132 6379 1 (推选票数超过1票即可当选) </span><br><span class="line">3. 心跳检测</span><br><span class="line">sentinel down-after-milliseconds mymaster 10000 (超过10s没有响应则开始推选新主机)</span><br><span class="line">4. 推选时间</span><br><span class="line">sentinel failover-timeout mymaster 20000 </span><br><span class="line">5. 启动一台哨兵(先启动一台,后续配置文件会生成新的内容)</span><br><span class="line">redis-sentinel sentinel-6379.conf</span><br><span class="line">6. 查看redis节点信息 info replication </span><br><span class="line">7. 复制编译后的配置sentinel-6379.conf</span><br><span class="line">cp sentinel-6379.conf sentinel-6380.conf</span><br><span class="line">cp sentinel-6379.conf sentinel-6381.conf</span><br><span class="line">8. 修改序列号(保证唯一性)</span><br><span class="line">sentinel myid 96080384973....3747df8777 </span><br><span class="line">//哨兵启动后会自动生成序列号, 序列号相同的哨兵不能相互通信.</span><br><span class="line">9. 如果部署三台哨兵, 则修改推选票数</span><br><span class="line">sentinel monitor mymaster 192.168.112.132 2 (超过半数即可)</span><br><span class="line">10. 测试哨兵, 尝试宕机一台redis, 查看哨兵是否推选新主机.</span><br><span class="line">注意: 配置主从, 不能对从机进行写库操作!!! 若要测试分片则需要重启redis开启分片.</span><br><span class="line">所以, 一般情况下, /shard 目录下保存分片配置 /sentinel 目录下保存哨兵配置</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis哨兵整合到Spring</li></ul><ol><li><p>applicationContext-redis.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;jedisSentinelPool&quot; class=&quot;redis.clients.jedis.JedisSentinelPool&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.masterName&#125;&quot;/&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot;&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host1&#125;&lt;/value&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host2&#125;&lt;/value&gt;</span><br><span class="line">&lt;value&gt;$&#123;redis.sentinel.host3&#125;&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>redis.properties配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis.masterName=mymaster</span><br><span class="line">redis.sentinel.host1=192.168.112.132:26379</span><br><span class="line">redis.sentinel.host2=192.168.112.132:26380</span><br><span class="line">redis.sentinel.host3=192.168.112.132:26381</span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//哨兵的测试</span><br><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">//创建哨兵的连接池</span><br><span class="line">//String类型表示的是哨兵的IP:端口号</span><br><span class="line">Set&lt;String&gt; sentinels = new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">String msg = new HostAndPort(&quot;192.168.112.132&quot;,26379).toString();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;通过对象输出哨兵的信息格式:&quot;+msg);</span><br><span class="line"></span><br><span class="line">//为set集合赋值 保存全部的哨兵信息</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26379).toString());</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26380).toString());</span><br><span class="line">sentinels.add(new HostAndPort(&quot;192.168.112.132&quot;,26381).toString());</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 参数介绍</span><br><span class="line"> * 1.masterName 表示链接哨兵的主机的名称一般是字符串mymaster</span><br><span class="line"> * 2.sentinels 哨兵的集合Set&lt;&gt;</span><br><span class="line"> */</span><br><span class="line">JedisSentinelPool sentinelPool = new JedisSentinelPool(&quot;mymaster&quot;, sentinels);</span><br><span class="line"></span><br><span class="line">Jedis jedis = sentinelPool.getResource();</span><br><span class="line"></span><br><span class="line">jedis.set(&quot;name&quot;, &quot;tom&quot;);</span><br><span class="line">System.out.println(&quot;获取数据:&quot;+jedis.get(&quot;name&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RedisService类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class RedisService&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private JedisSentinelPool jedisSentinelPool;</span><br><span class="line">  </span><br><span class="line">  public void set(String key, String value)&#123;</span><br><span class="line">    Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">    jedis.set(key, value);</span><br><span class="line">    jedisSentinelPool.returnResource(jedis); //返回到连接池中</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String get(String key)&#123;</span><br><span class="line">    Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line">    String result = jedis.get(key);</span><br><span class="line">    jedisSentinelPool.returnResource(jedis);</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis分片&lt;/li&gt;
&lt;li&gt;Redis哈希一致性算法&lt;/li&gt;
&lt;li&gt;Rdeis分片整合到Spring&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>06_project_Redis_Basic</title>
    <link href="http://github.com/2018/02/20/06-project-Redis-Basic/"/>
    <id>http://github.com/2018/02/20/06-project-Redis-Basic/</id>
    <published>2018-02-20T04:45:14.000Z</published>
    <updated>2019-09-21T16:43:55.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Redis</li><li>Redis安装</li><li>Spring整合Redis</li><li>Redis缓存实例的简单实现</li><li>Redis缓存实例的高级实现</li></ul><hr><ul><li>Redis </li></ul><ol><li>问题: 主从复制, 读写分离 在一定程度可以抗击高并发, 对于用户的大量”读”操作所引发的高并发问题, 需要得到解决.</li><li>解决: 缓存机制 </li><li>缓存机制: 降低客户端直接访问服务器的频次, 并且缓存中的数据与服务器数据库数据保持同步.</li><li>问题2: 引入缓存机制后, 缓存数据如何存储/如何持久化/如何数据同步/如何内存维护?</li><li>解决2: 缓存数据采用map集合保存(key值保持唯一性); 定时将缓存数据(内存中)保存到磁盘文件, 服务器宕机后重启, 优先读取磁盘持久化文件恢复缓存数据; 数据更新时, 及时维护缓存中的数据(业务代码中实现维护); 设定最大内存, 采用LRU算法删除最近最少使用的数据, 达到内存维护目的.</li><li>Redis: 一个开源的内存中的数据结构存储系统, 可作为数据库/缓存和消息中间件, 通过Sentinel哨兵和分区集群Cluster提供高可用.</li></ol><ul><li>Redis安装</li></ul><ol><li><p>上传redis-3.2.8.tar.gz</p></li><li><p>解压tar -xvf redis-3.2.8.tar.gz</p></li><li><p>cd redis-3.2.8</p></li><li><p>编译 make</p></li><li><p>安装 make install</p></li><li><p>启动 redis-server </p></li><li><p>进入客户端 redis-cli -p 6379 </p></li><li><p>退出客户端 exit </p></li><li><p>开启redis后台启动: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//配置redis.conf </span><br><span class="line">vim redis.conf </span><br><span class="line">#bind 127.0.0.1 注释该行</span><br><span class="line">protected-mode no 关闭保护模式</span><br><span class="line">daemonize yes 开启后台启动</span><br></pre></td></tr></table></figure></li><li><p>根据配置文件启动: redis-server redis.conf </p></li><li><p>关闭redis: kill -9 [pid进程] 或 redis-cli shutdown </p></li><li><p>redis指令集(参见文档)</p></li></ol><ul><li>Spring整合Redis</li></ul><ol><li><p>maven导入jar包依赖: jedis</p></li><li><p>添加spring配置文件applicationContext-redis.xml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Spring管理Jedis  </span><br><span class="line">name= &quot;构造参数的名称&quot;</span><br><span class="line">index=&quot;构造参数的位置&quot;</span><br><span class="line">总结:构造注入时使用index不用name.原因由于java只会维护形参的数据类型</span><br><span class="line">不会维护形参的名称.所有通过name属性进行构造注入时,可能会产生风险.</span><br><span class="line">所以建议使用index.</span><br><span class="line"></span><br><span class="line">addUser(int age,String sex)</span><br><span class="line">addUser(int arg0,String arg1) 由于没有导入源码</span><br><span class="line"></span><br><span class="line">关于type类型的说明:</span><br><span class="line">一般情况下,SPring会自动的维护参数类型,所以可以省略不写.</span><br><span class="line">但是如果类中的构造方法重载较多,出现参数个数相同的情况,</span><br><span class="line">需要指定参数类型.Spring根据特定的参数实现构造注入.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;jedis&quot; class=&quot;redis.clients.jedis.Jedis&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; value=&quot;$&#123;redis.host&#125;&quot; </span><br><span class="line">type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;1&quot; value=&quot;$&#123;redis.port&#125;&quot; </span><br><span class="line">type=&quot;int&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加redis.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">redis.host=192.168.112.132</span><br><span class="line">redis.port=6379</span><br><span class="line"></span><br><span class="line">//applicationContext.xml管理配置文件</span><br><span class="line">&lt;!-- 引入配置文件 --&gt;</span><br><span class="line">&lt;bean id=&quot;propertyPlaceholderConfigurer&quot;</span><br><span class="line">      class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">       &lt;list&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/jdbc.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/image.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/redis.properties&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;classpath:/properties/httpclient.properties&lt;/value&gt;</span><br><span class="line">       &lt;/list&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Redis缓存实例的简单实现</li></ul><ol><li>Service层缓存数据操作</li><li>注入@Autowried Jedis类</li><li>当查询信息时, 先查询缓存中是否存在(根据唯一key值查询)</li><li>若无缓存, 则查询后台数据库</li><li>将后台查询的结果, 转换成json, 缓存至redis</li><li>返回该次查询结果</li><li>若有缓存, 则将缓存数据转换成json, 返回结果.</li><li>注意: json字符串转化成POJO对象时, 调用其setter方法, 业务中, 需要对象的非属性值时, 添加相应的getter方法满足其业务需要. 此时需要添加@JsonIgnoreProperties(ignoreUnknown=true)注解, 忽略未知字段.</li></ol><ul><li>Redis缓存实例的高级实现</li></ul><ol><li><p>大致步骤同上</p></li><li><p>修改配置applicationContext-redis.xml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过线程池的方式整合单台redis  --&gt;</span><br><span class="line">&lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">&lt;!--定义连接的总数  --&gt;</span><br><span class="line">&lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最大的空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义最小空闲数量  --&gt;</span><br><span class="line">&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--通过工厂模式创建jedis连接 </span><br><span class="line">需要指定 host主机 和端口号</span><br><span class="line">引用连接池配置</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;bean id=&quot;jedisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;</span><br><span class="line">&lt;property name=&quot;hostName&quot; value=&quot;$&#123;redis.host&#125;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;port&quot; value=&quot;$&#123;redis.port&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--引入线程池的配置  --&gt;</span><br><span class="line">&lt;property name=&quot;poolConfig&quot; ref=&quot;poolConfig&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置SpringJedisTemplate spring操作redis的模板工具API  --&gt;</span><br><span class="line">&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;&gt;</span><br><span class="line">&lt;!--配置redis工厂  --&gt;</span><br><span class="line">&lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改redis.property</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis.host=192.168.126.142</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.maxTotal=1000</span><br><span class="line">redis.maxIdle=30</span><br><span class="line">redis.minIdle=10</span><br></pre></td></tr></table></figure></li><li><p>工具类的Service层, 注入RedisTemplate类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RedisService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">public void set(String key,String value)&#123;</span><br><span class="line">ValueOperations&lt;String, String&gt; operations = </span><br><span class="line">redisTemplate.opsForValue();</span><br><span class="line">//将数据写入redis中</span><br><span class="line">operations.set(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过key获取数据</span><br><span class="line">public String get(String key)&#123;</span><br><span class="line">ValueOperations&lt;String, String&gt; operations = </span><br><span class="line">redisTemplate.opsForValue();</span><br><span class="line">return operations.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 注意: jt-common 中的 RedisService类 编辑完后, 需要重新打包整个工程!!!</span><br></pre></td></tr></table></figure></li><li><p>业务模块Service层, 注入RedisSevice工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RedisService redisService;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">String jsonData = redisService.get(key);</span><br><span class="line">...</span><br><span class="line">//缓存数据</span><br><span class="line">redisService.set(key, resultJson); //resultJson为数据库查询后结果转换成的json串</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Redis安装&lt;/li&gt;
&lt;li&gt;Spring整合Redis&lt;/li&gt;
&lt;li&gt;Redis缓存实例
      
    
    </summary>
    
    
      <category term="redis" scheme="http://github.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>05_project_Mysql集群</title>
    <link href="http://github.com/2018/02/19/05-project-Mysql%E9%9B%86%E7%BE%A4/"/>
    <id>http://github.com/2018/02/19/05-project-Mysql集群/</id>
    <published>2018-02-19T14:13:50.000Z</published>
    <updated>2019-09-21T16:43:55.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>数据库高可用</li><li>数据库备份方式</li><li>数据库高可用的实现</li><li>Amoeba 数据库代理</li><li>双机热备模式</li><li>Mycat 部署</li></ul><hr><ul><li>数据库高可用</li></ul><ol><li>问题: 单台数据库不能很好地应对高并发场景</li><li>解决: 数据库主从复制, 读写分离</li><li>分析: 数据库主从复制,读写分离, 可以有效减轻数据库高并发访问的压力. 主库负责写入操作, 从库负责查询操作.(如何保证数据同步?)</li><li>主从复制原理:<br>当主库发生更新操作时, 会将更新操作写入二进制日志文件中(Binarylog).从库的IO线程实时监控主库的二进制日志文件, 查看是否发生变化. 若变化, 则读取变化的日志文件, 写入中继日志文件中(Relaylog).从库的SQL线程监控中继日志文件, 将新增日志文件通过sql语句实现数据库的更新.</li></ol><ul><li>数库库备份方式</li></ul><ol><li>冷备份: 数据库在固定时间内, 将数据库文件实现转储保存. </li><li>热备份: 当主库做更新操作时, 从库会立即执行更新操作, 达到实时备份. (主从复制原理)</li></ol><ul><li>数据库高可用的实现<br>主从复制的实现:</li></ul><ol><li>为数据库创建ID标识</li><li>开启二进制日志文件</li><li>查询二进制日志状态(文件名/文件路径)</li><li>从库配置(指定主库位置:ip/port=3306/username/password/二进制文件名和路径O)</li><li>开启主从模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 配置id/日志/查看状态 如下操作:</span><br><span class="line"></span><br><span class="line">1. 修改mysql配置 vim /etc/my.cnf</span><br><span class="line">2. 配置id 和文件名</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">3. 重启mysql: service mysql restart</span><br><span class="line">4. 检查日志文件是否开启: cd /var/lib/mysql </span><br><span class="line">是否有mysql-bin.000001 和 mysql-bin.index </span><br><span class="line">5. SQLYog中(或mysql中), 查看数据库日志状态: show master status</span><br><span class="line">6. 重复1~5步, 配置从库(id=2即可)</span><br><span class="line"></span><br><span class="line">// 配置主从</span><br><span class="line">1. 只需在从库中配置如下</span><br><span class="line">change master to master_host=&quot;192.168.112.132&quot;,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=&quot;root&quot;,</span><br><span class="line">master_password=&quot;root&quot;,</span><br><span class="line">master_log_file=&quot;mysql-bin.000001&quot;,</span><br><span class="line">master_log_pos=120</span><br><span class="line">2. 注意上述master_log_file/master_log_pos 为主库的二进制文件状态</span><br><span class="line">3. 开启主从服务: start slave </span><br><span class="line">4. 检查主从状态: show slave status </span><br><span class="line">5. 测试主从: 修改主库信息(注意, 不能修改从库信息)</span><br><span class="line"></span><br><span class="line">//注意防火墙问题, 二进制文件会随着更新操作依次累加, 注意配置是否正确.</span><br></pre></td></tr></table></figure></li></ol><ul><li>Amoeba 数据库代理</li></ul><ol><li>数据库代理: 以mysql为底层数据存储, 集中处理应用的请求, 实现负载均衡, 读写分离, 高可用等要求. </li><li>Amoeba 搭建: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1. java -version</span><br><span class="line">2. 上传Amoeba</span><br><span class="line">3. tar -xvf amoeba-mysql-3.0.4.tar.gz</span><br><span class="line">4. cd amoeba-mysql-3.0.4</span><br><span class="line">5. 修改配置 dbServers.xml</span><br><span class="line">添加用户名/密码</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">指定主机服务</span><br><span class="line">&lt;dbServer name=&quot;master&quot; parent=&quot;abstractServer&quot;&gt;</span><br><span class="line">&lt;factoryConfig&gt;</span><br><span class="line">  &lt;property name=&quot;ipAddress&quot;&gt;192.168.112.132&lt;/property&gt;</span><br><span class="line">&lt;/factoryConfig&gt;</span><br><span class="line">&lt;/dbServer&gt;</span><br><span class="line">指定从机服务</span><br><span class="line">&lt;dbServer name=&quot;slave01&quot; parent=&quot;abstractServer&quot;&gt;</span><br><span class="line">&lt;factoryConfig&gt;</span><br><span class="line">  &lt;property name=&quot;ipAddress&quot;&gt;192.168.112.132&lt;/property&gt;</span><br><span class="line">&lt;/factoryConfig&gt;</span><br><span class="line">&lt;/dbServer&gt;</span><br><span class="line">&lt;dbServer name=&quot;slave02&quot; parent=&quot;abstractServer&quot;&gt;</span><br><span class="line">&lt;factoryConfig&gt;</span><br><span class="line">  &lt;property name=&quot;ipAddress&quot;&gt;192.168.112.132&lt;/property&gt;</span><br><span class="line">&lt;/factoryConfig&gt;</span><br><span class="line">&lt;/dbServer&gt;</span><br><span class="line">配置读取连接池</span><br><span class="line">&lt;dbServer name=&quot;multiPool&quot; virtual=&quot;true&quot;&gt;</span><br><span class="line">&lt;poolConfig class=&quot;com.meidusa.amoeab.server.MultipleServerPool&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;loadbalance&quot;&gt;1&lt;/property&gt;</span><br><span class="line">  &lt;property name=&quot;poolNames&quot;&gt;slave01,master,slave01&lt;/property&gt;</span><br><span class="line">&lt;/poolConfig&gt;</span><br><span class="line">&lt;/dbServer&gt;</span><br><span class="line">6. 配置amoeba.xml </span><br><span class="line">修改登陆用户名密码</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">实现读写分离</span><br><span class="line">&lt;property name=&quot;defaultPool&quot;&gt;master&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;writerPool&quot;&gt;master&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;readPool&quot;&gt;multiPool&lt;/property&gt;</span><br><span class="line">7. 修改jvm 内存</span><br><span class="line">JVM_OPTIONS=&quot;-server -Xms512m -Xmx1024m -Xss256k -XX:PermSize=16m -XX:MaxPermSize=96m&quot;</span><br><span class="line">8. 启动Amoeba</span><br><span class="line">service iptables stop</span><br><span class="line">cd amoeba-mysql-3.0.4/bin</span><br><span class="line">./launcher </span><br><span class="line">9. 测试连接SQLyog, 查看主从数据库信息</span><br></pre></td></tr></table></figure></li></ol><ul><li>双机热备模式</li></ul><ol><li>问题: 实现数据库主从复制后, 主库宕机后, 整个服务将会停止.  </li><li>问题2: 此时, 数据同步性问题出现. 主库宕机, 从机继续进行读写操作. 主库成功重启后, 数据库信息不同步如何处理?</li><li>解决: 双机热备用.</li><li>双机热备用: 实现数据库高可用, 当主机宕机, mycat代理服务器实现高可用自动切换到从机. 提供用户的读写操作, 将更新操作写入二进制日志文件中, 主机重启后自动同步二进制日志信息, 同步更新数据, 完成同步.</li></ol><ul><li>Mycat部署</li></ul><ol><li><p>java -version </p></li><li><p>上传mycat-server-1.7.0-xxx.tar.gz</p></li><li><p>tar -xvf mycat-server-1.7.0-xxx.tar.gz</p></li><li><p>配置Server.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;user name=&quot;root&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">  &lt;property name=&quot;schemas&quot;&gt;jtdb&lt;/property&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置schmea.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--name属性是自定义的  dataNode表示数据库的节点信息--&gt;</span><br><span class="line">&lt;schema name=&quot;jtdb&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;jtdb&quot;&gt;&lt;/schema&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义节点名称/节点主机/数据名称--&gt;</span><br><span class="line">&lt;dataNode name=&quot;jtdb&quot; dataHost=&quot;localhost1&quot; database=&quot;jtdb&quot; /&gt;</span><br><span class="line">&lt;!--参数介绍--&gt;</span><br><span class="line">&lt;!--balance 0表示所有的读操作都会发往writeHost主机 --&gt;  </span><br><span class="line">&lt;!--1表示所有的读操作发往readHost和闲置的主节点中--&gt;</span><br><span class="line">&lt;!--writeType=0 所有的写操作都发往第一个writeHost主机--&gt;</span><br><span class="line">&lt;!--writeType=1 所有的写操作随机发往writeHost中--&gt;</span><br><span class="line">&lt;!--dbType 表示数据库类型 mysql/oracle--&gt;</span><br><span class="line">&lt;!--dbDriver=&quot;native&quot;  固定参数 不变--&gt;</span><br><span class="line">&lt;!--switchType=-1 表示不自动切换, 主机宕机后不会自动切换从节点--&gt;</span><br><span class="line">&lt;!--switchType=1  表示会自动切换(默认值)如果第一个主节点宕机后,Mycat会进行3次心跳检测,如果3次都没有响应,则会自动切换到第二个主节点--&gt;</span><br><span class="line">&lt;!--并且会更新/conf/dnindex.properties文件的主节点信息 localhost1=0 表示第一个节点.该文件不要随意修改否则会出现大问题--&gt;</span><br><span class="line">&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;</span><br><span class="line">  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">&lt;heartbeat&gt;select 1&lt;/heartbeat&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--配置第一台主机主要进行写库操作,在默认的条件下Mycat主要操作第一台主机在第一台主机中已经实现了读写分离.因为默认写操作会发往137的数据库.读的操作默认发往141.如果从节点比较忙,则主节点分担部分压力.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.126.137:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt;</span><br><span class="line">&lt;!--读数据库--&gt;</span><br><span class="line">&lt;readHost host=&quot;hostS1&quot; url=&quot;192.168.126.141:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt;</span><br><span class="line">&lt;/writeHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义第二台主机 由于数据库内部已经实现了双机热备.--&gt;</span><br><span class="line">&lt;!--Mycat实现高可用.当第一个主机137宕机后.mycat会自动发出心跳检测.检测3次.--&gt;</span><br><span class="line">&lt;!--如果主机137没有给Mycat响应则判断主机死亡.则回启东第二台主机继续为用户提供服务.--&gt;</span><br><span class="line">&lt;!--如果137主机恢复之后则处于等待状态.如果141宕机则137再次持续为用户提供服务.--&gt;</span><br><span class="line">&lt;!--前提:实现双机热备.--&gt;</span><br><span class="line"></span><br><span class="line">&lt;writeHost host=&quot;hostM2&quot; url=&quot;192.168.126.141:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt;</span><br><span class="line">&lt;readHost host=&quot;hostS1&quot; url=&quot;192.168.126.137:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt;</span><br><span class="line">&lt;/writeHost&gt;</span><br><span class="line">&lt;/dataHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动mycat:<br>./mycat start<br>./mycat stop</p></li><li><p>测试mycat:<br>关闭主库mysql, 从库更新数据, 重启主库, 查看数据是否同步.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库高可用&lt;/li&gt;
&lt;li&gt;数据库备份方式&lt;/li&gt;
&lt;li&gt;数据库高可用的实现&lt;/li&gt;
&lt;li&gt;Amoeba 数据库代理
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://github.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>04_project_Linux下软件安装与配置</title>
    <link href="http://github.com/2018/02/17/04-project-Linux%E4%B8%8B%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://github.com/2018/02/17/04-project-Linux下软件安装与配置/</id>
    <published>2018-02-17T04:12:55.000Z</published>
    <updated>2019-09-21T16:43:55.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>虚拟机配置</li><li>linux网络配置</li><li>linux jdk配置</li><li>linux tomcat配置</li><li>linux mysql配置</li></ul><hr><ul><li>虚拟机配置</li></ul><ol><li>解压镜像文件(VMware打开vmx文件即可)</li><li>克隆linux系统(管理&gt;克隆)</li></ol><ul><li>linux网络配置</li></ul><ol start="0"><li>ifconfig命令查看ip信息.</li><li>桥接模式: 当前局域网内, 独占一个ip与其他主机形成网上邻居.</li><li>NAT模式: 在主机内部形成新的网络结构(局域网).</li><li>固定ip(vpnconfigration&gt;network connection&gt;ipv4(method=manual)&gt;address&gt;apply)</li><li>XShell连接linux主机(注意:net8网络适配器正常)</li><li>创建快照(方便版本回滚)</li></ol><ul><li>jdk配置</li></ul><ol><li><p>Xftp上传jdk安装包(cd /usr/local/src/java)</p></li><li><p>解压tar -xvf jdk1.7.xxx.tar.gz </p></li><li><p>配置环境变量 vim /etc/profile </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set_java_env</span><br><span class="line">JAVA_HOME=/usr/local/src/java/jdk1.7.0.51</span><br><span class="line">JACA_BIN=/usr/local/src/java/jdk1.7.0.51/bin</span><br><span class="line">PATH=$JAVA_BIN:$PATH</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JAVA_HOME JAVA_BIN PATH CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>配置生效 source /etc/profile</p></li><li><p>测试java -version</p></li></ol><ul><li>linux tomcat配置</li></ul><ol><li>Xftp上传tomcat安装包(cd /usr/local/src/)</li><li>解压tar -xvf apache-tomcat-7.0.55.tar.gz </li><li>移动并修改文件夹 mv apache-tomcat-7.0.55 tomcat-8091</li><li>启动tomcat服务器 cd tomcat-8091/bin &amp; sh startup.sh</li><li>停止tomcat服务器 sh shutdown.sh </li><li>查看日志 cat ../logs/catalina.out </li><li>开启访问端口 iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</li><li>关闭防火墙 service iptables stop </li><li>删除原有ROOT文件, 部署已打包项目war包文件(/webapps/ROOT)</li><li>重启tomcat</li><li>注意: 开启mysql访问权限. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant [权限] on [数据库].[表名] to [&apos;用户名&apos;]@[&apos;web服务器ip&apos;] indentified by [&apos;密码&apos;]</span><br><span class="line">grant all on *.* to &apos;root&apos;@&apos;%&apos; indentified by &apos;root&apos;</span><br><span class="line">开启所有权限 在所有库的所有表上 root用户在任意ip上以root密码都可访问.</span><br></pre></td></tr></table></figure></li></ol><ul><li>linux mysql配置</li></ul><ol><li>Xftp上传mysql安装包 </li><li>解压tar -xvf mysql-xxx-xxx.tar.gz</li><li>依次按顺序安装(debuginfo/shared/client/server): rpm -ivh 文件名</li><li>启动mysql数据库 service mysql start</li><li>设置用户名和密码 mysqladmin -u ‘root’ password ‘root’</li><li>登陆 myslq -u root -p </li><li>SqlYog中导出数据库文件jtdb.sql </li><li>mysql中导入数据 第一步: clear 第二步: source jtdb.sql </li><li>查询数据库 show schemas;</li><li>SqlYog连接远程mysql数据库(测试成功即可) </li><li>注意: 关闭防火墙和开启mysql访问权限(同上tomcat配置操作)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">grant all on *.* to &apos;root&apos;@&apos;%&apos; indentified by &apos;root&apos;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;虚拟机配置&lt;/li&gt;
&lt;li&gt;linux网络配置&lt;/li&gt;
&lt;li&gt;linux jdk配置&lt;/li&gt;
&lt;li&gt;linux tom
      
    
    </summary>
    
    
      <category term="linux" scheme="http://github.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>03_project_Nginx配置文件</title>
    <link href="http://github.com/2018/02/15/03-project-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://github.com/2018/02/15/03-project-Nginx配置文件/</id>
    <published>2018-02-15T05:41:11.000Z</published>
    <updated>2019-09-21T16:43:55.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>nginx配置</li><li>main模块</li><li>events模块</li><li>http模块</li><li>server模块</li><li>location模块</li><li>upstream模块</li></ul><p>–</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>项目中使用最多的三个核心功能: 反向代理/负载均衡/静态服务器;<br>有关配置主要集中在nginx.conf配置文件中:</p><ul><li>main:   全局配置.(用户组|pid|日志|配置引入|worker_process)</li><li>events: 工作模式配置(连接数|事件驱动模式|连接请求)</li><li>http:   http协议配置(server|location|upstream|)</li><li>server: 代理服务器访问配置(虚拟主机参数配置)</li><li>location:路由配置(页面处理请求)</li><li>upstream:负载均衡配置</li></ul><h2 id="main模块"><a href="#main模块" class="headerlink" title="main模块:"></a>main模块:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># user nobody nobody;</span><br><span class="line">worker_processes 2;</span><br><span class="line"># error_log logs/error.log</span><br><span class="line"># error_log logs/error.log notice</span><br><span class="line"># error_log logs/error.log info</span><br><span class="line"># pid logs/nginx.pid</span><br><span class="line">worker_rlimit_nofile 1024;</span><br><span class="line"></span><br><span class="line"># user              指定nginx worker进程运行用户及用户组</span><br><span class="line"># worker_processes  指定nginx 开启子进程数量(运行过程中监控每个进程消耗内存(一般几M~几十M不等)根据实际情况进行调整，通常数量是CPU内核数量的整数倍)</span><br><span class="line"># error_log         指定错误日志存放位置及输出级别(debug|info|notice|warn|error|crit)</span><br><span class="line"># pid               指定进程id的存放位置</span><br><span class="line"># worker_rlimit_nofile 指定一个进程可以打开最多文件数量的描述</span><br></pre></td></tr></table></figure><h2 id="event模块"><a href="#event模块" class="headerlink" title="event模块:"></a>event模块:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">event &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">    multi_accept on;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># worker_connections  指定最大可以同时接收的连接数量(注意: 最大连接数量和worker_processes共同决定, 理论上每台nginx服务器的最大连接数为。worker_processes * worker_connections)</span><br><span class="line"># multi_accept        指定nginx在收到一个新连接通知后, 尽可能多的接收更多连接</span><br><span class="line"># use epoll           指定线程轮询(linux2.6+:epoll/BSD:Kqueue)</span><br></pre></td></tr></table></figure><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块:"></a>http模块:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ##</span><br><span class="line">    # 基础配置</span><br><span class="line">    # sendfile on: 将文件的回写过程交给数据缓存区完成,而不是放在应用中完成,有利于提升性能</span><br><span class="line">    # tcp_nopush on: 让nginx在一个数据包中发送所有的头文件,而不是一个个单独发送</span><br><span class="line">    # tcp_nodelay on: 让nginx不要缓存数据,而是一段段发送. 如果数据的传输有实时性要求可以配置它,发送完一段数据就立刻得到返回值.</span><br><span class="line">    # keepalive_timeout 10: 给客户端分配连接超时时间,服务器在这个时间之后关闭连接. 一般设置时间较短,nginx工作持续性更好</span><br><span class="line">    # client_header_timeout 10: 设置请求头超时时间</span><br><span class="line">    # client_body_timeout 10: 设置请求实体超时时间</span><br><span class="line">    # client_header_buffer_size 4K: 客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小.</span><br><span class="line">    # send_timeout 10: 设置客户端响应超时时间, 客户端两次操作间隔超过这个时间, 服务器关闭连接</span><br><span class="line">    # limit_conn_zone $binary_remote_addr zone=addr:5m 设置用于保存各种key的共享内存参数</span><br><span class="line">    # limit_conn addr 100: 给定的key设置最大连接数</span><br><span class="line">    # server_tokens: 错误页面关闭nginx版本提示, 提升网站安全性</span><br><span class="line">    # include /etc/nginx/mime.types: 指定在当前文件中包含另一个文件的指令</span><br><span class="line">    # default_type application/octet-stream: 指定more处理的文件类型可以是二进制</span><br><span class="line">    # type_hash_max_size 2048: 混淆数据, 影响三列冲突率, 值越大消耗内存越多, 散列key冲突率会降低, 检索速度更快; </span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    # server_tokens off;</span><br><span class="line"></span><br><span class="line">    # server_names_hash_bucket_size 64;</span><br><span class="line">    # server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # SSL证书配置</span><br><span class="line">    # ssl_protocols: 开启特定加密协议(nginx在1.1.13和1.0.12版本后默认是ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2，TLSv1.1与TLSv1.2要确保OpenSSL &gt;= 1.0.1 ，SSLv3 现在还有很多地方在用但有不少被攻击的漏洞)</span><br><span class="line">    # ssl_prefer_server_ciphers on:设置协商加密算法, 优先使用服务端的加密套件,而不是客户端的加密套件</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # 日志配置</span><br><span class="line">    # access_log logs/access.log: 设置存储访问记录的日志</span><br><span class="line">    # error_log logs/error.log: 设置存储错误记录的日志</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log;</span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # Gzip 压缩配置</span><br><span class="line">    # gzip on: 采用gzip压缩形式发送数据.减少发送的数据量</span><br><span class="line">    # gzip_disable: 指定客户端禁用gzip功能.(设置成IE6或者更低版本以使我们的方案能够广泛兼容)</span><br><span class="line">    # gzip_proxied: 允许或禁止压缩基于请求和响应的响应流.(设置成any,意味着见鬼压缩所有的请求)</span><br><span class="line">    # gzip_min_length: 设置对数据启用压缩的最小字节数.(如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度.)</span><br><span class="line">    # gizp_comp_level: 设置数据的压缩等级.等级可以1-9之间任意数值.(9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置.)</span><br><span class="line">    # gzip_type: 设置需要压缩的数据格式.</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">    # gzip_vary on;</span><br><span class="line">    # gzip_proxied any;</span><br><span class="line">    # gzip_comp_level 6;</span><br><span class="line">    # gzip_buffers 16 8k;</span><br><span class="line">    # gzip_http_version 1.1;</span><br><span class="line">    # gzip_types text/plain text/css application/json application/javascript</span><br><span class="line"> text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # 文件缓存配置</span><br><span class="line">    # open_file_cache: 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</span><br><span class="line">    # open_file_cache_valid: 在open_file_cache中指定检测正确信息的间隔时间。</span><br><span class="line">    # open_file_cache_min_uses: 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</span><br><span class="line">    # open_file_cache_errors: 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # 虚拟主机配置</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="server模块-http模块的子模块"><a href="#server模块-http模块的子模块" class="headerlink" title="server模块:(http模块的子模块)"></a>server模块:(http模块的子模块)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen        80;</span><br><span class="line">    server_name localhost    192.168.1.100;</span><br><span class="line">    root        /nginx/www;</span><br><span class="line">    index        index.php index.html index.html;</span><br><span class="line">    charset        utf-8;</span><br><span class="line">    access_log    logs/access.log;</span><br><span class="line">    error_log    logs/error.log;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    # server: 一个虚拟主机的配置, 一个http模块中可以配置多个server</span><br><span class="line">    # listen: 监听端口</span><br><span class="line">    # server_name: 指定ip地址或域名, 多个配置之间用空格分隔</span><br><span class="line">    # root: 表示整个server虚拟主机内的根目录, 所有当前主机中web项目的根目录</span><br><span class="line">    # index: 用户访问web网站的全局首页</span><br><span class="line">    # charset: 设置www/路径中配置的页面的默认编码格式</span><br><span class="line">    # access_log: 指定虚拟主机服务器中访问记录日志存放路径</span><br><span class="line">    # error_log:  指定虚拟主机服务器中访问错误日志存放路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="location模块"><a href="#location模块" class="headerlink" title="location模块"></a>location模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root    /nginx/www;</span><br><span class="line">    index    index.php index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    # location: 主要用于配置路由访问信息</span><br><span class="line">    # location /: 表示匹配访问根目录</span><br><span class="line">    # location ~* \.(mp3|exe)$ 对以“mp3或exe”结尾的地址进行负载均衡</span><br><span class="line">    # root: 指定访问根目录时, 访问虚拟主机的web目录</span><br><span class="line">    # index: 在不指定范文具体资源时, 默认展示的资源文件列表</span><br><span class="line"></span><br><span class="line">1)反向代理配置方式: 通过proxy_set配置让客户端访问透明化</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://localhost:8888;</span><br><span class="line">    proxy_set_header X-real-ip $remote_addr;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://local:8888;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    # 目的是将代理服务器收到的用户的信息传到真实服务器上</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2)uwsgi配置方式: </span><br><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass localhost:8888</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="upstream模块"><a href="#upstream模块" class="headerlink" title="upstream模块:"></a>upstream模块:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upstream name &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.1.100:8000;</span><br><span class="line">    server 192.168.1.100:8001 down;</span><br><span class="line">    server 192.168.1.100:8002 max_fails=3;</span><br><span class="line">    server 192.168.1.100:8003 fail_timeout=20s;</span><br><span class="line">    server 192.168.1.100:8004 max_fails=3 fail_timeout=20s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    # upstream: 主要负责负载均衡, 默认通过轮询调度方式分发请求到后端服务器</span><br><span class="line">    # ip_hash: 指定请求调度算法.(默认weight权重轮询调度,可指定)</span><br><span class="line">    # server host:port: 指定分发服务器的列表配置</span><br><span class="line">    # --down: 表示主机暂停服务</span><br><span class="line">    # --max_fails: 表示失败最大次数, 超过失败最大次数暂停服务</span><br><span class="line">    # --fail_timeout: 表示请求失败, 暂停指定的时间后重新发起请求</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Ngx_http_core_module模块支持内置变量，他们的名字和apache的内置变量是一致的。</p><p>首先是说明客户请求title中的行，例如$http_user_agent,$http_cookie等等。</p><p>此外还有其它的一些变量: </p><p>$args此变量与请求行中的参数相等<br>$content_length等于请求行的“Content_Length”的值。<br>$content_type等同与请求头部的”Content_Type”的值<br>$document_root等同于当前请求的root指令指定的值<br>$document_uri与$uri一样<br>$host与请求头部中“Host”行指定的值或是request到达的server的名字（没有Host行）一样<br>$limit_rate允许限制的连接速率<br>$request_method等同于request的method，通常是“GET”或“POST”<br>$remote_addr客户端ip<br>$remote_port客户端port<br>$remote_user等同于用户名，由ngx_http_auth_basic_module认证<br>$request_filename当前请求的文件的路径名，由root或alias和URI request组合而成<br>$request_body_file<br>$request_uri含有参数的完整的初始URI<br>$query_string与$args一样<br>$sheeme http模式（http,https）尽在要求是评估例如<br>Rewrite ^(.+)$ $sheme://example.com$; Redirect;<br>$server_protocol等同于request的协议，使用“HTTP/或“HTTP/<br>$server_addr request到达的server的ip，一般获得此变量的值的目的是进行系统调用。为了避免系统调用，有必要在listen指令中指明ip，并使用bind参数。<br>$server_name请求到达的服务器名<br>$server_port请求到达的服务器的端口号<br>$uri等同于当前request中的URI，可不同于初始值，例如内部重定向时或使用index</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nginx配置&lt;/li&gt;
&lt;li&gt;main模块&lt;/li&gt;
&lt;li&gt;events模块&lt;/li&gt;
&lt;li&gt;http模块&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://github.com/categories/nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>02_project_Nginx</title>
    <link href="http://github.com/2018/02/14/02-project-Nginx/"/>
    <id>http://github.com/2018/02/14/02-project-Nginx/</id>
    <published>2018-02-14T10:29:46.000Z</published>
    <updated>2019-09-21T16:43:55.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>nginx</li><li>nginx部署</li><li>nginx实现页面跳转</li><li>nginx实现集群</li><li>nginx实现项目部署的步骤</li></ul><hr><ul><li>nginx</li></ul><ol><li><p>反向代理: 用户根据虚拟路径请求静态资源, 经过nginx处理, 将请求转发到真实的磁盘路径下, 获取静态资源, 再由nginx将结果返回客户端.</p></li><li><p>nginx: 高性能反向代理服务器.</p></li></ol><ul><li>nginx部署</li></ul><ol><li><p>下载安装包, 导入本地安装路径(路径避免空格和中文)</p></li><li><p>启动服务器, 管理员身份运行或命令行运行</p></li><li><p>命令行运行: start nginx </p></li><li><p>其他命令: nginx -s stop停止 (nginx -s reload重启)</p></li><li><p>nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#定义图片服务器  root表示转向文件夹</span><br><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">    server_name  image.jt.com;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">           root   E:\jt-upload;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改host文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 image.jt.com</span><br></pre></td></tr></table></figure></li><li><p>流程分析:<br>访问image.jt.com 经过hosts文件, 别转向到本地localhost, 请求被本地nginx服务器反向代理到真实路径E:\jt-upload下, 获取静态资源后, 经由nginx返回结果给客户端. </p></li></ol><ul><li>nginx实现页面跳转</li></ul><ol><li><p>nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">listen80;</span><br><span class="line">server_namemanage.jt.com;</span><br><span class="line"></span><br><span class="line">#页面转向 转向的是一个具体的url </span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://localhost:8091;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hosts文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 manage.jt.com</span><br></pre></td></tr></table></figure></li><li><p>nginx -s reload重启即可</p></li></ol><ul><li>nginx实现集群<br>通过配置集群的方式, 解决高并发问题.</li></ul><ol><li><p>nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#实现Nginx的负载均衡</span><br><span class="line">upstream jt&#123;</span><br><span class="line">server 127.0.0.1:8091;</span><br><span class="line">server 127.0.0.1:8092;</span><br><span class="line">server 127.0.0.1:8093;</span><br><span class="line">&#125;</span><br><span class="line">#后台管理系统  nginx负责监听浏览器.拦截具体的url实现页面转向</span><br><span class="line">server &#123; </span><br><span class="line">listen80;</span><br><span class="line">server_namemanage.jt.com;</span><br><span class="line"></span><br><span class="line">#页面转向 转向的是一个具体的url  表示upstream名称</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://jt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx轮询策略<br>每台服务根据顺序依次访问.并且它是nginx中默认的负载均衡的方式.</p></li><li><p>nginx权重方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#实现Nginx的负载均衡</span><br><span class="line">upstream jt&#123;</span><br><span class="line">server 127.0.0.1:8091 weight=6;</span><br><span class="line">server 127.0.0.1:8092 weight=3;</span><br><span class="line">server 127.0.0.1:8093 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx配置IP_HASH<br>需求:如何实现Session共享????<br>问题描述:当用户登陆一台服务器时,在服务器内部保存了用户的Session信息.如果用户再次发出请求后,将不能保证用户访问的依然是登陆过的服务器.这时需要用户再次登录.这种问题如何解决????<br>总结问题:由于用户访问的服务器不固定,导致Session不能共享.<br>解决办法:通过IP_Hash<br>说明:通过用户的IP地址,在nginx中内部进行哈希值运行.最终绑定唯一的一台服务器.<br>总结:<br>通过IP_hash的计算,将服务器与用户的IP地址进行了绑定.实现了Session的共享.———Session黏着!<br>通过IP_hash能够解决简单的Session共享问题.大型公司不会使用该方式(新SSO)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#实现Nginx的负载均衡</span><br><span class="line">upstream jt&#123;</span><br><span class="line">    #配置ip_hash, 权重和轮询将失效</span><br><span class="line">    ip_hash;</span><br><span class="line">server 127.0.0.1:8091 weight=6;</span><br><span class="line">server 127.0.0.1:8092 weight=3;</span><br><span class="line">server 127.0.0.1:8093 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx备用机制<br>如果nginx中的服务器都处于满负荷状态.无暇顾及新的连接.这时备用机才会生效.<br>如果主服务器.处理完请求后处于正常状态.这时备用机处于等待状态.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#实现Nginx的负载均衡</span><br><span class="line">upstream jt&#123;</span><br><span class="line">server 127.0.0.1:8091 weight=6;</span><br><span class="line">server 127.0.0.1:8092 weight=3;</span><br><span class="line">server 127.0.0.1:8093 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx实现项目部署的步骤:<br>通过nginx下线服务器. 打包成功后, 再次部署服务器即可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#实现Nginx的负载均衡</span><br><span class="line">upstream jt&#123;</span><br><span class="line">server 127.0.0.1:8091 weight=6 down;</span><br><span class="line">server 127.0.0.1:8092 weight=3;</span><br><span class="line">server 127.0.0.1:8093 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">#配置需要下线的服务器down, 重启nginx, 请求将不会发往改服务器, 部署新的项目后, 重新配置(去除down)重启nginx, 部署成功:)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;nginx部署&lt;/li&gt;
&lt;li&gt;nginx实现页面跳转&lt;/li&gt;
&lt;li&gt;nginx实现集群&lt;/
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://github.com/categories/nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>01_project_通用Mapper</title>
    <link href="http://github.com/2018/02/10/01-project-%E9%80%9A%E7%94%A8Mapper/"/>
    <id>http://github.com/2018/02/10/01-project-通用Mapper/</id>
    <published>2018-02-10T08:07:59.000Z</published>
    <updated>2019-09-21T16:43:55.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>通用Mapper</li><li>JPA概念</li><li>Haibernate实现JPA</li><li>Mybatis实现JPA</li><li>通用Mapper的业务实现</li></ul><hr><ul><li><p>通用Mapper<br>使用通用mapper, 自动对单表的增删改查进行维护</p></li><li><p>JPA概念<br>Java Persistence API 即Java持久层api. 使用注解或xml方式描述对象-关系表的映射关系, 再运行期将实体对象持久化到数据库中.(以面向对象的思想操作数据库)</p></li><li><p>Haibernate实现JPA:<br>特点: 实现面向对象的操作, 实现自动对象关系映射ORM<br>缺点: 插入操作, 必须先做一次查询操作;实现业务逻辑时, 产生冗余sql语句, 影响执行效率;需要学习特定hql操作语句</p></li><li><p>Mybatis实现JPA:<br>特点: 实现自动对象关系映射ORM, sql语句根据业务需要自己实现, 性能好, 结合通用Mapper,实现对象对象的操作.</p></li><li><p>通用Mapper的业务实现 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一步: 通用Mapper插件 --&gt;</span><br><span class="line">&lt;plugin interceptor=&quot;com.github.abel533.mapperhelper.MapperInterceptor&quot;&gt;</span><br><span class="line">&lt;!--主键自增回写方法,默认值MYSQL,详细说明请看文档 --&gt;</span><br><span class="line">&lt;property name=&quot;IDENTITY&quot; value=&quot;MYSQL&quot; /&gt;</span><br><span class="line">&lt;!--通用Mapper接口，多个通用接口用逗号隔开 --&gt;</span><br><span class="line">&lt;property name=&quot;mappers&quot; value=&quot;com.jt.common.mapper.SysMapper&quot; /&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">/**   第二步: mapper接口方法添加注解, 完成特定的操作</span><br><span class="line"> * 根据映射标签后期开发的,</span><br><span class="line"> *  功能上与映射文件一致.</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Select(value=&quot;select * from item&quot;)</span><br><span class="line">//@Insert(&quot;&quot;)</span><br><span class="line">//@Delete(&quot;&quot;)</span><br><span class="line">//@Update(&quot;&quot;)</span><br><span class="line">List&lt;Item&gt; selectAll();</span><br><span class="line">    </span><br><span class="line">// 第三步: mapper接口继承通用Mapper: SysMapper&lt;T&gt;类</span><br><span class="line"></span><br><span class="line">// 第四步: POJO对象类 添加@Table(name=&quot;tb_item_xxx&quot;)注解</span><br><span class="line">/**</span><br><span class="line">    * 通用Mapper的技术, 操作数据库</span><br><span class="line">    * 说明:</span><br><span class="line">    *  1.@Table 将pojo对象与数据表一一对应</span><br><span class="line">    *  2.@Id 定义数据表的主键</span><br><span class="line">    *  3.@GeneratedValue 自增设定</span><br><span class="line">    *</span><br><span class="line">    *  9.@JsonIgnoreProperties 忽略</span><br><span class="line">    */</span><br><span class="line">@Table(name = &quot;tb_item_cat&quot;)</span><br><span class="line">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class="line">public class ItemCat extends BasePojo &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long id; //商品分类id</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">// 第五步: 编写XXXController/XXXService</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通用Mapper&lt;/li&gt;
&lt;li&gt;JPA概念&lt;/li&gt;
&lt;li&gt;Haibernate实现JPA&lt;/li&gt;
&lt;li&gt;Mybati
      
    
    </summary>
    
    
      <category term="mybatis" scheme="http://github.com/categories/mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>13_代理模式</title>
    <link href="http://github.com/2018/02/02/13-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://github.com/2018/02/02/13-代理模式/</id>
    <published>2018-02-02T11:56:41.000Z</published>
    <updated>2019-09-21T16:43:55.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>是什么?</li><li>为什么?</li><li>适用场景</li><li>常用实现方式</li></ul><hr><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>代理模式: 设计模式中, 一种结构性模式.<br>代理模式: 一个对象代理另一个对象, 实现功能的限制或扩展.</p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么?"></a>为什么?</h2><p>基于面向对象中OCP开闭原则, 为核心业务(被代理对象)添加扩展业务, 避免直接在核心业务代码中硬编码, 减少代码编写, 降低耦合度.</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>已有业务基础上, 添加扩展业务逻辑:</p><ul><li>系统日志处理</li><li>系统事务处理</li><li>系统权限检测</li><li>系统缓存处理</li></ul><h2 id="常用实现"><a href="#常用实现" class="headerlink" title="常用实现"></a>常用实现</h2><ul><li>静态代理</li><li>基于JDK 的动态代理</li><li>基于CGLIB 的动态代理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//静态代理</span><br><span class="line">//接口对象</span><br><span class="line">public interface HelloServiceImp &#123;</span><br><span class="line">    void sayHello(String msg);</span><br><span class="line">&#125;</span><br><span class="line">//目标对象</span><br><span class="line">public class HelloService implements HelloServiceImp &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello(String msg) &#123;</span><br><span class="line">        System.out.println(&quot;hello service ... core&quot; + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//代理对象</span><br><span class="line">public class HelloServiceProxy implements HelloServiceImp &#123;</span><br><span class="line">    private HelloServiceImp serviceImp;</span><br><span class="line"></span><br><span class="line">    public HelloServiceProxy(HelloServiceImp serviceImp) &#123;</span><br><span class="line">        this.serviceImp = serviceImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello(String msg) &#123;</span><br><span class="line">        System.out.println(&quot;proxy begin &quot;);</span><br><span class="line">        serviceImp.sayHello(msg);</span><br><span class="line">        System.out.println(&quot;proxy end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">HelloServiceImp service = new HelloService();</span><br><span class="line">HelloServiceImp proxy = new HelloServiceProxy(service);</span><br><span class="line">proxy.sayHello(&quot;chichichi&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">//基于JDK 的动态代理</span><br><span class="line">//接口对象</span><br><span class="line">public interface OrgServiceImp &#123;</span><br><span class="line">    void saveOrg(String org);</span><br><span class="line">    int updateOrg(Integer id);</span><br><span class="line">&#125;</span><br><span class="line">//目标对象</span><br><span class="line">public class OrgService implements OrgServiceImp &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void saveOrg(String org) &#123;</span><br><span class="line">        System.out.println(&quot;saveOrg()&quot; + org);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateOrg(Integer id) &#123;</span><br><span class="line">        System.out.println(&quot;updateOrg()&quot; + &quot; id:&quot; + id);</span><br><span class="line">        return 666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//扩展业务对象</span><br><span class="line">/**</span><br><span class="line"> * 业务处理对象()</span><br><span class="line"> */</span><br><span class="line">class ServiceHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关联目标对象(核心业务对象)</span><br><span class="line">     * @param target</span><br><span class="line">     */</span><br><span class="line">    public ServiceHandler(Object target) &#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行代理对象的业务方法时, 底层自动执行handler对象invoke方法</span><br><span class="line">     * @param proxy</span><br><span class="line">     * @param method</span><br><span class="line">     * @param args</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">//        System.out.println(&quot;proxy&gt;&quot; + proxy.toString());</span><br><span class="line">        System.out.println(&quot;method&gt;&quot; + method.getName());</span><br><span class="line">        System.out.println(&quot;args&gt;&quot; + Arrays.toString(args));</span><br><span class="line">        System.out.println(&quot;invoke begin &quot;);</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        System.out.println(&quot;invoke end&quot;);</span><br><span class="line">        System.out.println(&quot;return&gt;&quot; + result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">//1 目标对象</span><br><span class="line">//        UserServiceImp service = new UserService();</span><br><span class="line">OrgService service = new OrgService();</span><br><span class="line">//2 代理对象(目标类类加载器/接口/handler)</span><br><span class="line">ClassLoader loader = service.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt;[] interfaces = service.getClass().getInterfaces();</span><br><span class="line">ServiceHandler handler = new ServiceHandler(service);</span><br><span class="line">OrgServiceImp proxy = (OrgServiceImp) Proxy.newProxyInstance(loader, interfaces, handler);</span><br><span class="line">//3 执行代理对象的业务方法</span><br><span class="line">//        proxy.saveUser();</span><br><span class="line">proxy.saveOrg(&quot;tinytinycn&quot;);</span><br><span class="line">int res = proxy.updateOrg(8);</span><br><span class="line">System.out.println(&quot;update-result: &quot; + res);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//基于CGlib 的动态代理</span><br><span class="line">//接口对象</span><br><span class="line">public interface MessageServiceImp &#123;</span><br><span class="line">    void sendMessage(String msg);</span><br><span class="line">&#125;</span><br><span class="line">//目标对象(实现接口)</span><br><span class="line">public class MessageService implements MessageServiceImp &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sendMessage(String msg) &#123;</span><br><span class="line">        System.out.println(&quot;sendMessage()&gt;&quot;+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//目标对象(未实现接口)</span><br><span class="line">public class MessageService2 &#123;</span><br><span class="line">    public void sendMessage(String msg) &#123;</span><br><span class="line">        System.out.println(&quot;sendMessage()&gt;&quot; + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//扩展业务对象</span><br><span class="line">public class TxManager &#123;</span><br><span class="line">    public void begin()&#123;</span><br><span class="line">        System.out.println(&quot;begin tx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void end()&#123;</span><br><span class="line">        System.out.println(&quot;end tx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">//1 创建目标对象</span><br><span class="line">//        MessageService service = new MessageService();</span><br><span class="line">MessageService2 service = new MessageService2();</span><br><span class="line">//2 创建扩展业务对象</span><br><span class="line">TxManager manager = new TxManager();</span><br><span class="line">//创建代理增强器 - 创建代理</span><br><span class="line">//执行业务方法时, 自动回调enhancer指定的callback接口中的方法</span><br><span class="line">Enhancer e = new Enhancer();</span><br><span class="line">e.setClassLoader(service.getClass().getClassLoader());</span><br><span class="line">//目标对象实现接口 *</span><br><span class="line">//        e.setInterfaces(service.getClass().getInterfaces());</span><br><span class="line">//目标对象没有实现接口 **</span><br><span class="line">e.setSuperclass(service.getClass());</span><br><span class="line">e.setCallback(new InvocationHandler() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object o, Method method, Object[] objects) throws Throwable &#123;</span><br><span class="line">        manager.begin();</span><br><span class="line">        Object result = method.invoke(service, objects);</span><br><span class="line">        manager.end();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//3 创建代理对象</span><br><span class="line">//        MessageServiceImp proxy = (MessageServiceImp) e.create();</span><br><span class="line">MessageService2 proxy = (MessageService2) e.create();</span><br><span class="line">//4 执行代理对象的业务方法</span><br><span class="line">proxy.sendMessage(&quot;hello tiny.&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;是什么?&lt;/li&gt;
&lt;li&gt;为什么?&lt;/li&gt;
&lt;li&gt;适用场景&lt;/li&gt;
&lt;li&gt;常用实现方式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
    
    </summary>
    
    
      <category term="spring" scheme="http://github.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>12_单例模式</title>
    <link href="http://github.com/2018/02/01/12-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://github.com/2018/02/01/12-单例模式/</id>
    <published>2018-02-01T04:06:00.000Z</published>
    <updated>2019-09-21T16:43:55.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>懒汉 - 线程不安全</li><li>懒汉 - 线程安全</li><li>懒汉 - 双重校验锁</li><li>饿汉</li><li>饿汉2</li><li>静态内部类</li><li>枚举类</li></ul><hr><h2 id="懒汉-线程不安全"><a href="#懒汉-线程不安全" class="headerlink" title="懒汉 - 线程不安全"></a>懒汉 - 线程不安全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton()&#123;</span><br><span class="line">  private static Singleton instance;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    if(instance==null)&#123;</span><br><span class="line">      instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉-线程安全"><a href="#懒汉-线程安全" class="headerlink" title="懒汉 - 线程安全"></a>懒汉 - 线程安全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static Singleton instance;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static synchronized Singleton getInstance()&#123;</span><br><span class="line">    if(instance==null)&#123;</span><br><span class="line">      instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉-双重校验锁"><a href="#懒汉-双重校验锁" class="headerlink" title="懒汉 - 双重校验锁"></a>懒汉 - 双重校验锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private volatile static Singleton instance;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    //双重校验</span><br><span class="line">    if(instance==null)&#123;</span><br><span class="line">      synchronized (Singleton.class)&#123;</span><br><span class="line">        if(instance==null)&#123;</span><br><span class="line">          instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h2><p>基于classLoader机制, 避免多线程同步问题. 对象在类装载时实例化.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static Singleton instance = new Singleton();</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉2"><a href="#饿汉2" class="headerlink" title="饿汉2"></a>饿汉2</h2><p>对象在类初始化时实例化.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static Singleton instance = null;</span><br><span class="line">  static&#123;</span><br><span class="line">    instance = new Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>基于classLoader机制, 保证实例化instance时的线程安全.饿汉模式在类装载后, instance即被实例化(未达到lazy loading效果).<br>静态内部类方式, 类被加载后, instance不一定实例化.因为内部类没有被主动使用, 只有调用getInstance()时, 才会被实例化(实现lazy loading效果).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static class SingletonHolder&#123;</span><br><span class="line">    private static final Singleton INSTANCE = new Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">  public static final Singleton getInstance()&#123;</span><br><span class="line">    return SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>避免线程同步问题, 防止反序列化重新创建对象.(java1.5 引入enum枚举特性)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">  public void whateverMethod()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;懒汉 - 线程不安全&lt;/li&gt;
&lt;li&gt;懒汉 - 线程安全&lt;/li&gt;
&lt;li&gt;懒汉 - 双重校验锁&lt;/li&gt;
&lt;li&gt;饿汉&lt;/l
      
    
    </summary>
    
    
      <category term="spring" scheme="http://github.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>11_Ajax</title>
    <link href="http://github.com/2018/01/28/11-Ajax/"/>
    <id>http://github.com/2018/01/28/11-Ajax/</id>
    <published>2018-01-28T01:44:48.000Z</published>
    <updated>2019-09-21T16:43:55.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Ajax</li><li>Ajax 编程实现</li><li>JQ 中Ajax 应用</li></ul><hr><ul><li>Ajax</li></ul><ol><li>Asynchronous JavaScript And Xml 是开发web应用程序的技术;</li><li>在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容;</li><li>解决了页面加载的性能问题和提升用户体验.</li></ol><ul><li>Ajax 编程实现</li></ul><p>实现步骤:</p><ol><li>获取Ajax请求对象</li><li>发送Ajax异步请求到服务端</li><li>获取Ajax异步数据(监听状态)</li><li>局部刷新(显式返回数据)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//获取Ajax请求对象</span><br><span class="line">var request = window.XMLHttpRequest;</span><br><span class="line">//初始化Ajax请求对象(设置监听函数/请求链接/发送数据)</span><br><span class="line">request.onReadyStateChange=function()&#123;</span><br><span class="line">  handleResponse(requset)</span><br><span class="line">&#125;;</span><br><span class="line">request.open(&quot;get&quot;, &quot;message-data.html&quot;, true);//true is asynchronously</span><br><span class="line">request.send(null);</span><br><span class="line">//获取Ajax异步数据, 处理数据</span><br><span class="line">function handleResponse(request)&#123;</span><br><span class="line">  if(request.readyState==4 &amp;&amp; request.status==200)&#123;</span><br><span class="line">    //局部刷新</span><br><span class="line">    refresh(resultRegion, request.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//采用post提交方式的Ajax请求方式</span><br><span class="line">request.open(&quot;post&quot;, address, true);</span><br><span class="line">request.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">request.send(data);</span><br></pre></td></tr></table></figure></li></ol><ul><li>JQ中Ajax应用</li></ul><ol><li><p>load函数: 一般用于异步加载url页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load(url, [data], [callback])</span><br><span class="line"></span><br><span class="line">$(&quot;body&quot;).load(&quot;listUI.do&quot;, &#123;color:red&#125;, function()&#123;...&#125;);</span><br></pre></td></tr></table></figure></li><li><p>ajax函数: 向服务器发起一个异步请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">  url: &quot;address&quot;,</span><br><span class="line">  data: &#123;param1:&quot;p1&quot;, param2:&quot;p2&quot;&#125;,</span><br><span class="line">  dataType: &quot;json&quot;,</span><br><span class="line">  success: successHandlerFun,</span><br><span class="line">  error: errorHandlerFun,</span><br><span class="line">  cache: false,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>getJson函数: 向服务器发起一个Get请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getJson(url, [data], [callback])</span><br><span class="line">$.getJson(&quot;doFindPageObject.do&quot;, &#123;pageCurrent:1&#125;, function(result)&#123;...&#125;);</span><br></pre></td></tr></table></figure></li><li><p>post函数: 向服务器发起一个Post请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post(url, [data], [callback])</span><br><span class="line">$.post(&quot;doFindPageObject.do&quot;, &#123;pageCurrent:1&#125;, function(result)&#123;...&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ajax&lt;/li&gt;
&lt;li&gt;Ajax 编程实现&lt;/li&gt;
&lt;li&gt;JQ 中Ajax 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul
      
    
    </summary>
    
    
      <category term="spring" scheme="http://github.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>10_mybatis_增强</title>
    <link href="http://github.com/2018/01/26/10-mybatis-%E5%A2%9E%E5%BC%BA/"/>
    <id>http://github.com/2018/01/26/10-mybatis-增强/</id>
    <published>2018-01-26T04:03:40.000Z</published>
    <updated>2019-09-21T16:43:55.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Mybatis 增强<ul><li>核心配置文件</li><li>核心业务操作</li><li>映射文件</li></ul></li><li>Mybtis 应用<ul><li>日志配置及应用</li><li>缓存配置及应用</li><li>动态sql 应用</li></ul></li></ul><hr><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><p>mybatis 配置文件包含 行为设置settings 和 属性信息properties.</p><p>文档顶层结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">configuration 配置</span><br><span class="line">properties 属性</span><br><span class="line">setting 设置</span><br><span class="line">typeAliases 类型别名</span><br><span class="line">typeHandler 类型处理器</span><br><span class="line">objectFactory 对象工厂</span><br><span class="line">plugins 插件</span><br><span class="line">environments 环境</span><br><span class="line">transactionManager 事务管理器</span><br><span class="line">dataSource 数据源</span><br><span class="line">databaseIdProvider 数据库厂商标识</span><br><span class="line">mappers 映射器</span><br></pre></td></tr></table></figure><p>properties属性标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//资源目录resources/config.properties 配置文件</span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:///test</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line"></span><br><span class="line">//mybaits核心配置中, 引入上述配置信息</span><br><span class="line">&lt;properties resource=&quot;config.properties&quot;/&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">//配置更为灵活</span><br></pre></td></tr></table></figure><p>settings设置标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//设置调整, 如缓存,延迟加载等</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;lazyLoadTriggerMethods&quot;</span><br><span class="line">  value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>typeAliases别名标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//类型别名, 为Java类设置一个别名, 降低类限定名的冗余</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Blog&quot; type=&quot;domain.blog.Blog&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Comment&quot; type=&quot;domain.blog.Comment&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Post&quot; type=&quot;domain.blog.Post&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Section&quot; type=&quot;domain.blog.Section&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Tag&quot; type=&quot;domain.blog.Tag&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//指定包名, mybatis自动搜索包下bean对象</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;package name=&quot;cn.tinytiny.xxx.xxx.entity&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//Java类型内置类的别名</span><br><span class="line">//别名      映射类型</span><br><span class="line">iteratorIterator</span><br><span class="line">collectionCollection</span><br><span class="line">arraylistArrayList</span><br><span class="line">listList</span><br><span class="line">hashmapHashMap</span><br><span class="line">mapMap</span><br><span class="line">bigdecimalBigDecimal</span><br><span class="line">decimalBigDecimal</span><br><span class="line">dateDate</span><br><span class="line">booleanBoolean</span><br><span class="line">floatFloat</span><br><span class="line">doubleDouble</span><br><span class="line">integerInteger</span><br><span class="line">intInteger</span><br><span class="line">shortShort</span><br><span class="line">longLong</span><br><span class="line">byteByte</span><br><span class="line">stringString</span><br><span class="line">booleanboolean</span><br></pre></td></tr></table></figure><h2 id="业务操作"><a href="#业务操作" class="headerlink" title="业务操作"></a>业务操作</h2><ul><li><p>定义实体对象</p></li><li><p>创建mapper映射文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125;,$&#123;&#125;区别?</span><br><span class="line">同: 获取接口方法参数中的数据</span><br><span class="line">异:</span><br><span class="line">1. $&#123;&#125;表达式 获取参数时, 参数必须使用@Param注解修饰</span><br><span class="line">2. $&#123;&#125;表达式 可以获取xxx.properties配置中的数据</span><br><span class="line">3. $&#123;&#125;表达式 获取参数时, 直接将参数值拼接到sql语句中, 存在sql注入问题</span><br><span class="line">(@Param String s)  s=&quot;xxx&apos;or 1=1&apos;&quot; --&gt; where name =&apos;xxx&apos;or 1=1&apos;&apos;</span><br><span class="line">4. $&#123;&#125;表达式 假如在SQL语句中应用，应尽量使用参数值替换语句中的表名，字段名而不是字段的具体值</span><br><span class="line"></span><br><span class="line">5. #&#123;&#125;表达式 获取参数时, 不存在sql注入</span><br><span class="line">6. #&#123;&#125;表达式 在mybatis解析sql语句时, #自动替换为? ,PreparedStatement预处理次sql, 提高性能.</span><br></pre></td></tr></table></figure></li><li><p>单元测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//sqlSession对象对mybatis的事务进行控制, SqlSessionFactory工厂通过openSession()获得的sqlsession对象默认是手动提交事务.</span><br><span class="line">//对于insert/update/delete操作, 执行结束后需要手动提交事务, 执行sqlSession.commit()方法.</span><br><span class="line">//使用openSession(true)方法, 可以自动控制事务</span><br></pre></td></tr></table></figure></li></ul><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><p>mybatis映射器的xml文件相对简单, 简化JDBC编程.</p><p>映射文件顶层元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cache 给定命名空间的缓存配置</span><br><span class="line">cache-ref 其他命名空间的缓存引用</span><br><span class="line">resultMap 描述如何从数据库结果集中, 加载对象</span><br><span class="line">sql 可被其他语句引用的重复语句块(借助&lt;include/&gt;)</span><br><span class="line">insert 映射插入语句</span><br><span class="line">upadte 映射更新语句</span><br><span class="line">select 映射查询语句</span><br><span class="line">delete 映射删除语句</span><br></pre></td></tr></table></figure><p>select插入标签:</p><ul><li>parameterType: 传给该语句的参数类(完全限定名或别名, 该属性可选.mybatis可以通过Typehandler推断传入语句的参数)</li><li>resultType: 返回的期望类型(完全限定名或别名.注意:结果是集合,则返回类型为集合包含元素的类型,并非集合本身类型)</li><li>resultMap: 外部resultMap的命名引用(涉及结果集映射的场景), 注意: resutlMap和resultType不能同时使用.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 当查询结果与映射对象字段不匹配时, 使用resultMap 做映射转换!</span><br><span class="line">//SysUser(id,username,password) &lt;&lt; (user_id,user_name,hashed_password)</span><br><span class="line">&lt;resultMap id=&quot;userResultMap&quot; type=&quot;sysUser&quot;&gt;</span><br><span class="line">  &lt;id property=&quot;id&quot; column=&quot;user_id&quot; /&gt;</span><br><span class="line">  &lt;result property=&quot;username&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">  &lt;result property=&quot;password&quot; column=&quot;hashed_password&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=&quot;selectUsers&quot; resultMap=&quot;userResultMap&quot;&gt;</span><br><span class="line">  select user_id, user_name, hashed_password</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><p>insert/update/delete标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//mysql或sqlServer 支持自动生成主键的字段</span><br><span class="line">&lt;insert id=&quot;insertObject&quot; parameterType=&quot;sysUser&quot;</span><br><span class="line">        useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">  insert into sys_users(id,username,password,phone,createdDate,modifiedDate)</span><br><span class="line">  values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,now(),now())</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=&quot;updateObject&quot; parameterType=&quot;sysUser&quot;&gt;</span><br><span class="line">  update sys_users</span><br><span class="line">  set phone=#&#123;phone&#125;,modifiedDate=now()</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;deleteOjbect&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">  delete from sysUser where id=#&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>sql标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义重用sql的代码块</span><br><span class="line">&lt;sql id=&quot;orderBy&quot;&gt;</span><br><span class="line">  order by $&#123;columnName&#125;</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;select id=&quot;findUsers&quot; resultType=&quot;sysUser&quot;&gt;</span><br><span class="line">  select * from sys_users</span><br><span class="line">  &lt;include refid=&quot;orderBy&quot;/&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="日志配置及应用"><a href="#日志配置及应用" class="headerlink" title="日志配置及应用"></a>日志配置及应用</h2><p>mybatis 内置的日志工厂提供日志功能. 具体日志实现工具:</p><ul><li>SLF4J(日志框架标准,类似JDBC标准)</li><li>Apache Commons Logging</li><li>Log4j 2 (是log4j的升级版,配置文件升级为xml格式了)</li><li>Log4j(日志处理库,配置文件格式为.properties)</li><li>DK logging<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。</span><br><span class="line">它会使用最先找到的（按上文列举的顺序查找）。</span><br><span class="line">如果一个都未找到，日志功能就会被禁用。</span><br><span class="line">如果你的应用部署在一个包含Commons Logging的环境，</span><br><span class="line">而你又想用其他的日志框架，你可以通过在MyBatis的配置文件mybatis-config.</span><br><span class="line">xml里面添加一项setting（配置）来选择一个不同的日志实现.</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>添加log4j依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加/resources/log4j.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d [%-5p] %c - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.mybatis3=DEBUG</span><br><span class="line">//添加自己的工程包路径</span><br><span class="line">log4j.logger.cn.tinytiny=DEBUG</span><br></pre></td></tr></table></figure></li><li><p>mybatis核心配置文件添加配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4j&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="缓存配置及应用"><a href="#缓存配置及应用" class="headerlink" title="缓存配置及应用"></a>缓存配置及应用</h2><p>mybatis 提供查询缓存的功能.</p><ul><li>默认情况, 开启一级缓存(sqlSession级别)</li><li>若开启二级缓存(sqlSessionFactory级别)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//核心配置文件, 开启缓存</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">//核心映射文件, 添加cache标签</span><br><span class="line">//eviction 回收策略</span><br><span class="line">//flushInterval 刷新间隔</span><br><span class="line">//size 引用数目</span><br><span class="line">//readOnly 只读属性, 设置true则返回调用者缓存对象的相同实例(可能被修改).设置false则返回调用者缓存对象的拷贝(安全,默认false)</span><br><span class="line">&lt;cache eviction=&quot;LRU&quot; flushInterval=&quot;60000&quot; size=&quot;512&quot; readOnly=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//共享相同缓存配置和实例, 使用cache-ref</span><br><span class="line">&lt;cache-ref namespace=&quot;com.someone.application.data.SomeMapper&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态sql-应用"><a href="#动态sql-应用" class="headerlink" title="动态sql 应用"></a>动态sql 应用</h2><p>根据不同业务场景, 动态拼接sql语句.</p><p>if元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//if语句进行条件判断</span><br><span class="line">//接口方法</span><br><span class="line">List&lt;SysUser&gt; findUsers(@Param(&quot;columnName&quot;),String columnName,@Param(&quot;ph&quot;),String phone);</span><br><span class="line">//mapper映射</span><br><span class="line">&lt;select id=&quot;findUsers&quot;</span><br><span class="line">  resultType=&quot;sysUser&quot;&gt;</span><br><span class="line">  select *</span><br><span class="line">  &lt;include refid=&quot;fromTable&quot;/&gt;</span><br><span class="line">  where id&gt;0</span><br><span class="line">  &lt;if test=&quot;ph!=null and ph!=&apos;&apos;&quot;&gt;</span><br><span class="line">    and phone=#&#123;ph&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  order by $&#123;columnName&#125;  desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>where元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//where语句定义查询条件</span><br><span class="line">&lt;select id=&quot;findUsers&quot; resultType=&quot;sysUser&quot;&gt;</span><br><span class="line">  SELECT * FROM SYS_USERS</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;if test=&quot;id != null&quot;&gt;</span><br><span class="line">       and id&gt;#&#123;id&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;phone != null&quot;&gt;</span><br><span class="line">       and phone like #&#123;phone&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;username != null and username !=&apos;&apos;&quot;&gt;</span><br><span class="line">       AND username like concat(&quot;%&quot;,#&#123;username&#125;,&quot;%&quot;)</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>foreach元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//foreach语句用于迭代参数数据</span><br><span class="line">//接口方法</span><br><span class="line">int deleteObject(@Param(&quot;id&quot;) String[] ids);</span><br><span class="line">//mapper映射</span><br><span class="line">&lt;delete id=&quot;deleteObjectById&quot;&gt;</span><br><span class="line">  delete from sys_users</span><br><span class="line">  where id in</span><br><span class="line">  &lt;foreach collection=&quot;ids&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;</span><br><span class="line">  item=&quot;item&quot;&gt;</span><br><span class="line">    #&#123;item&#125;</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Mybatis 增强&lt;ul&gt;
&lt;li&gt;核心配置文件&lt;/li&gt;
&lt;li&gt;核心业务操作&lt;/li&gt;
&lt;li&gt;映射文件&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
    
      <category term="spring" scheme="http://github.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>09_mybatis_整合</title>
    <link href="http://github.com/2018/01/25/09-mybatis-%E6%95%B4%E5%90%88/"/>
    <id>http://github.com/2018/01/25/09-mybatis-整合/</id>
    <published>2018-01-25T11:22:45.000Z</published>
    <updated>2019-09-21T16:43:55.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Spring 整合Mybtis</li></ul><hr><h2 id="Spring-整合Mybatis"><a href="#Spring-整合Mybatis" class="headerlink" title="Spring 整合Mybatis"></a>Spring 整合Mybatis</h2><ol><li>添加依赖</li><li>配置spring核心配置文件spring-config.xml</li></ol><ul><li>加载配置文件</li><li>配置数据库连接池</li><li>配置sqlSessionFactory(加载连接池,加载mybatis全局配置,或配置映射文件), 交由spring管理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">   &lt;!-- 指定mybatis配置文件--&gt;</span><br><span class="line">  &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis/mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;!--指定映射文件, 可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation 有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 --&gt;</span><br><span class="line">   &lt;!-- &lt;property  name=&quot;mapperLocations&quot;  value=&quot;classpath:mapper/*.xml&quot;/&gt;  --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>配置dao(<strong>3种方式</strong>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//配置dao</span><br><span class="line">&lt;!-- 1. 需要实现dao接口的方式 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">  &lt;constructor0-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. 直接使用dao接口的方式, 无需实现dao接口, 需要单个配置 --&gt;</span><br><span class="line">&lt;!-- 数据映射器, MapperFactoryBean, 不用映射文件xml,采用注解 --&gt;</span><br><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;mapperInterface&quot;  value=&quot;cn.tinytiny.dao.UserDao&quot; /&gt;</span><br><span class="line">   &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3. 直接使用dao接口的方式, 可以扫描 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;basePackage&quot; value=&quot;cn.tinytiny.dao&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>添加mybatis配置文件</li><li>添加mapper映射文件</li><li>创建dao接口, 定义相关方法</li></ol><p>代码不重要, 弄清思路就行:)</p><p>部分代码 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">spring-config.xml部分配置:</span><br><span class="line">&lt;!-- 1. 需要实现dao接口的方式 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">  &lt;constructor0-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">Service实现类部分代码:</span><br><span class="line">@Autowired</span><br><span class="line">private SysRoleDaoImp sysRoleDaoImp;</span><br><span class="line"></span><br><span class="line">public List&lt;SysRole&gt; findObjects() &#123;</span><br><span class="line">    return sysRoleDaoImp.findObjects();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int saveObject(SysRole entity) &#123;</span><br><span class="line">    return sysRoleDaoImp.insertObject(entity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dao实现类部分代码:</span><br><span class="line">@Component</span><br><span class="line">public class SysRoleDaoImp implements SysRoleDao &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    public List&lt;SysRole&gt; findObjects() &#123;</span><br><span class="line">        System.out.println(sqlSession);</span><br><span class="line">        return sqlSession.selectList(&quot;cn.tinytiny.jt.sys.dao.SysRoleDao.findObjects&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int insertObject(SysRole entity) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //必须有setter方法</span><br><span class="line">    public void setSqlSession(SqlSessionTemplate sqlSession) &#123;</span><br><span class="line">        this.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分代码 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  spring-config.xml部分配置:</span><br><span class="line">  &lt;!-- 2. 直接使用dao接口的方式, 无需实现dao接口, 需要单个配置 --&gt;</span><br><span class="line">  &lt;bean id=&quot;userDao&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;mapperInterface&quot;  value=&quot;cn.tinytiny.jt.sys.dao.SysRoleMapper&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  Service实现类部分代码:(没有使用dao实现类, 而是使用mapper接口)</span><br><span class="line">  @Autowired</span><br><span class="line">  private SysRoleMapper sysRoleMapper;</span><br><span class="line"></span><br><span class="line">  public List&lt;SysRole&gt; findObjects() &#123;</span><br><span class="line">      return sysRoleMapper.findObjects();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public int saveObject(SysRole entity) &#123;</span><br><span class="line">      return sysRoleMapper.insertObject(entity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Mapper接口 部分代码: (无需xml映射文件了)</span><br><span class="line">  public interface SysRoleMapper &#123;</span><br><span class="line">    @Select(&quot;select * from sys_roles order by createdTime desc&quot;)</span><br><span class="line">    List&lt;SysRole&gt; findObjects();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//spring-config.xml中, 可以发现mapper接口需要单独配置, 当出现多个业务时, 都需要单独配置, 不是特别灵活.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spring 整合Mybtis&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Spring-整合Mybatis&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="spring" scheme="http://github.com/categories/spring/"/>
    
    
  </entry>
  
</feed>
