<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hang &#39;s blogs</title>
  
  
  <link href="/tinytinycn.github.io/atom.xml" rel="self"/>
  
  <link href="http://github.com/"/>
  <updated>2019-09-23T07:49:33.862Z</updated>
  <id>http://github.com/</id>
  
  <author>
    <name>hang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fix-ubuntu-tz时区</title>
    <link href="http://github.com/2019/06/17/fix-ubuntu-tz/"/>
    <id>http://github.com/2019/06/17/fix-ubuntu-tz/</id>
    <published>2019-06-17T01:04:59.000Z</published>
    <updated>2019-09-23T07:49:33.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修复时区问题"><a href="#修复时区问题" class="headerlink" title="修复时区问题"></a>修复时区问题</h2><ul><li><p><code>sudo vi /etc/timezone</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure></li><li><p><code>sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修复时区问题&quot;&gt;&lt;a href=&quot;#修复时区问题&quot; class=&quot;headerlink&quot; title=&quot;修复时区问题&quot;&gt;&lt;/a&gt;修复时区问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo vi /etc/timezone&lt;/code&gt;&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://github.com/categories/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>fix-ubuntu连接android手机</title>
    <link href="http://github.com/2019/05/28/fix-%E8%BF%9E%E6%8E%A5android/"/>
    <id>http://github.com/2019/05/28/fix-连接android/</id>
    <published>2019-05-28T02:57:59.000Z</published>
    <updated>2019-09-23T07:51:49.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>sudo apt install android-tools-adb<br>lsusb<br>cd ~/.android<br>touch usb_adb.ini<br>sudo vi usb_adb.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#添加usb设备id</span><br><span class="line">0x2a70</span><br></pre></td></tr></table></figure><p>sudo adb kill-server<br>sudo adb start-server<br>sudo adb devices</p><h3 id="fix-issue"><a href="#fix-issue" class="headerlink" title="fix issue"></a>fix issue</h3><ul><li><p><code>sudo vi /etc/udev/rules.d/51-android.rules</code></p></li><li><p>add this content</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4ee7&quot;, MODE=&quot;0666&quot;, OWNER=&quot;tinytinycn&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>sudo udevadm control --reload-rules</code></p></li><li><p>重新拔插usb</p></li><li><p><code>adb devices</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;p&gt;sudo apt install android-tools-adb&lt;br&gt;lsusb&lt;br&gt;cd ~/.android&lt;b
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://github.com/categories/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>django-03-基础</title>
    <link href="http://github.com/2019/03/27/django-03-%E5%9F%BA%E7%A1%80/"/>
    <id>http://github.com/2019/03/27/django-03-基础/</id>
    <published>2019-03-27T08:41:25.000Z</published>
    <updated>2019-09-22T09:35:20.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django-03"><a href="#django-03" class="headerlink" title="django 03"></a>django 03</h2><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>编辑 YOUR-PROJECT/settings.py (一个包含django项目设置的python模块)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'test_django'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时区配置"><a href="#时区配置" class="headerlink" title="时区配置"></a>时区配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p>默认激活了一些应用，但并不是每个人都需要它们。如果你不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑地从 INSTALLED_APPS 里注释或者删除掉它们。 migrate 命令只会为在 INSTALLED_APPS 里声明了的应用进行数据库迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,      //自己的应用在此注册</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,        //管理员站点， 你很快就会使用它</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,         //认证授权系统</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>, //内容类型框架</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,     //会话框架</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,     //消息框架</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,  //管理静态文件的框架</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><ul><li>前提: 取决于YOUR-PROJECT/settings.py设置文件和各个应用的数据库迁移文件YOUR-APP/migrations/**.py</li><li>执行: <code>python manage.py migrate</code></li></ul><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>编辑 YOUR-APP/models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h3><ol><li><p>YOUR-PROJECT/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>, //注册应用, 点式路径 <span class="string">'YOUR-APP.apps.类名'</span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>python manage.py makemigrations polls</code>, 检测模型文件models.py的修改, 生成模型迁移文件在<br>YOUR-APP/migrations/0001_initial.py</p></li><li><p>执行 <code>python manage.py migrate</code>, 迁移所有还没执行过的迁移(跟踪django_migrations表看执行过哪些迁移)</p></li><li><p>开发过程中, 可以平滑升级数据库而不丢失数据;</p></li></ol><ul><li>编辑models.py, 修改模型;</li><li>运行<code>python manage.py makemigrations</code>, 为模型的改变生成迁移文件;</li><li>运行<code>python manage.py migrate</code>, 应用数据库迁移;</li></ul><h3 id="初试api"><a href="#初试api" class="headerlink" title="初试api"></a>初试api</h3><p>执行<code>python manage.py shell</code>, 会设置 DJANGO_SETTINGS_MODULE 环境变量，这个变量会让 Django 根据 mysite/settings.py 文件来设置 Python 包的导入路径;</p><h3 id="创建管理页面"><a href="#创建管理页面" class="headerlink" title="创建管理页面"></a>创建管理页面</h3><ul><li>执行<code>python manage.py createsuperuser</code></li><li>执行<code>python manage.py runserver</code></li><li>访问<code>http://127.0.0.1:8000/admin/</code></li></ul><h3 id="管理页面添加对象"><a href="#管理页面添加对象" class="headerlink" title="管理页面添加对象"></a>管理页面添加对象</h3><ul><li><p>编辑YOUR-APP/admin.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure></li><li><p>重新进入管理页面</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;django-03&quot;&gt;&lt;a href=&quot;#django-03&quot; class=&quot;headerlink&quot; title=&quot;django 03&quot;&gt;&lt;/a&gt;django 03&lt;/h2&gt;&lt;h3 id=&quot;数据库配置&quot;&gt;&lt;a href=&quot;#数据库配置&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="django" scheme="http://github.com/categories/django/"/>
    
    
  </entry>
  
  <entry>
    <title>django-02-mysql</title>
    <link href="http://github.com/2019/03/26/django-02-mysql/"/>
    <id>http://github.com/2019/03/26/django-02-mysql/</id>
    <published>2019-03-26T02:41:25.000Z</published>
    <updated>2019-09-22T09:32:47.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django-02"><a href="#django-02" class="headerlink" title="django 02"></a>django 02</h2><h3 id="整合mysql"><a href="#整合mysql" class="headerlink" title="整合mysql"></a>整合mysql</h3><ul><li>django 支持MySQL5.6及以上;</li><li>django 希望数据库支出unicode(utf-8编码)以及任务事务执行和引用完整;</li><li>注意, MySQL使用MyIsam引擎时, 不强制执行事务和完整引用;</li><li>注意, MySQL使用默认InnoDB引擎时, 自增计数器在MySQL重启时会被丢失, 从而使用”max(id)+1”, 这样会导致 AutoField字段值被重用;</li><li>注意, MySQL使用MyIsam引擎, 不支持事务和强制外键约束;</li></ul><h3 id="安装mysqlclient-推荐"><a href="#安装mysqlclient-推荐" class="headerlink" title="安装mysqlclient(推荐)"></a>安装mysqlclient(推荐)</h3><p>参考: <a href="https://pypi.org/project/mysqlclient/" target="_blank" rel="noopener">https://pypi.org/project/mysqlclient/</a></p><ul><li>django 要求mysqlclient 1.3.7及以上;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install default-libmysqlclient-dev</span><br><span class="line">sudo apt install python3-dev</span><br><span class="line"></span><br><span class="line">pip3 install mysqlclient //install from pypi 或者在 requirements.txt中指定版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p>确保数据库的所有table和columns使用默认utf-8编码;<br><code>create database &lt;dbname&gt; character set utf8;</code></p></li><li><p>MySQL默认使用 <code>utf8_general_ci</code> 排序规则; 数据库以不区分大小写的方式进行所有字符串相等的比较. 也就是说, 在数据库级别上, “Fred”和”freD”被认为是平等的. 如果您希望对特定的列或表进行区分大小写的比较, 更改列或表以使用 <code>utf8_bin</code> 排序规则; 另外, 使用<code>utf8_general_ci</code> 速度更快,但会有少量错误的可能, 若不能接收, 可以使用<code>utf8_unicode_ci</code>确保更准确;</p></li><li><p>模型formsets 校验是大小写敏感的; <code>Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling save(), an IntegrityError will be raised.</code> </p></li></ul><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><ul><li>连接配置优先级顺序:</li></ul><ol><li>OPTIONS</li><li>NAME,USER,PASSWORD,HOST,PORT</li><li>mysql option files</li></ol><ul><li>样例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//settings.py</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            &apos;read_default_file&apos;: &apos;/path/to/my.cnf&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//mysql.cnf</span><br><span class="line">database = NAME</span><br><span class="line">user = USER</span><br><span class="line">password = PASSWORD</span><br><span class="line">default-character-set = utf8</span><br></pre></td></tr></table></figure></li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul><li>django 2.0 默认使用repeatable read , 不不是django1.x 之前的read committed;</li></ul><h3 id="数据库默认引擎"><a href="#数据库默认引擎" class="headerlink" title="数据库默认引擎"></a>数据库默认引擎</h3><ul><li><p>alter table<br><code>ALTER TABLE &lt;tablename&gt; ENGINE=INNODB;</code></p></li><li><p>init_command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;</span><br><span class="line">   &apos;init_command&apos;: &apos;SET default_storage_engine=INNODB&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h3><ul><li>建议使用小写表名, 避免一些问题;</li></ul><h3 id="特殊字段的注意事项"><a href="#特殊字段的注意事项" class="headerlink" title="特殊字段的注意事项"></a>特殊字段的注意事项</h3><ul><li><p>Character fields, 若使用unique=True时, varchar 的最大长度max_length限制为255字符;</p></li><li><p>TextField, MySQL只能索引BLOB或Text列的前n个字符. 由于TextField没有定义的长度，所以不能将其标记为unique=True.<code>MySQL will report: &quot;BLOB/TEXT column &#39;&lt;db_column&gt;&#39; used in key specification without a key length&quot;.</code></p></li><li><p>如果数据库包含 TIMESTAMP列, 必须使用 USE_TZ=False,避免数据出错; 如果启用时区支持，MySQL和Django都将尝试将值从UTC转换为本地时间.</p></li><li><p><code>Row locking with QuerySet.select_for_update()</code> MySQL does not support the NOWAIT, SKIP LOCKED, and OF options to the SELECT … FOR UPDATE statement. If select_for_update() is used with nowait=True, skip_locked=True, or of then a NotSupportedError is raised.</p></li><li><p>自动类型转换, 当在查询一个字符串类型的的值, 使用一个整型值作为查询条件时, MySQL会强制将所有的值转换成integer进行比较. 例如, table中有’abc’,’def’, 查询条件where mycolumn=0, 这两行将与之匹配; 同样where mycolumn=1 将与’abc1’匹配; 若你实现的自定义模型直接继承Field, 覆盖get_prep_value()或使用RawSQL(),extra(),raw(), 你应该确保正确的类型转换;</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;django-02&quot;&gt;&lt;a href=&quot;#django-02&quot; class=&quot;headerlink&quot; title=&quot;django 02&quot;&gt;&lt;/a&gt;django 02&lt;/h2&gt;&lt;h3 id=&quot;整合mysql&quot;&gt;&lt;a href=&quot;#整合mysql&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="django" scheme="http://github.com/categories/django/"/>
    
    
  </entry>
  
  <entry>
    <title>python-13-virtualenv</title>
    <link href="http://github.com/2019/03/25/python-13-virtualenv/"/>
    <id>http://github.com/2019/03/25/python-13-virtualenv/</id>
    <published>2019-03-25T07:53:41.000Z</published>
    <updated>2019-09-22T09:27:11.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>virtualenv 提供隔离的python运行环境, 解决不同应用间多版本的冲突问题;</p><ul><li><p>pip3安装virtualenv到python3版本下包中<br><code>pip3 install virtualenv</code></p></li><li><p>创建一个项目的独立虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir tinyproject</span><br><span class="line">cd tinyproject</span><br><span class="line">virtualenv --no-site-packages venv //不复制系统python的所有第三方包, 最新版本默认使用此参数, 可以不用写出来</span><br><span class="line">source venv/bin/activate //进入虚拟环境</span><br><span class="line">pip --version //虚拟环境的pip版本</span><br><span class="line">pip install django //安装第三方包至虚拟环境的下</span><br><span class="line">deactivate //退出虚拟环境</span><br></pre></td></tr></table></figure></li><li><p>移除虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br><span class="line">rm -r /path/to/ENV  //例如: rm -r tinyproject/venv</span><br></pre></td></tr></table></figure></li><li><p>可选参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages ENV //继承系统已安装第三方包</span><br></pre></td></tr></table></figure></li><li><p>更多<br><code>https://virtualenv.pypa.io/en/latest/</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;virtualenv&quot;&gt;&lt;a href=&quot;#virtualenv&quot; class=&quot;headerlink&quot; title=&quot;virtualenv&quot;&gt;&lt;/a&gt;virtualenv&lt;/h2&gt;&lt;p&gt;virtualenv 提供隔离的python运行环境, 解决不同应用间多版本
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-05-配置外置</title>
    <link href="http://github.com/2019/02/25/springboot-05-%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%AE/"/>
    <id>http://github.com/2019/02/25/springboot-05-配置外置/</id>
    <published>2019-02-25T02:23:59.000Z</published>
    <updated>2019-09-23T07:17:04.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-boot-配置外置"><a href="#spring-boot-配置外置" class="headerlink" title="spring boot 配置外置"></a>spring boot 配置外置</h2><ol><li><p>springboot 配置优先级顺序(由高到低):</p><ul><li>命令行参数（优先级最高）。</li><li>通过 System.getProperties() 获取的 Java 系统参数。</li><li>操作系统环境变量。</li><li>从 java:comp/env 得到的 JNDI 属性。</li><li>通过 RandomValuePropertySource 生成的random.*属性。</li><li>jar包<strong>外部</strong>的application-{profile}.properties或application.yml(带spring.profile)配置文件，通过spring.config.location参数指定</li><li>jar包<strong>内部</strong>的application-{profile}.properties或application.yml(带spring.profile)配置文件</li><li>jar包<strong>外部</strong>的application.properties或application.yml(不带spring.profile)配置文件</li><li>jar包<strong>内部</strong>的application.properties或application.yml(不带spring.profile)配置文件</li><li>应用 Java配置类，包含@Configuration注解的 Java 类，通过@PropertySource注解声明的属性文件。</li><li>通过SpringApplication.setDefaultProperties声明的默认属性。</li></ul></li><li><p>springboot 配置application.yml或application.properties遵循原则: </p><ul><li>高优先级覆盖低优先级</li><li>多个配置文件互补</li></ul></li><li><p>一般而言, 对于项目的配置优先级(由高到低), 如下</p><ul><li>file:./config/ 项目根目录下的config目录下</li><li>file:./ 项目根目录下</li><li>classpath:/config 项目resources/config目录下</li><li>classpath:/ 项目resources目录下</li><li>注意: 以上优先级针对的是application.yml或application.properties配置文件而言</li></ul></li><li><p>默认spring-boot-maven-plugin插件打包后的项目目录如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── BOOT-INF</span><br><span class="line">│   └── classes</span><br><span class="line">│       ├── application-dev.properties</span><br><span class="line">│       ├── application.properties //resources目录下的配置文件, 默认打包后存放位置</span><br><span class="line">│       └── com //编译后的class</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── maven</span><br><span class="line">│       └── com.example</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br></pre></td></tr></table></figure></li><li><p>增加maven-resources-plugin插件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/resources<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将resources目录配置文件copy至编译目录下</p></li><li><p>增加在mave-jar-plugin插件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--清单文件中创建Class-Path --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>./resources/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于默认会将resources目录下配置文件打包入jar, 这里你可以选择除外配置, 配置文件将不打包入jar. (即使打包入jar, 也可以通过springboot 优先级使得外置配置生效.) 另外, 需要将jar包外目录resources添加进classpath. (若不添加入classpath, 则需要将application.yml或application.properties配置放置在jar同目录或同目录./config下, 使得springboot自动检索配置) </p></li><li><p>配置完全外置后的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── lib</span><br><span class="line">│   ├── accessors-smart-1.2.jar</span><br><span class="line">│   ├── android-json-0.0.20131108.vaadin1.jar</span><br><span class="line">│   ├── asm-5.0.4.jar</span><br><span class="line">│   ├── assertj-core-3.11.1.jar</span><br><span class="line">│   ├── byte-buddy-1.9.10.jar</span><br><span class="line">│   ├── byte-buddy-agent-1.9.10.jar</span><br><span class="line">│   ├── hamcrest-core-1.3.jar</span><br><span class="line">│   ├── hamcrest-library-1.3.jar</span><br><span class="line">│   ├── javax.annotation-api-1.3.2.jar</span><br><span class="line">│   ├── jsonassert-1.5.0.jar</span><br><span class="line">│   ├── json-path-2.4.0.jar</span><br><span class="line">│   ├── json-smart-2.3.jar</span><br><span class="line">│   ├── jul-to-slf4j-1.7.25.jar</span><br><span class="line">│   ├── junit-4.12.jar</span><br><span class="line">│   ├── log4j-api-2.11.2.jar</span><br><span class="line">│   ├── log4j-to-slf4j-2.11.2.jar</span><br><span class="line">│   ├── logback-classic-1.2.3.jar</span><br><span class="line">│   ├── logback-core-1.2.3.jar</span><br><span class="line">│   ├── mockito-core-2.23.4.jar</span><br><span class="line">│   ├── objenesis-2.6.jar</span><br><span class="line">│   ├── slf4j-api-1.7.25.jar</span><br><span class="line">│   ├── snakeyaml-1.23.jar</span><br><span class="line">│   ├── spring-aop-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-beans-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-autoconfigure-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-configuration-processor-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-starter-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-starter-logging-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-starter-test-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-test-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-boot-test-autoconfigure-2.1.3.RELEASE.jar</span><br><span class="line">│   ├── spring-context-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-core-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-expression-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-jcl-5.1.5.RELEASE.jar</span><br><span class="line">│   ├── spring-test-5.1.5.RELEASE.jar</span><br><span class="line">│   └── xmlunit-core-2.6.2.jar</span><br><span class="line">├── resources</span><br><span class="line">│   ├── application-dev.properties</span><br><span class="line">│   └── application.properties</span><br><span class="line">└── spring-config-demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></li></ol><p>​      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-boot-配置外置&quot;&gt;&lt;a href=&quot;#spring-boot-配置外置&quot; class=&quot;headerlink&quot; title=&quot;spring boot 配置外置&quot;&gt;&lt;/a&gt;spring boot 配置外置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sprin
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-04-依赖分离</title>
    <link href="http://github.com/2019/02/22/springboot-04-%E4%BE%9D%E8%B5%96%E5%88%86%E7%A6%BB/"/>
    <id>http://github.com/2019/02/22/springboot-04-依赖分离/</id>
    <published>2019-02-22T09:59:59.000Z</published>
    <updated>2019-09-23T07:16:28.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springboot-依赖分离"><a href="#springboot-依赖分离" class="headerlink" title="springboot 依赖分离"></a>springboot 依赖分离</h2><ol><li><p>spring-boot-maven-plugins 打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用默认springboot的打包方式, 目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── BOOT-INF</span><br><span class="line">│   ├── classes //源代码编译class文件及resources目录配置文件</span><br><span class="line">│   │   ├── application-dev.properties</span><br><span class="line">│   │   ├── application.properties</span><br><span class="line">│   │   └── com</span><br><span class="line">│   └── lib //依赖jar包库</span><br><span class="line">│       ├── javax.annotation-api-1.3.2.jar</span><br><span class="line">│       ├── jul-to-slf4j-1.7.25.jar</span><br><span class="line">│       ├── log4j-api-2.11.2.jar</span><br><span class="line">│       ├── log4j-to-slf4j-2.11.2.jar</span><br><span class="line">│       ├── logback-classic-1.2.3.jar</span><br><span class="line">│       ├── logback-core-1.2.3.jar</span><br><span class="line">│       ├── slf4j-api-1.7.25.jar</span><br><span class="line">│       ├── snakeyaml-1.23.jar</span><br><span class="line">│       ├── spring-aop-5.1.5.RELEASE.jar</span><br><span class="line">│       ├── spring-beans-5.1.5.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-2.1.3.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-autoconfigure-2.1.3.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-configuration-processor-2.1.3.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-starter-2.1.3.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-starter-logging-2.1.3.RELEASE.jar</span><br><span class="line">│       ├── spring-context-5.1.5.RELEASE.jar</span><br><span class="line">│       ├── spring-core-5.1.5.RELEASE.jar</span><br><span class="line">│       ├── spring-expression-5.1.5.RELEASE.jar</span><br><span class="line">│       └── spring-jcl-5.1.5.RELEASE.jar</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF //清单文件</span><br><span class="line">│   ├── maven</span><br><span class="line">│   │   └── com.example</span><br><span class="line">│   └── spring-configuration-metadata.json</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br></pre></td></tr></table></figure><p>若想要依赖分离的打包方式, 首先得了解spring-boot-maven-plugins:repackage 做了哪些操作. <a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/repackage-mojo.html" target="_blank" rel="noopener">看文档</a> </p></li><li><p>修改spring-boot-maven-plugins配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定repackage后, 需要包含哪些依赖, 这里指定null:null即无任何依赖添加至/BOOT-INF/lib中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>null<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>null<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包后, 目录结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── BOOT-INF</span><br><span class="line">│   └── classes</span><br><span class="line">│       ├── application-dev.properties</span><br><span class="line">│       ├── application.properties</span><br><span class="line">│       └── com</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   ├── maven</span><br><span class="line">│   │   └── com.example</span><br><span class="line">│   └── spring-configuration-metadata.json</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br></pre></td></tr></table></figure><p>成功分离lib库中的依赖jar包</p></li><li><p>增加maven-dependcies-plugin配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将项目依赖复制到项目编译目录的lib中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包后, 项目编译后的目录结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── classes</span><br><span class="line">├── generated-sources</span><br><span class="line">├── generated-test-sources</span><br><span class="line">├── lib //依赖jar全在这里</span><br><span class="line">├── maven-archiver</span><br><span class="line">├── maven-status</span><br><span class="line">├── spring-config-demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">├── spring-config-demo-0.0.1-SNAPSHOT.jar.original</span><br><span class="line">└── test-classes</span><br></pre></td></tr></table></figure><p>分离后的jar包有了, 差最后一步, 指定classpath:类路径</p></li><li><p>增加maven-jar-plugin配置</p><p><a href="https://maven.apache.org/plugins/maven-jar-plugin/" target="_blank" rel="noopener">参考文档</a>  The archive configuration to use. See <a href="http://maven.apache.org/shared/maven-archiver/index.html" target="_blank" rel="noopener">Maven Archiver Reference</a> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--清单文件中创建Class-Path 以及 类路径前缀名lib或./lib --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ok! 打包package! <code>java -jar xxxx.jar</code> hello world! </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;springboot-依赖分离&quot;&gt;&lt;a href=&quot;#springboot-依赖分离&quot; class=&quot;headerlink&quot; title=&quot;springboot 依赖分离&quot;&gt;&lt;/a&gt;springboot 依赖分离&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;spring-bo
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>fix-wps-字体问题</title>
    <link href="http://github.com/2018/11/13/fix-wps-fonts/"/>
    <id>http://github.com/2018/11/13/fix-wps-fonts/</id>
    <published>2018-11-13T01:26:59.000Z</published>
    <updated>2019-09-23T07:50:46.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wps-fonts"><a href="#wps-fonts" class="headerlink" title="wps fonts"></a>wps fonts</h1><ul><li>cd wps_sysbol_fonts </li><li>sudo cp * /usr/share/fonts/wps-fonts</li><li>sudo chmod 755 wps-fonts</li><li>cd wps-fonts</li><li>sudo chmod 644 *</li><li>sudo mkfontscale</li><li>sudo mkfontdir</li><li>sudo fc-cache</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;wps-fonts&quot;&gt;&lt;a href=&quot;#wps-fonts&quot; class=&quot;headerlink&quot; title=&quot;wps fonts&quot;&gt;&lt;/a&gt;wps fonts&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;cd wps_sysbol_fonts &lt;/li&gt;
&lt;li&gt;sudo c
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://github.com/categories/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>spring实战-08-websocket-stomp</title>
    <link href="http://github.com/2018/11/01/spring%E5%AE%9E%E6%88%98-08-websocket-stomp/"/>
    <id>http://github.com/2018/11/01/spring实战-08-websocket-stomp/</id>
    <published>2018-11-01T10:27:59.000Z</published>
    <updated>2019-09-23T07:23:21.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring实战-第十八章-websocket-amp-stomp-实现消息功能"><a href="#spring实战-第十八章-websocket-amp-stomp-实现消息功能" class="headerlink" title="spring实战 第十八章 websocket &amp; stomp 实现消息功能"></a>spring实战 第十八章 websocket &amp; stomp 实现消息功能</h3><p>websocket协议提供了通过一个套接字实现全双工通信的功能. 能够实现web浏览器和服务器的”异步”通信. spring4.0支持websocket通讯.</p><ol><li>底层WebSocket api使用/SockJS api使用</li></ol><ul><li><p>实现一个消息处理类(可以实现WebSocketHandler接口/可以继承AbstactWebSocketHandler抽象类/可以继承TextWebSocketHandler实现类), 实现各种处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class TinyHandler extends TextWebSocketHandler&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现一个websocket配置类(可以实现WebSocketConfigurer接口)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSocket</span><br><span class="line">public class WebSocketConfig implements WebSocketConfigurer&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerWebSocketHanders(WebSocketHandlerRegistry registry)&#123;</span><br><span class="line">        registry.addHandler(tinyHandler(), &quot;/tiny&quot;).setAllowedOrigins(&quot;*&quot;);</span><br><span class="line">        //registry.addHandler(tinyHandler(), &quot;/tiny&quot;).setAllowedOrigins(&quot;*&quot;).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public TinyHandler tinyHandler() &#123;</span><br><span class="line">        return new TinyHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>javascript客户端实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用SockJS时引入--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //使用原生WebSock时,采用此方式</span><br><span class="line">    var url = &apos;ws://localhost:8080/tiny&apos;;</span><br><span class="line">    var sock = new WebSock(url);</span><br><span class="line">    //使用SockJS时,采用以下方式(注意: 协议ws/http区别, 这里必须是http或https)</span><br><span class="line">    //var url = &apos;http://localhost:8080/tiny&apos;;</span><br><span class="line">    //var sock = new SockJS(url);</span><br><span class="line">    sock.onopen = function () &#123;</span><br><span class="line">        console.log(&apos;opening&apos;);</span><br><span class="line">        sendHi();</span><br><span class="line">    &#125;</span><br><span class="line">    sock.onmessage = function (ev) &#123;</span><br><span class="line">        console.log(&apos;received message: &apos; + ev.data);</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            sendHi()</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">    sock.onclose = function () &#123;</span><br><span class="line">        console.log(&apos;closing&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendHi() &#123;</span><br><span class="line">        console.log(&apos;sending hi to server&apos;);</span><br><span class="line">        sock.send(&apos;hi from browser&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>stomp 的使用<br>stomp是一个消息协议, 类似jms/amqp. 消息会发布到某个destination目的地, 这个目的地可能有message broker消息代理作为支撑. 同时又有message handler消息处理器监听这个目的地, 接受发送过来的消息. 客户端和服务端的组件通过目的地收发消息. </li><li>1 启动stomp功能</li></ol><ul><li>实现一个配置类, 添加@EnableWebSocketMessageBroker注解, 实现WebSocketMessageBrokerConfigurer接口, 还必须配置一个消息代理和一个消息目的地<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSocketMessageBroker</span><br><span class="line">public class WebSocketStompConfig implements WebSocketMessageBrokerConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerStompEndpoints(StompEndpointRegistry registry) &#123;</span><br><span class="line">        registry.addEndpoint(&quot;/tinyendpoint&quot;).setAllowedOrigins(&quot;*&quot;).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageBroker(MessageBrokerRegistry registry) &#123;</span><br><span class="line">        registry.enableSimpleBroker(&quot;/topic&quot;);</span><br><span class="line">        registry.setApplicationDestinationPrefixes(&quot;/app&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2.2 处理客户端发来的stomp消息</p><ul><li><p>实现一个controller类, 添加@MessageMapping/@SubscribeMapping注解到处理方法上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TinyStompController &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(TinyStompController.class);</span><br><span class="line"></span><br><span class="line">    @MessageMapping(&quot;/sendAAA&quot;)</span><br><span class="line">    public void handleShout(Shout incoming) &#123;</span><br><span class="line">        logger.info(&quot;received message: &quot; + incoming.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SubscribeMapping(&#123;&quot;/subscribeBBB&quot;&#125;)</span><br><span class="line">    public Shout handleSubscription() &#123;</span><br><span class="line">        logger.info(&quot;subscription ...&quot;);</span><br><span class="line">        Shout shout = new Shout();</span><br><span class="line">        shout.setMessage(&quot;tiny!&quot;);</span><br><span class="line">        return shout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现一个消息实体POJO类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Shout &#123;</span><br><span class="line">    private String message;</span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现javascript客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用SockJS时引入--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--使用Stomp时引入--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/stomp.js/2.3.3/stomp.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var url = &apos;http://localhost:8080/tinyendpoint&apos;;</span><br><span class="line">    var sock = new SockJS(url);</span><br><span class="line">    var stomp = Stomp.over(sock);</span><br><span class="line">    var payload = JSON.stringify(&#123;&apos;message&apos;: &apos;hello!&apos;&#125;);</span><br><span class="line">    stomp.connect(&#123;&#125;, function (frame) &#123;</span><br><span class="line">        //发送消息到服务端</span><br><span class="line">        // stomp.send(&quot;/app/sendAAA&quot;, &#123;&#125;, payload);</span><br><span class="line">        //发送订阅消息到服务端</span><br><span class="line">        stomp.subscribe(&quot;/app/subscribeBBB&quot;, handleMessage);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function handleMessage(incoming) &#123;</span><br><span class="line">        var result = JSON.parse(incoming.body);</span><br><span class="line">        console.log(&apos;subscribe: &apos; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>2.3 发送消息到客户端</p><ul><li>处理消息后, 发送附带消息<br>值得注意的是, @MessageMapping注释的方法, 处理完消息后, 返回的消息通过broker channel代理通道发送到消息代理, 此时, 如上述例子中, 由原来的消息目的地/app/sendAAA, 变成新的目的地/topic/sendAAA(自动剥离掉前缀/app, 添加新的前缀/topic), 再发送给消息代理. 我们也可以添加@SendTo注释到方法, 指定处理完后发往的目的地/topic/sendCCC.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@MessageMapping(&quot;/sendAAA&quot;)</span><br><span class="line">@SendTo(&quot;/topic/sendCCC&quot;)</span><br><span class="line">public Shout handleShout(Shout incoming) &#123;</span><br><span class="line">    logger.info(&quot;received message: &quot; + incoming.getMessage());</span><br><span class="line">    Shout shout = new Shout();</span><br><span class="line">    shout.setMessage(&quot;tiny!&quot;);</span><br><span class="line">    return shout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>另外, @SubscribeMapping注释的方法, 处理完订阅消息后, 直接返回消息到客户端. 如果添加@SendTo注解, 也可以指定发往的目的地, 同样也会经过消息代理.</p><ul><li>使用消息模版<br>通过消息模版的方法, 主动发送消息到目的地, 使得客户端收到消息.</li></ul><ol start="3"><li>发送消息到指定用户</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;spring实战-第十八章-websocket-amp-stomp-实现消息功能&quot;&gt;&lt;a href=&quot;#spring实战-第十八章-websocket-amp-stomp-实现消息功能&quot; class=&quot;headerlink&quot; title=&quot;spring实战 第十八
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-03-https服务</title>
    <link href="http://github.com/2018/10/29/springboot-03-https%E6%9C%8D%E5%8A%A1/"/>
    <id>http://github.com/2018/10/29/springboot-03-https服务/</id>
    <published>2018-10-29T11:34:59.000Z</published>
    <updated>2019-09-23T07:15:44.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="springboot-https服务"><a href="#springboot-https服务" class="headerlink" title="springboot https服务"></a>springboot https服务</h3><ul><li>需求: 一个spring boot 项目, 使用内嵌tomcat容器, 运行一个https api接口服务.</li><li>解决: </li></ul><ol><li>ssl证书</li><li>springboot 配置开启https服务</li><li>springboot2.x中, 配置类中添加@Bean TomcatServletWebServerFactory和 @Bean Connector</li></ol><h4 id="获取ssl证书"><a href="#获取ssl证书" class="headerlink" title="获取ssl证书"></a>获取ssl证书</h4><ol><li>keytool生成一个PKCS12格式的证书: keystore.p12, 拷贝至springboot resources根目录(classpath)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650</span><br><span class="line"></span><br><span class="line">alias 别称</span><br><span class="line">storetype 证书类型</span><br><span class="line">keyalg 证书加密算法</span><br><span class="line">keysize 证书大小</span><br><span class="line">keystore 证书名</span><br><span class="line">validity 证书有效期</span><br><span class="line">接着输入密码和相关证书信息</span><br></pre></td></tr></table></figure></li></ol><h4 id="springboot-配置开启https服务"><a href="#springboot-配置开启https服务" class="headerlink" title="springboot 配置开启https服务"></a>springboot 配置开启https服务</h4><ol><li><p>application.properties配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=9443</span><br><span class="line">server.ssl.key-store=classpath:keystore.p12</span><br><span class="line">server.ssl.key-store-password=tomcat123</span><br><span class="line">server.ssl.key-store-type=PKCS12</span><br><span class="line">server.ssl.key-alias=tomcat</span><br></pre></td></tr></table></figure></li><li><p>配置类中添加两个bean, 配置文件中配置了https, 这里需要在代码中配置http的connector.(因为不能在配置文件中同时配置http/https的connector)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Connector connector() &#123;</span><br><span class="line">    Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">    connector.setScheme(&quot;http&quot;);</span><br><span class="line">    connector.setSecure(false);</span><br><span class="line">    connector.setPort(9003);</span><br><span class="line">    connector.setRedirectPort(9443);</span><br><span class="line">    return connector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public TomcatServletWebServerFactory tomcatServletWebServerFactory() &#123;</span><br><span class="line">    TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void postProcessContext(Context context) &#123;</span><br><span class="line">            SecurityConstraint securityConstraint = new SecurityConstraint();</span><br><span class="line">            securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class="line">            SecurityCollection collection = new SecurityCollection();</span><br><span class="line">            collection.addPattern(&quot;/*&quot;);</span><br><span class="line">            securityConstraint.addCollection(collection);</span><br><span class="line">            context.addConstraint(securityConstraint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(connector());</span><br><span class="line">    return tomcat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加@RestController IndexController类, 实现RESTful风格的api接口.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;springboot-https服务&quot;&gt;&lt;a href=&quot;#springboot-https服务&quot; class=&quot;headerlink&quot; title=&quot;springboot https服务&quot;&gt;&lt;/a&gt;springboot https服务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>spring实战-03</title>
    <link href="http://github.com/2018/10/25/spring%E5%AE%9E%E6%88%98-03/"/>
    <id>http://github.com/2018/10/25/spring实战-03/</id>
    <published>2018-10-25T12:11:59.000Z</published>
    <updated>2019-09-23T07:22:53.808Z</updated>
    
    <content type="html"><![CDATA[<p>###spring 实战 第三章 高级装配</p><ol><li>环境和profile, spring为环境相关的bean提供解决方案, 更具环境决定创建哪个bean不创建哪个bean. 创建bean的时机是在运行时确定下来. </li><li>1 配置profile bean (JavaConfig方式, xml方式跳过)</li></ol><ul><li>@Profile注解修饰在类上, 表示配置类中的bean只有在dev profile激活时才会创建. dev profile未激活时, 自动忽略.</li><li>spring3.2以后, @Profile注解可以修饰在方法上, 表示不同环境下的两个bean可以配置在同一个配置类中.</li><li>@Profile(“dev”) 或 @Profile(“product”)</li><li>注意: 没有指定profile的bean始终都会被创建</li></ul><p>1.2 激活profile</p><ul><li>spring根据两个独立的属性决定激活哪个profile: spring.profiles.active/spring.profiles.defautl. 若设置了spring.profiles.active属性, 则根据那个profile激活. 若未设置, 则根据spring.profiles.default的值, 决定那个profile激活. 若均未设置, 则只会创建那些没有定义profile的bean.</li><li>设置属性: 1)DispatcherServlet初始化参数 2)web应用上下文参数 3)JNDI条目 4)环境变量 5)JVM系统属性 6)集成测试类上, 使用@ActiveProfiles注解设置</li></ul><ol start="2"><li>条件bean</li><li>1 spring4.0以后, 引入@Conditional注解, 可以用到带有@Bean注解的方法上. 当给定条件计算结果true才创建bean, 否则忽略.</li><li>2 创建条件bean</li></ol><ul><li><p>@Conditional注解修饰返回bean的方法上</p></li><li><p>@Conditional设置的值为Condition接口的实现类, 提供matches()方法实现, 根据环境中的配置ConditionContext/AnnotatedTypeMetadata决定是否创建bean.</p></li><li><p>ConditionContext接口提供一些方法获得环境中的一些变量.</p></li><li><p>AnnotatedTypeMetadata接口提供一些方法获得带有@Bean注解方法上的其他注解信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@Conditional(MagicExistsCondition.class)</span><br><span class="line">public MagicBean magicBean()&#123; return new MagiceBean();&#125;</span><br><span class="line"></span><br><span class="line">public class MagicExistsConditional implements Condiction&#123;</span><br><span class="line">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)</span><br><span class="line">    &#123;return true;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Profile注解在spring4.0以后重构, 基于@Conditional注解和Condition实现类.</p></li></ul><ol start="3"><li>处理自动装配的歧义<br>当有多个bean匹配装配的结果, 歧义阻碍spring自动装配属性/构造参数/方法参数.</li><li>1 标示首选bean </li></ol><ul><li>@Primary注解和@Component注解组合修饰在组件扫描的bean上</li><li>@Primary注解和@Bean注解组合修饰在JavaConfig配置类的bean声明方法上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Primary</span><br><span class="line">public class IceCream implements Dessert&#123;...&#125;</span><br><span class="line">或</span><br><span class="line">@Bean</span><br><span class="line">@Primary</span><br><span class="line">public Dessert iceCream()&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><p>3.2 限定自动装配bean<br>当首选bean数量超过一个时, spring的限定符能够在所有可选bean中进一步缩小范围.</p><ul><li><p>@Qualifier注解, 可以与@Autowired/@Inject注解协同使用. 指定需要注入的bean.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;iceCream&quot;)</span><br><span class="line">public void setDessert(Dessert dessert)&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意, 当重构了IceCream类后, 其默认bean ID 发生改变, 此时强制限定可能会自动装配失败.</p></li></ul><p>3.3 创建自定义限定符<br>可以自定义bean的限定符, 而不是依赖于bean ID作为限定符.</p><ul><li>在bean上添加@Qualifier注解, 可以与@Component注解组合, 这样自动装配时可以和@Autowired/@Bean组合修饰, 不因为和类名耦合导致破坏自动装配了.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Qualifier(&quot;cold&quot;)</span><br><span class="line">public class IceCream implements Dessert&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>bean的作用域<br>默认情况下, spring应用上下文所有bean都是单例.<br>spring定义了多种作用域:</li></ol><ul><li>单例Singleton: 整个应用中, 只创建一个bean实例</li><li>原型Prototype: 每次注入或者通过spring应用上下文获取时, 都会创建新实例</li><li>会话Session: 整个web应用中, 每个会话创建一个bean实例</li><li>请求Request: 整个web应用中, 每个请求创建一个bean实例<br>@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 或@Scope(“prototype”)注解修饰bean组件.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">public class Notepad&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><p>4.1 使用会话Session/请求Request作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(value=WebApplicationContext.SCOPE_SESSION, proxyMode=ScopeProxyMode.INTERFACES)</span><br><span class="line">public ShoppingCart cart()&#123;...&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class StoreService&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    public void setShoppingCart(ShoppingCart shoppingCart)&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring不会实际讲ShoppingCart bean注入StoreService, 而是spring注入一个ShoppingCart bean的代理, 这个代理暴露与ShoppingCart一样的方法, 使得StoreService认为它就是一个Cart购物车. 当StoreService调用购车的方法时, 代理对其进行懒解析并将调用委托给会话作用域内的真正的bean. </li><li>若bean 是一个接口, 则可以使用上述代理方式</li><li>若bean 是一个类, 则必须使用CGLib生成基于类的代理. proxyMode=ScopedProxyMode.TARGET_CLASS</li></ul><ol start="5"><li>运行时”值”注入<br>依赖注入, 通常指的是将一个bean引用注入到另一个bean的属性或构造参数中, 将两个对象进行关联. 但是, bean装配的另一个方面, 将一个值注入到另一个bean的属性或构造参数中.<br>spring提供运行时求值的方式: 属性占位符/spring表达式语言SpEL</li><li>1 注入外部的值</li></ol><ul><li><p>@PropertiesSource注解声明属性源, 并通过spring的Environment来检索属性.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertiesSource(&quot;classpath:/cn/tinytiny/config/xxx.properties&quot;)</span><br><span class="line">public class ExxpressiveConfig&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    Environment env;</span><br><span class="line">    @Bean</span><br><span class="line">    public BlankDisc disc()&#123;</span><br><span class="line">        return new BlankDisc(env.getPropery(&quot;disc.title&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//xxx.properties配置文件</span><br><span class="line">disc.title=Sgt. Peppers Lonely Heart Club Band</span><br></pre></td></tr></table></figure></li><li><p>解析属性占位符, spring支持将属性定义到外部的属性文件中, 使用占位符值将其插入到bean中. 形式如: ${…} 使用@Value注解注入值. 为了使用占位符, “必须”配置一个PropertySourcesPlaceholderConfigurer配置类.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public BlankDisc(@Value(&quot;$&#123;disc.title&#125;&quot; String title))&#123;</span><br><span class="line">    this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public static PropertySourcesPlaceholderConfigurer placeholderConfigurer()&#123; return new PropertySourcesPlacesholderConfigurer;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5.2 spring表达式语言进行装配</p><ul><li>spring表达式语言能够以简洁的方式将值装配到bean的属性或构造参数中.</li><li>SpEL特性: 使用bean ID 引用bean; 调用方法和访问对象属性; 对值进行运算; 正则匹配; 集合操作; </li><li>spring表达式语言除了依赖注入, 还应用在spring security/thymeleaf模版</li><li>形式 #{…}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#&#123;systemProperties&#123;&apos;disc.title&apos;&#125;&#125; //引入系统属性</span><br><span class="line">#&#123;iceCream.name&#125; //引入bean的属性</span><br><span class="line">#&#123;artistSelector.selectArtist()?.toUpperCase()&#125; //引入bean的方法, &quot;?.&quot;运算符避免返回null引发的空指针异常</span><br><span class="line">#&#123;T(java.lang.Math).PI&#125; //T()运算符获得Class对象, 能够调用返回对象的静态方法和常量</span><br><span class="line">#&#123;T(java.lang.Math).random()&#125;</span><br><span class="line">#&#123;admin.email matches &apos;[a-zA-z0-9]+@[a-zA-Z0-9]+\\.com&apos;&#125; //计算正则</span><br><span class="line">#&#123;jukebox.songs[4].title&#125; //计算集合</span><br><span class="line">#&#123;&apos;this is a test&apos;[3]&#125; //[]运算符从集合或数组索引元素</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###spring 实战 第三章 高级装配&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境和profile, spring为环境相关的bean提供解决方案, 更具环境决定创建哪个bean不创建哪个bean. 创建bean的时机是在运行时确定下来. &lt;/li&gt;
&lt;li&gt;1 配置profile
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>spring实战-02</title>
    <link href="http://github.com/2018/10/25/spring%E5%AE%9E%E6%88%98-02/"/>
    <id>http://github.com/2018/10/25/spring实战-02/</id>
    <published>2018-10-25T06:51:59.000Z</published>
    <updated>2019-09-23T07:22:39.351Z</updated>
    
    <content type="html"><![CDATA[<p>###spring 实战 第二章 装配bean</p><ol><li>装配: 创建应用对象之间协作关系的行为, 也是依赖注入的本质. 容器负责把需要相互协作的对象引用赋予各个对象.</li><li>spring配置的可选方案: </li></ol><ul><li>xml显式配置/</li><li>java显示配置(推荐)/(JavaConfig)</li><li>隐式bean发现机制和自动装配/</li></ul><ol start="3"><li>自动装配bean<br>组件扫描: spring自动发现应用上下文中创建的bean (默认不开启)<br>自动装配: spring自动满足bean之间的依赖</li><li>1 创建bean<br>@Component注解修饰接口实现类<br>@ComponentScan注解修饰XXXConfig类, 开启组件扫描<br>@Autowired注解修饰属性, spring上下文自动创建bean并注入其中</li><li>2 为组件扫描的bean命名<br>@Component(“xxxClassName”)注解修饰实现类, spring默认为其给定一个ID值(小写开头的类名)</li><li>3 设置组件扫描的基础包<br>@ComponentScan注解修饰XXXConfig类, 默认将XXXConfig配置类所在包作为基础包来扫描组件<br>@ComponentScan(“cn.tinytiny.xxx”)<br>@ComponentScan(basePackages=”cn.tinytiny.xxx”)<br>@ComponentScan(basePackages={“cn.tinytiny.aaa”,”cn.tinytiny.bbb”})<br>@ComponentScan(basePackageClasses={AAA.class,BBB.class}) 指定包中包含的类或接口, 这些类所在的包将会作为组件扫描的基础包</li><li>4 通过为bean添加注解实现自动装配<br>@Autowired注解: 自动装配是让spring自动满足bean依赖的一种方法.<br>@Autowired注解可以修饰类的任何方法上.<br>@Autowired(required=true) spring尝试自动装配, 如果没有匹配的bean注入, 此处设置false则处于未装配状态. 注意: 这个处于未装配状态的属性可能导致空指针异常. 默认required=true.</li><li>Java代码装配bean</li><li><ol><li>将第三方库中的组件装配到应用中, 无法为其添加@Component @Autowired注解, 因此无法使用自动装配.</li></ol></li><li><ol start="2"><li>显式装配: java/xml, JavaConfig是更好的选择. JavaConfig和Java代码有所区别, JavaConfig属于配置代码, 意味着不应该包含任何业务逻辑, 也不应该侵入到业务逻辑中. 一般将JavaConfig放置单独一个包中, 与业务逻辑分离.</li></ol></li><li><ol start="3"><li>创建JavaConfig配置类, 添加@Configuration注解, 该类应该包含spring应用上下文中如何创建bean的细节.</li></ol></li><li><ol start="4"><li>JavaConfig配置类中声明简单的bean, 添加一个方法创建所需类型的实例.</li></ol></li></ol><ul><li>@Bean注解修饰该方法. spring将该方法返回对象注册为应用上下文中的bean.</li><li>默认bean的ID与@Bean修饰方法名一样.</li><li>@Bean(name=”xxxClassInstance”) 可以指定bean的ID</li></ul><p>4.5. 借助JavaConfig实现注入, (JavaConfig中装配bean)</p><ul><li>引用创建bean的方法注入该bean, 注意: spring会拦截所有@Bean修饰的方法调用, 并确保该方法返回的是spring所创建的bean而不是实际调用返回的实例. (spring默认创建bean为单利模式)</li><li>将bean以方法参数的方式注入该bean, spring创建另一个被注入bean对象的时候, 会自动装配一个方法入参的bean对象到@Bean修饰的方法中. (最佳的选择, 既可以注入到构造方法也可以注入到setter方法中)</li></ul><ol start="5"><li>Xml配置装配bean</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###spring 实战 第二章 装配bean&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;装配: 创建应用对象之间协作关系的行为, 也是依赖注入的本质. 容器负责把需要相互协作的对象引用赋予各个对象.&lt;/li&gt;
&lt;li&gt;spring配置的可选方案: &lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-02-web</title>
    <link href="http://github.com/2018/10/24/springboot-02-web/"/>
    <id>http://github.com/2018/10/24/springboot-02-web/</id>
    <published>2018-10-24T09:59:59.000Z</published>
    <updated>2019-09-23T07:14:57.244Z</updated>
    
    <content type="html"><![CDATA[<p>###spring boot 02</p><ol><li>json接口开发, @RestController修饰控controller类, @RequestMapping修饰返回数据实体对象的方法</li><li>自定义filter, 实现Filter接口, 实现接口方法, 添加@Configuration注解到config类, 将自定义filter加入到过滤链中.</li><li>自定义properties, application.properties添加配置, 添加@Compnent注解到自定义配置类, 添加@Value注解到自定义类的每个属性</li><li>自定义log日志配置, application.properties添加配置,<h1 id="本机日志路径"><a href="#本机日志路径" class="headerlink" title="本机日志路径"></a>本机日志路径</h1>logging.path=/home/tinytinycn/tmp/log <h1 id="level配置不同包路径下资源的log级别"><a href="#level配置不同包路径下资源的log级别" class="headerlink" title="level配置不同包路径下资源的log级别"></a>level配置不同包路径下资源的log级别</h1>logging.level.com.example=DEBUG<br>logging.level.org.springframework.web=INFO<br>logging.level.org.hibernate=ERROR</li><li>数据库操作(跳过)</li><li>thymeleaf模版, springboot 推荐代替jsp</li><li>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎. 类似JSP, Velocity,FreeMaker等. 最大特点: 直接浏览器打开显示不需要启动整个web应用.</li><li>gradle构建工具, 推荐, 但目前maven仍是主流</li><li>webjars: 讲客户端浏览器资源打成jar包文件, 对资源进行统一的依赖管理. webjars部署到maven中央仓库.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###spring boot 02&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;json接口开发, @RestController修饰控controller类, @RequestMapping修饰返回数据实体对象的方法&lt;/li&gt;
&lt;li&gt;自定义filter, 实现Filter接口, 实现接口
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-01-starter</title>
    <link href="http://github.com/2018/10/24/springboot-01-stater/"/>
    <id>http://github.com/2018/10/24/springboot-01-stater/</id>
    <published>2018-10-24T09:01:59.000Z</published>
    <updated>2019-09-23T07:15:07.411Z</updated>
    
    <content type="html"><![CDATA[<p>###spring boot 01</p><ol><li>spring boot 目的是用来简化新Spring应用的初始搭建以及开发过程.</li><li>其实就是简单、快速、方便！</li><li>maven构建项目, pom.xml 默认包含两个模块: spring-boot-starter核心模块(自动配置,日志,yaml)/spring-boot-startertest测试模块(junit,hamcrest,mockito)</li><li>支持web模块, pom引入spring-boot-starter-web模块</li><li>支持热部署实时调试, pom引入spring-boot-devtools模块, spring-boot-maven-plugin插件添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;&lt;fork&gt;true&lt;/fork&gt;&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ol><p>开启idea自动编译开关(setting&gt;compiler&gt;build project automatically)</p><ol start="6"><li>spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题.</li><li>sping boot非常适合构建微服务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###spring boot 01&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;spring boot 目的是用来简化新Spring应用的初始搭建以及开发过程.&lt;/li&gt;
&lt;li&gt;其实就是简单、快速、方便！&lt;/li&gt;
&lt;li&gt;maven构建项目, pom.xml 默认包含两个模块: spri
      
    
    </summary>
    
    
      <category term="java" scheme="http://github.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>python-12-常用内建模块</title>
    <link href="http://github.com/2018/09/20/python-12-%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>http://github.com/2018/09/20/python-12-常用内建模块/</id>
    <published>2018-09-20T08:33:41.000Z</published>
    <updated>2019-09-22T09:26:36.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="datetime日期时间"><a href="#datetime日期时间" class="headerlink" title="datetime日期时间"></a>datetime日期时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">now=datetime.now()                # 获取当前时间</span><br><span class="line">dt=datetime(2018, 09, 15, 12, 12) # 指定时间</span><br><span class="line">ts=dt.timestamp()                 # datetime类型 &gt; timestamp时间戳(注意:浮点数,小数为代表毫秒数)</span><br><span class="line">dt2=datetime.fromtimestamp(ts)    # timestamp时间戳 &gt; datetime类型</span><br><span class="line">dt3=datetime.utcfromtimestamp(t)  # timestamp时间戳 &gt; UTC时间</span><br><span class="line">dt4=datetime.strptime(&apos;2018-09-15 12:12:12&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;) # str &gt; datetime类型</span><br><span class="line">dt5=datetime.now()</span><br><span class="line">dt5.strftime(&apos;%a, %b %d %H:%M&apos;) //Fri, Sep 15 12:12 datetime类型 &gt; str</span><br></pre></td></tr></table></figure><ul><li><p>日期计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime, timedelta</span><br><span class="line"></span><br><span class="line">now=datetime.now()</span><br><span class="line">now+timedelta(hours=10)</span><br><span class="line">now-timedelta(days=1)</span><br><span class="line">now+timedelta(days=2, hours=12)</span><br></pre></td></tr></table></figure></li><li><p>创建时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime, timedelta, timezone</span><br><span class="line"></span><br><span class="line">tz_utc_8=timezone(timedelat(hours=8)) # 创建UTC+8:00时区</span><br><span class="line">now=datetime.now()</span><br><span class="line">dt=now.replace(tzinfo=tz_utc_8)       # 为dt强制设置一个时区</span><br></pre></td></tr></table></figure></li><li><p>时区转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">utc_dt=datetime.utcnow().replace(tzinfo=timezone.utc)  # 获取utc时间, 强制设置为UTC+0:00时区</span><br><span class="line">bj_dt=utc_dt.astimezone(timezone(timedelta(hours=8))) # 转换成UTC+8:00时区对应时间</span><br><span class="line">dj_dt=utc_dt.astimezone(timezone(timedelta(hours=9))) # 转换成UTC+9:00时区对应时间</span><br><span class="line">dj_dt=bj_dt.astimezone(timezone(timedelta(hours=9))) # UTC+8:00 &gt; UTC+9:00</span><br></pre></td></tr></table></figure></li></ul><h3 id="collections集合"><a href="#collections集合" class="headerlink" title="collections集合"></a>collections集合</h3><ul><li><p>nametuple(‘名称’, [属性list])函数, 创建一个自定义tuple对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">point=namedtuple(&apos;point&apos;, [&apos;x&apos;,&apos;y&apos;])</span><br><span class="line">p=point(1,2)</span><br><span class="line">p.x //1</span><br><span class="line">p.y //2</span><br></pre></td></tr></table></figure></li><li><p>deque高效实现插入删除的双向列表, 适合队列和堆栈</p></li><li><p>deque除了实现list的append()/pop()函数, 还支持appendleft()/popleft()函数从头部添加删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import collections import deque</span><br><span class="line"></span><br><span class="line">q=deque([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">q.append(&apos;x&apos;)</span><br><span class="line">q.appendleft(&apos;y&apos;)</span><br><span class="line">q //[&apos;y&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;x&apos;]</span><br></pre></td></tr></table></figure></li><li><p>defaultdict()函数实现不存在key对应元素时,支持默认返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line">dd=defaultdict(lambda:&apos;N/A&apos;)</span><br><span class="line">dd[&apos;k1&apos;]=&apos;abc&apos;</span><br><span class="line">dd[&apos;k1&apos;] //&apos;abc&apos;</span><br><span class="line">dd[&apos;k2&apos;] //不存在, 返回默认值&apos;N/A&apos;</span><br></pre></td></tr></table></figure></li><li><p>OrderedDict()函数实现保持key顺序元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">od=OrderedDict([(&apos;a&apos;,1),(&apos;b&apos;,2),(&apos;c&apos;,3)])</span><br><span class="line">od //保持key的有序性</span><br><span class="line">od[&apos;d&apos;]=4</span><br><span class="line">od[&apos;c&apos;]=3</span><br><span class="line">od.keys() //[&apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;] 注意: 当插入新key时, 总是根据插入时的顺序保持key的排序位置</span><br></pre></td></tr></table></figure></li><li><p>Counter()计数器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">c=Counter()</span><br><span class="line">for ch in &apos;python&apos;:</span><br><span class="line">    c[ch]=c[ch]+1</span><br><span class="line"></span><br><span class="line">c //实际上, Counter是dict子类</span><br></pre></td></tr></table></figure></li></ul><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><ul><li>Base64一种用64个字符标志任意二进制数据的方法(把3个字节二进制变成4个字节字符串, 不足3倍末尾补\x00, 在编码后末尾加=或==)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">base64.b64encode(b&apos;binary\x00string&apos;) //YmluYXJ5AHN0cmluZw==</span><br><span class="line">base64.b64decode(b&apos;YmluYXJ5AHN0cmluZw==&apos;) //b&apos;binary\x00string&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><ul><li>摘要算法又称哈希算法,散列算法, 通过一个函数, 讲任意长度的数据转换为一个长度固定的数据串(通常用16进制的字符串表示)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(&apos;hello, world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line">md55=hashlib.md5()</span><br><span class="line">md55.update(&apos;hello,&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">md55.update(&apos; world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(md55.hexdigest())</span><br><span class="line"></span><br><span class="line">sha1=hashlib.sha1()</span><br><span class="line">sha1.update(&apos;hello, world&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">print(sha1.hexdigest())</span><br></pre></td></tr></table></figure></li></ul><h3 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h3><ul><li>内置模块实现了标准的Hmac算法，它利用一个key对message计算“杂凑”后的hash，使用hmac算法比标准hash算法更安全，因为针对相同的message，不同的key会产生不同的hash<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line"></span><br><span class="line">message = b&apos;hello, world.&apos;</span><br><span class="line">key = b&apos;secret&apos;</span><br><span class="line">h = hmac.new(key, message, digestmod=&apos;MD5&apos;) //随机key, 注意使用的bytes类型</span><br><span class="line">print(h.hexdigest())</span><br></pre></td></tr></table></figure></li></ul><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><ul><li>Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">natuals=itertools.count(1) //创建一个无限迭代器</span><br><span class="line">cs=itertools.cycle(&apos;abc&apos;)  //创建一个无限循环一个序列的迭代器</span><br><span class="line">ns=itertools.repeat(&apos;A&apos;, 3) //创建一个无限重复一个序列的迭代器, 第二个参数可以限定重复次数</span><br><span class="line">ns=itertools.takewhile(lambda x:x&lt;=10, natuals) //截取一个有限的序列</span><br><span class="line">list(ns)</span><br><span class="line">for c in itertools.chain(&apos;abc&apos;, &apos;xyz&apos;):  //串联两个序列, 创建一个迭代器</span><br><span class="line">    print(c)</span><br><span class="line">for key, group in itertools.groupby(&apos;AAABBBCCC&apos;): //迭代器中相同元素分组</span><br><span class="line">    print(key, list(group))</span><br><span class="line">for key, group in itertools.groupby(&apos;AaaBbbCcc&apos;, lambda c:c.upper()): //制定分组限定条件</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure></li></ul><h3 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h3><ul><li><p>某个对象方法的前后添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Query(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def query(self):</span><br><span class="line">        print(&apos;query info about &#123;0&#125;&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def create_query(name):</span><br><span class="line">    print(&apos;begin&apos;)</span><br><span class="line">    q = Query(name)</span><br><span class="line">    yield q</span><br><span class="line">    print(&apos;end&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with create_query(&apos;tinytinycn&apos;) as q:</span><br><span class="line">    q.query()</span><br></pre></td></tr></table></figure></li><li><p>某段代码前后添加特定代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def tag(name):</span><br><span class="line">    print(&apos;&lt;&#123;0&#125;&gt;&apos;.format(name))</span><br><span class="line">    yield</span><br><span class="line">    print(&apos;&lt;/&#123;0&#125;&gt;&apos;.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with tag(&apos;div&apos;):</span><br><span class="line">    print(&apos;\thello&apos;)</span><br><span class="line">    print(&apos;\tworld&apos;)</span><br></pre></td></tr></table></figure></li><li><p>如果某个对象没有实现上下文, 就不能用于with语句, 需要使用closing()把对象变成上下文对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from contextlib improt closing</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line"></span><br><span class="line">with closing(urlopen(&apos;http://www.python.org&apos;)) as page:</span><br><span class="line">    for line in page:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></li><li><p>closing是一个进过@contextmanager修饰的generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@contextmanager</span><br><span class="line">def closing(thing):</span><br><span class="line">    try:</span><br><span class="line">        yield thing</span><br><span class="line">    finally:</span><br><span class="line">        thing.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><ul><li>urllib提供的功能就是利用程序去执行各种HTTP请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, parse</span><br><span class="line"></span><br><span class="line">print(&apos;login to weibo.cn...&apos;)</span><br><span class="line">email = input(&apos;email: &apos;)</span><br><span class="line">password = input(&apos;password: &apos;)</span><br><span class="line">login_data = parse.urlencode([</span><br><span class="line">    (&apos;username&apos;, email),</span><br><span class="line">    (&apos;password&apos;, password),</span><br><span class="line">    (&apos;client_id&apos;, &apos;&apos;),</span><br><span class="line">    (&apos;savestate&apos;, 1),</span><br><span class="line">    (&apos;ec&apos;, &apos;&apos;),</span><br><span class="line">    (&apos;pagerefer&apos;, &apos;https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;r=http%3A%2F%2Fm.weibo.cn%2F&apos;)</span><br><span class="line">])</span><br><span class="line"># post header</span><br><span class="line">req = request.Request(&apos;https://passport.weibo.cn/sso/login&apos;)</span><br><span class="line">req.add_header(&apos;Origin&apos;, &apos;https://passport.weibo.cn&apos;)</span><br><span class="line">req.add_header(&apos;User-Agent&apos;,</span><br><span class="line">               &apos;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&apos;)</span><br><span class="line">req.add_header(&apos;Referer&apos;,</span><br><span class="line">               &apos;https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F&apos;)</span><br><span class="line"># 代理</span><br><span class="line">proxy_handler = request.ProxyHandler(&#123;&apos;http&apos;: &apos;http://www.example.com:3128/&apos;&#125;)</span><br><span class="line">proxy_basic_auth_handler = request.ProxyBasicAuthHandler()</span><br><span class="line">proxy_basic_auth_handler.add_password(&apos;realm&apos;, &apos;host&apos;, &apos;username&apos;, &apos;password&apos;)</span><br><span class="line">opener = request.build_opener(proxy_handler, proxy_basic_auth_handler)</span><br><span class="line"></span><br><span class="line"># 提交data</span><br><span class="line">with opener.open(req, data=login_data.encode(&apos;utf-8&apos;)) as f:</span><br><span class="line">    print(&apos;status: &apos;, f.status, f.reason)</span><br><span class="line">    for k, v in f.getheaders():</span><br><span class="line">        print(&apos;&#123;0&#125;: &#123;1&#125;&apos;.format(k, v))</span><br><span class="line">    print(&apos;data: &apos;, f.read().decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTMLParse"><a href="#HTMLParse" class="headerlink" title="HTMLParse"></a>HTMLParse</h3><ul><li>解析html<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from html.parser import HTMLParser</span><br><span class="line">from html.entities import name2codepoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyHTMLParser(HTMLParser):</span><br><span class="line">    def handle_starttag(self, tag, attrs):</span><br><span class="line">        print(&apos;&lt;&#123;0&#125;&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_endtag(self, tag):</span><br><span class="line">        print(&apos;&lt;/&#123;0&#125;&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_startendtag(self, tag, attrs):</span><br><span class="line">        print(&apos;&lt;&#123;0&#125;/&gt;&apos;.format(tag))</span><br><span class="line"></span><br><span class="line">    def handle_data(self, data):</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">    def handle_comment(self, data):</span><br><span class="line">        print(&apos;&lt;!--&apos;, data, &apos;--&gt;&apos;)</span><br><span class="line"></span><br><span class="line">    def handle_entityref(self, name):</span><br><span class="line">        print(&apos;&amp;&#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line">    def handle_charref(self, name):</span><br><span class="line">        print(&apos;&amp;#&#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html_parser = MyHTMLParser()</span><br><span class="line">html_parser.feed(</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- test html parser --&gt;&lt;p&gt;Some &lt;a href=\&quot;#\&quot;&gt;html&lt;/a&gt; HTML&amp;nbsp;tutorial...&lt;br&gt;END&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;datetime日期时间&quot;&gt;&lt;a href=&quot;#datetime日期时间&quot; class=&quot;headerlink&quot; title=&quot;datetime日期时间&quot;&gt;&lt;/a&gt;datetime日期时间&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-11-正则</title>
    <link href="http://github.com/2018/09/14/python-11-%E6%AD%A3%E5%88%99/"/>
    <id>http://github.com/2018/09/14/python-11-正则/</id>
    <published>2018-09-14T03:53:41.000Z</published>
    <updated>2019-09-22T09:25:59.291Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>\d 1个数字</p></li><li><p>\w 1个字母</p></li><li><p>\s 1个空格</p></li><li><p>.  1个字符</p></li><li><ul><li>0到多个</li></ul></li><li><ul><li>1到多个</li></ul></li><li><p>? 0或1个</p></li><li><p>{n} n个</p></li><li><p>{n,m} n到m个</p></li><li><p>[] 范围内的一个</p></li><li><p>(|) 其中的一个</p></li><li><p>^开头 结尾$</p></li><li><p>\转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;abc\\-007&apos; # python字符串 python中 \为转义字符</span><br><span class="line">&apos;abc\-007&apos;    # 正则字符串 正则中 \为转义字符</span><br><span class="line"></span><br><span class="line">s2=r&apos;abc\-007&apos; # 使用r前缀, 不用考虑python中的转义问题</span><br><span class="line">&apos;abc\-007&apos;    # 正则字符串</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">re.match(r&apos;^\w&#123;3&#125;\-\d&#123;1,3&#125;$&apos;, &apos;abc-007&apos;)  # 匹配成功, 返回Match对象. 否则None</span><br></pre></td></tr></table></figure></li><li><p>split切分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(r&apos;[\s+\,\;]+&apos;, &apos;a b,c; ;d , e&apos;)</span><br></pre></td></tr></table></figure></li><li><p>()分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m=re.match(r&apos;^(\w&#123;3&#125;)\-(\d&#123;1,5&#125;)$&apos;, &apos;abc-1234&apos;)</span><br><span class="line">m.group(0) //abc-1234 # 永远是原始字符串</span><br><span class="line">m.group(1) //abc      # 匹配的子串</span><br><span class="line">m.group(2) //1234     # 匹配的子串</span><br><span class="line">m.groups() //(&apos;abc&apos;, &apos;1234&apos;)</span><br></pre></td></tr></table></figure></li><li><p>贪婪匹配(默认), 匹配尽可能多的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.match(r&apos;^(\d+)(0*)$&apos;, &apos;123000&apos;).groups() // (&apos;123000&apos;, &apos;&apos;) 贪婪模式\d+匹配到最后一个0, 0*只能匹配到空串</span><br><span class="line">re.match(r&apos;^(\d+?)(0*)$&apos;, &apos;123000&apos;).groups() //(&apos;123&apos;, &apos;000&apos;) 使用? 非贪婪模式\d+?匹配尽可能少的字符, 0*匹配到尽可能多的0</span><br></pre></td></tr></table></figure></li><li><p>预编译正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_tel=re.compile(r&apos;^(\d&#123;3&#125;)\-(\d&#123;3,8&#125;)$&apos;)</span><br><span class="line">re_tel.match(&apos;010-12345&apos;).groups()</span><br><span class="line">re_tal.match(&apos;010-8086&apos;).groups()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;\d 1个数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\w 1个字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\s 1个空格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.  1个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;0到多个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-10-进程线程</title>
    <link href="http://github.com/2018/09/14/python-10-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://github.com/2018/09/14/python-10-进程线程/</id>
    <published>2018-09-14T02:23:41.000Z</published>
    <updated>2019-09-22T09:25:37.518Z</updated>
    
    <content type="html"><![CDATA[<p>null</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;null&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-09-io</title>
    <link href="http://github.com/2018/09/13/python-09-io/"/>
    <id>http://github.com/2018/09/13/python-09-io/</id>
    <published>2018-09-13T10:03:41.000Z</published>
    <updated>2019-09-22T09:24:53.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><ul><li>读文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;r&apos;) //读文件模式r</span><br><span class="line">f.read() //&apos;hello,world&apos;, 若文件不存在, 则抛出IOError</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;/home/tinytinycn/test.log&apos;, &apos;r&apos;) as f:</span><br><span class="line">    print(f.read()) //with自动调用close()方法</span><br></pre></td></tr></table></figure><ul><li><p>合理读取文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.read() //一次行读取全部内容</span><br><span class="line">f.read(size) //每次按size个字节读取</span><br><span class="line">f.readlines()一次读取全部内容并返回list 适合配置文件</span><br></pre></td></tr></table></figure></li><li><p>file-like Object, 包含有read()方法的对象, 无需集成特定类</p></li><li><p>读取二级制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.jpg&apos;, &apos;rb&apos;)</span><br><span class="line">f.read() //十六进制表示字节</span><br></pre></td></tr></table></figure></li><li><p>读取编码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/gbk.txt&apos;, &apos;r&apos;, encoding=&apos;gbk&apos;)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;w&apos;)</span><br><span class="line">f.write(&apos;hello world&apos;) //不会立即写入磁盘, 放入内存缓存, 空闲时写入</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with f=open(&apos;/home/tinytinycn/test.log&apos;, &apos;w&apos;) as f:</span><br><span class="line">    f.wirte(&apos;hello world&apos;) //覆盖文件</span><br></pre></td></tr></table></figure><h3 id="StringIO-amp-BytesIO"><a href="#StringIO-amp-BytesIO" class="headerlink" title="StringIO &amp; BytesIO"></a>StringIO &amp; BytesIO</h3><ul><li><p>StringIO读写, 操作str</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line">f=StringIO()</span><br><span class="line">f.write(&apos;hello world&apos;)</span><br><span class="line"></span><br><span class="line">f2=StringIO(&apos;hello\nhi\npython&apos;)</span><br><span class="line">while True:</span><br><span class="line">    s=f2.readline()</span><br><span class="line">    if s==&apos;&apos;:</span><br><span class="line">        break</span><br><span class="line">    print(s.strip())</span><br></pre></td></tr></table></figure></li><li><p>BytesIO读写, 操作二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">f=Bytes()</span><br><span class="line">f.write(&apos;中文&apos;.encode(&apos;utf-8&apos;)) //写入经过utf-8编码的bytes</span><br><span class="line">print(f.getvalue()) //b&apos;\xe4\xb8\xad...&apos;</span><br><span class="line"></span><br><span class="line">f2=Bytes(b&apos;\xe4\xb8\xad...&apos;)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作文件-amp-目录"><a href="#操作文件-amp-目录" class="headerlink" title="操作文件 &amp; 目录"></a>操作文件 &amp; 目录</h3><ul><li><p>操作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.path.abspath(&apos;.&apos;)</span><br><span class="line">os.path.join(&apos;/home/tinytinycn&apos;, &apos;testdir&apos;) //某个目录下创建新目录</span><br><span class="line">os.mkdir(&apos;/home/tinytinycn/testdir&apos;) //创建目录</span><br><span class="line">os.rmdir(&apos;/home/tinytinycn/testdir&apos;) //删除目录</span><br><span class="line">os.path.split(&apos;/home/tinytinycn/testdir/file.log&apos;) //(&apos;/home/tinytinycn/testdir&apos;, &apos;file.log&apos;)</span><br><span class="line">os.path.splittest(&apos;/path/to/file.log&apos;) //(&apos;/path/to/file&apos;, &apos;.txt&apos;)</span><br></pre></td></tr></table></figure></li><li><p>操作文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rename(&apos;test.txt&apos;, &apos;test.py&apos;) //修改当前目录文件名</span><br><span class="line">os.remove(&apos;test.py&apos;) //删除文件</span><br></pre></td></tr></table></figure></li><li><p>os模块不提供复制文件函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">[x for x in os.listdir(&apos;.&apos;) if os.path.isdir(x)]</span><br><span class="line">[x for x in os.listdir(&apos;.&apos;) if os.path.isfile(x) and os.path.splitext(x)[1]==&apos;.py&apos;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul><li><p>序列化, 将内存中的数据写入磁盘或通过网络传输到其他机器上</p></li><li><p>python提供pickle模块实现序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">D=dict(name=&apos;tiny&apos;, age=25, score=100)</span><br><span class="line">pickle.dumps(D) //序列化为一个bytes, 可将bytes写入文件</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.txt&apos;, &apos;wb&apos;)</span><br><span class="line">pickle.dump(D, f) //直接将对象序列化后写入file-like Object</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">`#` 反序列化, 把对象从磁盘读到内存中bytes, 然后通过pickle.loads()反序列化出对象</span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.txt&apos;, &apos;rb&apos;)</span><br><span class="line">D2=pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(D) //反序列化后的dict对象</span><br></pre></td></tr></table></figure></li><li><p>JSON, 将对象徐丽华成标准格式, 方便在不同编程语言之间传递对象</p></li><li><p>python提供json模块实现python对象到JSON格式的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">D=dict(name=&apos;tiny&apos;, age=25, score=100)</span><br><span class="line">json.dumps(D) //返回一个str &#123;&quot;name&quot;:&quot;tiny&quot;, &quot;age&quot;:25, &quot;score&quot;:100&#125;</span><br><span class="line">或</span><br><span class="line">f=open(&apos;dump.json&apos;, &apos;w&apos;)</span><br><span class="line">json.dump(D, f) //写入一个file-like Object</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">`#` 把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化.</span><br></pre></td></tr></table></figure></li><li><p>JSON编码UTF-8</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;读文件&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-08-错误调试测试</title>
    <link href="http://github.com/2018/09/13/python-08-%E9%94%99%E8%AF%AF%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    <id>http://github.com/2018/09/13/python-08-错误调试测试/</id>
    <published>2018-09-13T08:03:41.000Z</published>
    <updated>2019-09-22T09:24:33.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;try start&apos;)</span><br><span class="line">    res=10/0</span><br><span class="line">    print(&apos;try end&apos;)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&apos;valueerror: &apos;,e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&apos;zerodivisionerror: &apos;,e)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;no error&apos;)</span><br><span class="line">finally:</span><br><span class="line">    print(&apos;finally..&apos;)</span><br><span class="line">print(&apos;END&apos;)</span><br></pre></td></tr></table></figure><ul><li><p>所有的错误都从BaseException类派生</p></li><li><p>logging模块记录错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">def foo(s):</span><br><span class="line">    return 10/int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s)*2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(0)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line"></span><br><span class="line">main() //异常, 打印错误栈</span><br><span class="line">print(&apos;END&apos;)</span><br></pre></td></tr></table></figure></li><li><p>抛出错误, 可以自定义异常class, 尽量使用内置错误类型(ValueError/TypeError)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n=int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise FooError(&apos;invalid value: %s&apos; % s)</span><br><span class="line">    return 10/n</span><br><span class="line"></span><br><span class="line">foo(&apos;0&apos;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li><p>print()</p></li><li><p>断言assert, 断言失败将抛出AssertionError</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    n=int(s)</span><br><span class="line">    assert n!=0, &apos;n is zero!&apos; //断言表达式应该为True,　否则False执行后续代码</span><br><span class="line">    return 10/n</span><br><span class="line">def main():</span><br><span class="line">    foo(&apos;0&apos;) //抛出异常</span><br></pre></td></tr></table></figure></li><li><p>启动python解释器关闭assert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -0 hello.py</span><br></pre></td></tr></table></figure></li><li><p>logging, 不会抛出错误, 且可以输出到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO) //指定输出级别debug/info/warning/error</span><br><span class="line"></span><br><span class="line">s=&apos;0&apos;</span><br><span class="line">n=int(s)</span><br><span class="line">logging.info(&apos;n=%d&apos; % n) //</span><br><span class="line">print(10/n)</span><br></pre></td></tr></table></figure></li><li><p>pdb调试器, 让程序单步执行, 随时查看运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pdb hello.py //n下一步 l查看　p 变量名　q结束调试</span><br></pre></td></tr></table></figure></li><li><p>pdb.set_trace()设置断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">s=&apos;0&apos;</span><br><span class="line">n=int(s)</span><br><span class="line">pdb.set_trace() //运行到此处自动暂停　c继续运行</span><br><span class="line">print(10/n)</span><br></pre></td></tr></table></figure></li><li><p>IDE调试</p></li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>测试类需要继承unittest.TestCase</li><li>以test开头的方法为测试方法, 其他方法不会被执行</li><li>assertEqual()</li><li>assertRaises()</li><li>setUp()/tearDown()方法分别在调佣每一个测试方法前后分别被执行, 解决重复代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">`#`mydict.py模块编写如下代码</span><br><span class="line">class Dict(dict): </span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super().__init__(**kw)</span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(&apos;Dict object has no attribute &#123;0&#125;&apos;.format(key))</span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key]=value</span><br><span class="line"></span><br><span class="line">`#`测试mydict_test.py模块编写如下代码</span><br><span class="line">import unittest</span><br><span class="line">from mydict import Dict //引入需要测试的自定义模块</span><br><span class="line"></span><br><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line">    def test_init(self):</span><br><span class="line">　　　　　　　　d=Dict(a=1, b=&apos;test&apos;)</span><br><span class="line">        self.assertEqual(d.a, 1)</span><br><span class="line">        self.assertEqual(d.b, &apos;test&apos;)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line">    def test_key(key):</span><br><span class="line">        d=Dict()</span><br><span class="line">        d[&apos;key&apos;]=&apos;value&apos;</span><br><span class="line">        self.assertEqual(d.key, &apos;value&apos;)</span><br><span class="line">　　　　def test_keyerror(self):</span><br><span class="line">        d=Dict()</span><br><span class="line">        with self.assertRaises(KeyError)</span><br><span class="line">            value=d[&apos;empty&apos;]</span><br><span class="line"></span><br><span class="line">python3 mydict_test.py 或　python3 -m unittest mydict_test (推荐, 可以一次批量运行多个单元测试)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python-07-面向对象高级编程</title>
    <link href="http://github.com/2018/09/13/python-07-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    <id>http://github.com/2018/09/13/python-07-面向对象高级编程/</id>
    <published>2018-09-13T07:33:41.000Z</published>
    <updated>2019-09-22T09:24:06.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="solts"><a href="#solts" class="headerlink" title="__solts"></a>__solts</h3><ul><li><p>先定义class, 后绑定属性和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">from types import MethodType</span><br><span class="line">def set_age(self, age): # 定义一个函数作为实例方法</span><br><span class="line">    self.age=age</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.name = &apos;tiny&apos;</span><br><span class="line">s.age = 25 //25</span><br><span class="line">s.set_age = MethodType(set_age, s) //绑定方法到实例s, 该方法只作用该实例</span><br><span class="line">s.set_age(26)</span><br><span class="line">s.age //26</span><br><span class="line"></span><br><span class="line">def set_score(self, score):</span><br><span class="line">    self.score=score</span><br><span class="line"></span><br><span class="line">Student.set_score=set_score //一般类方法直接定义在class中, 动态绑定允许在运行过程中动态给class加上方法, 使得该方法作用所有实例</span><br><span class="line">s1.set_score(100)</span><br><span class="line">s1.score //100</span><br><span class="line">s2.set_score(99)</span><br><span class="line">s2.score //99</span><br></pre></td></tr></table></figure></li><li><p>定义class时使用<code>__slots__</code>变量, 限制class实例属性的添加. 但不限制该class的子类实例属性的添加!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    __slots__ =(&apos;name&apos;, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.name = &apos;tiny&apos;</span><br><span class="line">s.age = 25</span><br><span class="line">s.score = 100 //AttributeError 报错</span><br></pre></td></tr></table></figure></li></ul><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>@property装饰器负责把一个方法变成属性调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self.score</span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, val):</span><br><span class="line">        if not isinstance(val, int):</span><br><span class="line">            raise ValueError(&apos;score must be an integer!!&apos;)</span><br><span class="line">        if value&lt;0 or value&gt;100:</span><br><span class="line">            raise ValueError(&apos;score must between 0-100&apos;)</span><br><span class="line">        self.score=val</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.score = 99 //实际转化为 s.set_score(99)</span><br><span class="line">s.score 　　　　　//实际转化为 s.get_score()</span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><ul><li>MixIn的目的是给一个类增加多个功能, 通过多重继承组合多个MixIn功能, 而不是设计多层次复杂的继承关系.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Mammal, RunnableMixIn, CarnivaorousMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li></ul><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><ul><li><p><code>__str__()</code>定制print(Student())的信息</p></li><li><p><code>__repr__()</code>定制s的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name=name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        print(&apos;student object (name:&#123;1&#125;))&apos;.format(self.name))</span><br><span class="line">    __repr__=__str__</span><br><span class="line"></span><br><span class="line">s = Student(&apos;tiny&apos;) //实际调用__str__()</span><br><span class="line">s //实际调用__repr__()</span><br></pre></td></tr></table></figure></li><li><p>一个类实现<code>__iter__()</code>方法返回一个迭代对象, 调用迭代对象<code>__next__()</code>方法拿到循环的下一个值, 知道StopIteration错误推出循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class　Fib(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a,self.b=0,1</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.a,self.b=self.b,self.a+self.b</span><br><span class="line">        if self.a&gt;1000:</span><br><span class="line">            raise StopIteration()</span><br><span class="line">        return self.a</span><br><span class="line"></span><br><span class="line">for n in Fib():</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure></li><li><p><code>__getitem__()</code>方法使得对象可以像list一样按下标或切片slice去元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">      if isinstance(n, int):</span><br><span class="line">        a,b=1,1</span><br><span class="line">        for x in range(n):</span><br><span class="line">            a,b=b,a+b</span><br><span class="line">        return a</span><br><span class="line">      if isinstance(n, slice):</span><br><span class="line">        start = n.start</span><br><span class="line">        stop = n.stop</span><br><span class="line">        if start is None:</span><br><span class="line">           start=0</span><br><span class="line">        a,b=1,1</span><br><span class="line">        L=[]</span><br><span class="line">        for x in range(stop):</span><br><span class="line">            if x&gt;=start:</span><br><span class="line">                L.append(a)</span><br><span class="line">            a,b=b,a+b</span><br><span class="line">        return L</span><br><span class="line"></span><br><span class="line">f=Fib()</span><br><span class="line">f[0:5] //[1,1,2,3,5], 注意程序没有对f[2:5]做处理!!!</span><br></pre></td></tr></table></figure></li><li><p><code>__getitem__()</code> <code>__setitem__()</code> <code>__delitem__()</code>方法使得自定义类表现得和list,tuple,dict很像, 归功于动态语言的’鸭子类型’, 不需要强制继承某个接口</p></li><li><p><code>__getattr__()</code>动态返回一个属性, 当调用一个实例的属性时, 在没有该属性时, 才调用<code>__getattr__()</code>方法, 默认返回None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&apos;age&apos;:</span><br><span class="line">           return lambda:25</span><br><span class="line">        raise AttributeError(&apos;student object has no attribute &#123;1&#125;&apos;.format(attr))</span><br><span class="line"></span><br><span class="line">s.age //25</span><br><span class="line">s.score //AttributeError错误</span><br><span class="line"></span><br><span class="line">class Chain(object):</span><br><span class="line">    def __init__(self, path=&apos;&apos;):</span><br><span class="line">        self._path=path</span><br><span class="line">    def __getattr__(self, path):</span><br><span class="line">        return Chain(&apos;&#123;1&#125;/&#123;2&#125;&apos;.format(self._path, path))</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self._path</span><br><span class="line">    __repr__=__str__</span><br><span class="line"></span><br><span class="line">Chain().status.user.timeline.list //链式调用:&apos;/status/user/timeline/list&apos;</span><br></pre></td></tr></table></figure></li><li><p><code>__call__()</code>方法使得对象可以看成函数, 接调用实例本身的方法. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name=name</span><br><span class="line">    def __call__(self):</span><br><span class="line">        pritn(&apos;hello, &#123;1&#125;&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">s = Student(&apos;tiny&apos;)</span><br><span class="line">s() //&apos;hello, tiny&apos; 对实例直接进行调用就像一个函数的调用一样, 判断一个变量是对象还是函数, 看能被调用对象是否为Callable对象, 比如自定义类带有__call__()方法</span><br><span class="line">callable(Student()) //True</span><br><span class="line">callable(max)       //True</span><br><span class="line">callable([1,2,3])   //False</span><br></pre></td></tr></table></figure></li></ul><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li><p>value属性自动赋值int常量, 默认从1开始计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">Month=Enum(&apos;Month&apos;,(&apos;Jan&apos;,&apos;Feb&apos;,&apos;Mar&apos;))</span><br><span class="line"></span><br><span class="line">for name,member in Month.__members__.items():</span><br><span class="line">    print(&apos;&#123;0&#125;=&gt;&#123;1&#125;,&#123;2&#125;&apos;.format(name, member, member.value))</span><br></pre></td></tr></table></figure></li><li><p><code>@unique</code>装饰器保证没有重复值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum,unique</span><br><span class="line"></span><br><span class="line">@unique</span><br><span class="line">class Weekday(Enum):</span><br><span class="line">    Sun=0</span><br><span class="line">    Mon=1</span><br><span class="line">    Tue=2</span><br><span class="line">    Wed=3</span><br><span class="line">    Thu=4</span><br><span class="line">    Fri=5</span><br><span class="line">    Sat=6</span><br><span class="line"></span><br><span class="line">d = Weekday.Mon    //Weekday.Mon</span><br><span class="line">d2= Weekday[&apos;Tue&apos;] //Weekday.Tue</span><br><span class="line">d3= Weekday.Tue.value //2</span><br><span class="line">d4= Weekday(3)     //Weekday.Wed</span><br></pre></td></tr></table></figure></li></ul><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><ul><li>type()函数可以查看类型或变量的类型</li><li>type()函数可以运行期动态创建class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def fn(self, name=&apos;tiny&apos;):</span><br><span class="line">    print(&apos;i am &#123;0&#125;&apos;.format(name))</span><br><span class="line"></span><br><span class="line">Hello = type(&apos;Hello&apos;, (object,), dict(say=fn)) //创建Hello类, 绑定say方法(fn)</span><br><span class="line">h=Hello()</span><br><span class="line">h.say() //hello, tiny</span><br><span class="line">print(type(Hello)) //&lt;class &apos;type&apos;&gt;</span><br><span class="line">print(type(h))     //&lt;class &apos;__main__.Hello&apos;&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><ul><li><p>元类, 动态创建类, 控制类的创建行为</p></li><li><p>先定义metaclass, 接下来创建类, 最后创建实例</p></li><li><p><code>__new__()</code>方法依次接收参数: 当前准备创建类的对象/类名/父类集合/类方法集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">`#` metaclass是类的模板, 必须从`type`类型派生</span><br><span class="line">class ListMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        attrs[&apos;add&apos;]=lambda self,value: self.append(value) //添加新方法</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br><span class="line">`#` 指定定制类</span><br><span class="line">class MyList(list, metaclass=ListMetaclass):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">`#` 创建MyList时, 要通过ListMetaclass.__new__()创建, 因此可以修改类的定义, 添加新方法</span><br><span class="line">L = MyList()</span><br><span class="line">L.add(1) //普通List没有add方法</span><br><span class="line">L //[1]</span><br></pre></td></tr></table></figure></li><li><p>一个简单的ORM框架实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/local/bin/python3</span><br><span class="line">class Field(object):</span><br><span class="line">    def __init__(self,name,col_type):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.col_type=col_type</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&#123;0&#125;:&#123;1&#125;&apos;.format(self.__class__.__name__,self.name)</span><br><span class="line"></span><br><span class="line">class StringField(Field):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(StringField, self).__init__(name,&apos;varchar(100)&apos;)</span><br><span class="line"></span><br><span class="line">class IntegerField(Field):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(IntegerField, self).__init__(name, &apos;bigint&apos;)</span><br><span class="line"></span><br><span class="line">class ModelMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        if name==&apos;Model&apos;:</span><br><span class="line">            return type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(&apos;found model: &#123;0&#125;&apos;.format(name))</span><br><span class="line">        mappings=dict()</span><br><span class="line">        for k,v in attrs.items():</span><br><span class="line">            if isinstance(v, Field):</span><br><span class="line">                print(&apos;found mapping: &#123;0&#125;:&#123;1&#125;&apos;.format(k,v))</span><br><span class="line">                mappings[k]=v</span><br><span class="line">        for k in mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[&apos;__mappings__&apos;]=mappings</span><br><span class="line">        attrs[&apos;__table__&apos;]=name</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">class Model(dict, metaclass=ModelMetaclass):</span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(&apos;model object has no attribute &#123;0&#125;&apos;.format(key))</span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key]=value</span><br><span class="line">    def save(self):</span><br><span class="line">        fields=[]</span><br><span class="line">        params=[]</span><br><span class="line">        args=[]</span><br><span class="line">        for k,v in self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(&apos;?&apos;)</span><br><span class="line">            args.append(getattr(self, k, None))</span><br><span class="line">        sql=&apos;insert into %s (%s) values (%s)&apos; % (self.__table__,&apos;,&apos;.join(fields), &apos;,&apos;.join(params))</span><br><span class="line">        print(&apos;SQL: &#123;0&#125;&apos;.format(sql))</span><br><span class="line">        print(&apos;ARGS: &#123;0&#125;&apos;.format(str(args)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User(Model):</span><br><span class="line">    id=IntegerField(&apos;id&apos;)</span><br><span class="line">    name=StringField(&apos;username&apos;)</span><br><span class="line">    email=StringField(&apos;email&apos;)</span><br><span class="line">    password=StringField(&apos;password&apos;)</span><br><span class="line"></span><br><span class="line">u = User(id=123, name=&apos;tiny&apos;, email=&apos;t.tt@t.tt&apos;, password=&apos;pass&apos;)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;solts&quot;&gt;&lt;a href=&quot;#solts&quot; class=&quot;headerlink&quot; title=&quot;__solts&quot;&gt;&lt;/a&gt;__solts&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先定义class, 后绑定属性和方法&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="python" scheme="http://github.com/categories/python/"/>
    
    
  </entry>
  
</feed>
